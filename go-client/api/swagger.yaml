---
swagger: "2.0"
info:
  description: "API for editing and managing haproxy instances. Provides process information,\
    \ configuration management,\nhaproxy stats and logs.\n"
  version: "3.0"
  title: "HAProxy Data Plane API"
  contact:
    name: "HAProxy Support"
    url: "https://my.haproxy.com/portal/cust/login"
    email: "support@haproxy.com"
basePath: "/v3"
tags:
- name: "ACL"
- name: "Backend"
  description: "Managing backend configurations (advanced mode)"
- name: "BackendSwitchingRule"
- name: "Bind"
  description: "Managing frontend bind configurations (advanced mode)"
- name: "Cache"
- name: "Cluster"
- name: "Configuration"
  description: "Raw HAProxy configuration management (advanced mode)"
- name: "DeclareCapture"
- name: "Defaults"
  description: "Managing defaults configuration (advanced mode)"
- name: "DgramBind"
- name: "Discovery"
  description: "API autodiscover endpoints"
- name: "FCGIApp"
- name: "Filter"
- name: "Frontend"
  description: "Managing frontend configuration (advanced mode)"
- name: "Global"
  description: "Managing global configuration (advanced mode)"
- name: "HTTPCheck"
- name: "HTTPErrorRule"
- name: "HTTPErrors"
- name: "HTTPRequestRule"
- name: "HTTPResponseRule"
- name: "Information"
- name: "LogForward"
- name: "LogTarget"
- name: "MailerEntry"
- name: "Mailers"
- name: "Maps"
- name: "Nameserver"
- name: "Peer"
- name: "PeerEntry"
- name: "ProcessManager"
- name: "Reloads"
  description: "Checking reload success. To avoid constant reloading we reload in\
    \ intervals that are configurable when\nwith reload-delay option. When a change\
    \ to configuration is made and force_reload url query string\nparameter is false\
    \ we issue a request for reload, and return the reload ID in response header.\
    \ You can\nthen use reloads endpoints to check the status of that reload ID. If\
    \ force_reload is true, we override all\nof this and reload immediately.\n"
- name: "Resolver"
- name: "Ring"
- name: "Server"
  description: "Managing backend server configurations (advanced mode)"
- name: "ServerSwitchingRule"
- name: "ServerTemplate"
- name: "ServiceDiscovery"
- name: "Sites"
  description: "Managing sites (simple configuration mode). Sites are considered as\
    \ one frontend with multiple backends\nconnected to it via default_backend or\
    \ use-backend directives.\n"
- name: "Specification"
- name: "SpecificationOpenapiv3"
- name: "Spoe"
- name: "SpoeTransactions"
- name: "Stats"
  description: "Stats container"
- name: "StickRule"
- name: "StickTable"
- name: "Storage"
- name: "TCPCheck"
- name: "TCPRequestRule"
- name: "TCPResponseRule"
- name: "Table"
- name: "Transactions"
  description: "Managing transactions. Configuration changes can be grouped in the\
    \ transaction. You start the\ntransaction with trasactions POST, and call the\
    \ configuration changes you need with parameter\ntransaction_id. When you want\
    \ to commit the transaction, you call the transactions PUT and all changes\nin\
    \ that transaction is committed. If you call a configuration change without the\
    \ transaction_id,\ntransaction mechanism is implicitly called with one operation\
    \ in transaction.\n"
- name: "Userlist"
schemes:
- "http"
- "https"
consumes:
- "application/json"
produces:
- "application/json"
security:
- basic_auth: []
paths:
  /:
    get:
      tags:
      - "Discovery"
      summary: "Return list of root endpoints"
      description: "Returns a list of root endpoints."
      operationId: "getAPIEndpoints"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/endpoints"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /specification:
    get:
      tags:
      - "Specification"
      summary: "Data Plane API Specification"
      description: "Return Data Plane API OpenAPI specification"
      operationId: "getSpecification"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            type: "object"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /specification_openapiv3:
    get:
      tags:
      - "SpecificationOpenapiv3"
      summary: "Data Plane API v3 Specification"
      description: "Return Data Plane API OpenAPI v3 specification"
      operationId: "getOpenapiv3Specification"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            type: "object"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /info:
    get:
      tags:
      - "Information"
      summary: "Return API, hardware and OS information"
      description: "Return API, hardware and OS information"
      operationId: "getInfo"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/info"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /health:
    get:
      tags:
      - "Health"
      summary: "Return managed services health"
      description: "Return managed services health"
      operationId: "getHealth"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/health"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /cluster:
    get:
      tags:
      - "Cluster"
      summary: "Return cluster data"
      description: "Returns cluster data"
      operationId: "getCluster"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/cluster_settings"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Cluster"
      summary: "Post cluster settings"
      description: "Post cluster settings"
      operationId: "postCluster"
      parameters:
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/cluster_settings"
        x-exportParamName: "Data"
      - name: "configuration"
        in: "query"
        description: "In case of moving to single mode do we keep or clean configuration"
        required: false
        type: "string"
        enum:
        - "keep"
        x-exportParamName: "Configuration"
        x-optionalDataType: "String"
      - name: "advertised_address"
        in: "query"
        description: "Force the advertised address when joining a cluster"
        required: false
        type: "string"
        x-exportParamName: "AdvertisedAddress"
        x-optionalDataType: "String"
      - name: "advertised_port"
        in: "query"
        description: "Force the advertised port when joining a cluster"
        required: false
        type: "integer"
        maximum: 65535
        minimum: 1
        x-exportParamName: "AdvertisedPort"
        x-optionalDataType: "Int32"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Cluster settings changed"
          schema:
            $ref: "#/definitions/cluster_settings"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Cluster"
      summary: "Edit cluster settings"
      description: "Edit cluster settings"
      operationId: "editCluster"
      parameters:
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/cluster_settings"
        x-exportParamName: "Data"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Cluster settings changed"
          schema:
            $ref: "#/definitions/cluster_settings"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Cluster"
      summary: "Delete cluster settings"
      description: "Delete cluster settings and move the node back to single mode"
      operationId: "deleteCluster"
      parameters:
      - name: "configuration"
        in: "query"
        description: "In case of moving to single mode do we keep or clean configuration"
        required: false
        type: "string"
        enum:
        - "keep"
        x-exportParamName: "Configuration"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      responses:
        "204":
          description: "Cluster settings deleted and node moved to single mode"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /cluster/certificate:
    post:
      tags:
      - "Cluster"
      summary: "Initiates a certificate refresh"
      description: "Initiates a certificate refresh"
      operationId: "initiateCertificateRefresh"
      parameters: []
      responses:
        "200":
          description: "refresh activated"
        "403":
          description: "refresh not possible"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /service_discovery/aws:
    get:
      tags:
      - "ServiceDiscovery"
      summary: "Return an array of all configured AWS regions"
      description: "Return all configured AWS regions."
      operationId: "getAWSRegions"
      parameters: []
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/awsRegions"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "ServiceDiscovery"
      summary: "Add a new AWS region"
      description: "Add a new AWS region.\nCredentials are not required in case Dataplane\
        \ API is running in an EC2 instance with proper IAM role attached."
      operationId: "createAWSRegion"
      parameters:
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/awsRegion"
        x-exportParamName: "Data"
      responses:
        "201":
          description: "Resource created"
          schema:
            $ref: "#/definitions/awsRegion"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /service_discovery/aws/{id}:
    get:
      tags:
      - "ServiceDiscovery"
      summary: "Return an AWS region"
      description: "Return one AWS Region configuration by it's id."
      operationId: "getAWSRegion"
      parameters:
      - name: "id"
        in: "path"
        description: "AWS region id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/awsRegion"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "ServiceDiscovery"
      summary: "Replace an AWS region"
      description: "Replace an AWS region configuration by its id."
      operationId: "replaceAWSRegion"
      parameters:
      - name: "id"
        in: "path"
        description: "AWS Region ID"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/awsRegion"
        x-exportParamName: "Data"
      responses:
        "200":
          description: "Resource updated"
          schema:
            $ref: "#/definitions/awsRegion"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "ServiceDiscovery"
      summary: "Delete an AWS region"
      description: "Delete an AWS region configuration by it's id."
      operationId: "deleteAWSRegion"
      parameters:
      - name: "id"
        in: "path"
        description: "AWS region ID"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "204":
          description: "Resource deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /service_discovery/consul:
    get:
      tags:
      - "ServiceDiscovery"
      summary: "Return an array of all configured Consul servers"
      description: "Returns all configured Consul servers."
      operationId: "getConsuls"
      parameters: []
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/consuls"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "ServiceDiscovery"
      summary: "Add a new Consul server"
      description: "Adds a new Consul server."
      operationId: "createConsul"
      parameters:
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/consul"
        x-exportParamName: "Data"
      responses:
        "201":
          description: "Consul created"
          schema:
            $ref: "#/definitions/consul"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /service_discovery/consul/{id}:
    get:
      tags:
      - "ServiceDiscovery"
      summary: "Return one Consul server"
      description: "Returns one Consul server configuration by it's id."
      operationId: "getConsul"
      parameters:
      - name: "id"
        in: "path"
        description: "Consul server id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/consul"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "ServiceDiscovery"
      summary: "Replace a Consul server"
      description: "Replaces a Consul server configuration by it's id."
      operationId: "replaceConsul"
      parameters:
      - name: "id"
        in: "path"
        description: "Consul Index"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/consul"
        x-exportParamName: "Data"
      responses:
        "200":
          description: "Consul server replaced"
          schema:
            $ref: "#/definitions/consul"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "ServiceDiscovery"
      summary: "Delete a Consul server"
      description: "Deletes a Consul server configuration by it's id."
      operationId: "deleteConsul"
      parameters:
      - name: "id"
        in: "path"
        description: "Consul server Index"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "204":
          description: "Consul server deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services:
    get:
      tags:
      - "Discovery"
      summary: "Return list of service endpoints"
      description: "Returns a list of API managed services endpoints."
      operationId: "getServicesEndpoints"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/endpoints"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy:
    get:
      tags:
      - "Discovery"
      summary: "Return list of HAProxy related endpoints"
      description: "Returns a list of HAProxy related endpoints."
      operationId: "getHaproxyEndpoints"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/endpoints"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/sites:
    get:
      tags:
      - "Sites"
      summary: "Return an array of sites"
      description: "Returns an array of all configured sites."
      operationId: "getSites"
      parameters:
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/sites"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Sites"
      summary: "Add a site"
      description: "Adds a new site to the configuration file."
      operationId: "createSite"
      parameters:
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/site"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Site created"
          schema:
            $ref: "#/definitions/site"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/site"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/sites/{name}:
    get:
      tags:
      - "Sites"
      summary: "Return a site"
      description: "Returns one site configuration by it's name."
      operationId: "getSite"
      parameters:
      - name: "name"
        in: "path"
        description: "Site frontend name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/site"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Sites"
      summary: "Replace a site"
      description: "Replaces a site configuration by it's name."
      operationId: "replaceSite"
      parameters:
      - name: "name"
        in: "path"
        description: "Site frontend name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/site"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Site replaced"
          schema:
            $ref: "#/definitions/site"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/site"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Sites"
      summary: "Delete a site"
      description: "Deletes a site from the configuration by it's name."
      operationId: "deleteSite"
      parameters:
      - name: "name"
        in: "path"
        description: "Site frontend name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Site deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/stats:
    get:
      tags:
      - "Discovery"
      summary: "Return list of HAProxy stats endpoints"
      description: "Returns a list of HAProxy stats endpoints."
      operationId: "getStatsEndpoints"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/endpoints"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/stats/native:
    get:
      tags:
      - "Stats"
      summary: "Gets stats"
      description: "Getting stats from the HAProxy."
      operationId: "getStats"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "query"
        description: "Object type to get stats for (one of frontend, backend, server)"
        required: false
        type: "string"
        enum:
        - "frontend"
        - "backend"
        - "server"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "name"
        in: "query"
        description: "Object name to get stats for"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "parent"
        in: "query"
        description: "Object parent name to get stats for, in case the object is a\
          \ server"
        required: false
        type: "string"
        x-dependency:
          query.type: "server"
        x-exportParamName: "Parent"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/native_stats"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/native_stats"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/transactions:
    get:
      tags:
      - "Transactions"
      summary: "Return list of HAProxy configuration transactions."
      description: "Returns a list of HAProxy configuration transactions. Transactions\
        \ can be filtered by their status."
      operationId: "getTransactions"
      produces:
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Filter by transaction status"
        required: false
        type: "string"
        enum:
        - "failed"
        - "in_progress"
        x-exportParamName: "Status"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/transactions"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Transactions"
      summary: "Start a new transaction"
      description: "Starts a new transaction and returns it's id"
      operationId: "startTransaction"
      produces:
      - "application/json"
      parameters:
      - name: "version"
        in: "query"
        description: "Configuration version on which to work on"
        required: true
        type: "integer"
        x-exportParamName: "Version"
      responses:
        "201":
          description: "Transaction started"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/transaction"
        "429":
          description: "Too many open transactions"
          schema:
            $ref: "#/definitions/inline_response_429"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/transactions/{id}:
    get:
      tags:
      - "Transactions"
      summary: "Return one HAProxy configuration transactions"
      description: "Returns one HAProxy configuration transactions."
      operationId: "getTransaction"
      parameters:
      - name: "id"
        in: "path"
        description: "Transaction id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/transaction"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Transactions"
      summary: "Commit transaction"
      description: "Commit transaction, execute all operations in transaction and\
        \ return msg"
      operationId: "commitTransaction"
      parameters:
      - name: "id"
        in: "path"
        description: "Transaction id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Transaction successfully committed"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/transaction"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/transaction"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "406":
          description: "The specified resource cannot be handled"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Transactions"
      summary: "Delete a transaction"
      description: "Deletes a transaction."
      operationId: "deleteTransaction"
      parameters:
      - name: "id"
        in: "path"
        description: "Transaction id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "204":
          description: "Transaction deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/spoe_transactions:
    get:
      tags:
      - "SpoeTransactions"
      summary: "Return list of SPOE configuration transactions."
      description: "Returns a list of SPOE configuration transactions. Transactions\
        \ can be filtered by their status."
      operationId: "getSpoeTransactions"
      produces:
      - "application/json"
      parameters:
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      - name: "status"
        in: "query"
        description: "Filter by transaction status"
        required: false
        type: "string"
        enum:
        - "failed"
        - "in_progress"
        x-exportParamName: "Status"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/spoe_transactions"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "SpoeTransactions"
      summary: "Start a new transaction"
      description: "Starts a new transaction and returns it's id"
      operationId: "startSpoeTransaction"
      produces:
      - "application/json"
      parameters:
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      - name: "version"
        in: "query"
        description: "Configuration version on which to work on"
        required: true
        type: "integer"
        x-exportParamName: "Version"
      responses:
        "201":
          description: "Transaction started"
          schema:
            $ref: "#/definitions/spoe_transaction"
        "429":
          description: "Too many open transactions"
          schema:
            $ref: "#/definitions/inline_response_429"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/spoe_transactions/{id}:
    get:
      tags:
      - "SpoeTransactions"
      summary: "Return one SPOE configuration transactions"
      description: "Returns one SPOE configuration transactions."
      operationId: "getSpoeTransaction"
      parameters:
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      - name: "id"
        in: "path"
        description: "Transaction id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/spoe_transaction"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "SpoeTransactions"
      summary: "Commit transaction"
      description: "Commit transaction, execute all operations in transaction and\
        \ return msg"
      operationId: "commitSpoeTransaction"
      parameters:
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      - name: "id"
        in: "path"
        description: "Transaction id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Transaction successfully committed"
          schema:
            $ref: "#/definitions/spoe_transaction"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/spoe_transaction"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "SpoeTransactions"
      summary: "Delete a transaction"
      description: "Deletes a transaction."
      operationId: "deleteSpoeTransaction"
      parameters:
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      - name: "id"
        in: "path"
        description: "Transaction id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "204":
          description: "Transaction deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/reloads:
    get:
      tags:
      - "Reloads"
      summary: "Return list of HAProxy Reloads."
      description: "Returns a list of HAProxy reloads."
      operationId: "getReloads"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/reloads"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/reloads/{id}:
    get:
      tags:
      - "Reloads"
      summary: "Return one HAProxy reload status"
      description: "Returns one HAProxy reload status."
      operationId: "getReload"
      parameters:
      - name: "id"
        in: "path"
        description: "Reload id"
        required: true
        type: "string"
        pattern: "^\\d{4}-\\d{2}-\\d{2}-\\d+$"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/reload"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration:
    get:
      tags:
      - "Discovery"
      summary: "Return list of HAProxy advanced configuration endpoints"
      description: "Returns a list of endpoints to be used for advanced configuration\
        \ of HAProxy objects."
      operationId: "getConfigurationEndpoints"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/endpoints"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/global:
    get:
      tags:
      - "Global"
      summary: "Return a global part of configuration"
      description: "Returns global part of configuration."
      operationId: "getGlobal"
      parameters:
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/global"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Global"
      summary: "Replace global"
      description: "Replace global part of config"
      operationId: "replaceGlobal"
      parameters:
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/global"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Global replaced"
          schema:
            $ref: "#/definitions/global"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/global"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/defaults:
    get:
      tags:
      - "Defaults"
      summary: "Return an array of defaults"
      description: "Returns an array of all configured defaults."
      operationId: "getDefaultsSections"
      parameters:
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/defaults_sections"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Defaults"
      summary: "Add a defaults section"
      description: "Adds a new defaults section to the configuration file."
      operationId: "createDefaultsSection"
      parameters:
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/defaults"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Defaults created"
          schema:
            $ref: "#/definitions/defaults"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/defaults"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/defaults/{name}:
    get:
      tags:
      - "Defaults"
      summary: "Return a defaults section"
      description: "Returns one defaults section configuration by it's name."
      operationId: "getDefaultsSection"
      parameters:
      - name: "name"
        in: "path"
        description: "Defaults name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/defaults"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Defaults"
      summary: "Replace a defatults section"
      description: "Replaces a defatults section configuration by it's name."
      operationId: "replaceDefaultsSection"
      parameters:
      - name: "name"
        in: "path"
        description: "Defaults name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/defaults"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Defaults section replaced"
          schema:
            $ref: "#/definitions/defaults"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/defaults"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Defaults"
      summary: "Delete a defaults section"
      description: "Deletes a defaults section from the configuration by it's name."
      operationId: "deleteDefaultsSection"
      parameters:
      - name: "name"
        in: "path"
        description: "Defaults name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Defaults section deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/frontends:
    get:
      tags:
      - "Frontend"
      summary: "Return an array of frontends"
      description: "Returns an array of all configured frontends."
      operationId: "getFrontends"
      parameters:
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/frontends"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Frontend"
      summary: "Add a frontend"
      description: "Adds a new frontend to the configuration file."
      operationId: "createFrontend"
      parameters:
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/frontend"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Frontend created"
          schema:
            $ref: "#/definitions/frontend"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/frontend"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/frontends/{name}:
    get:
      tags:
      - "Frontend"
      summary: "Return a frontend"
      description: "Returns one frontend configuration by it's name."
      operationId: "getFrontend"
      parameters:
      - name: "name"
        in: "path"
        description: "Frontend name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/frontend"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Frontend"
      summary: "Replace a frontend"
      description: "Replaces a frontend configuration by it's name."
      operationId: "replaceFrontend"
      parameters:
      - name: "name"
        in: "path"
        description: "Frontend name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/frontend"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Frontend replaced"
          schema:
            $ref: "#/definitions/frontend"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/frontend"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Frontend"
      summary: "Delete a frontend"
      description: "Deletes a frontend from the configuration by it's name."
      operationId: "deleteFrontend"
      parameters:
      - name: "name"
        in: "path"
        description: "Frontend name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Frontend deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/userlists:
    get:
      tags:
      - "Userlist"
      summary: "Return an array of userlists"
      description: "Returns an array of all configured userlists."
      operationId: "getUserlists"
      parameters:
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/userlists"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Userlist"
      summary: "Add a new userlist"
      description: "Adds a new userlist to the configuration file."
      operationId: "createUserlist"
      parameters:
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/userlist"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Userlist created"
          schema:
            $ref: "#/definitions/userlist"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/userlist"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/userlists/{name}:
    get:
      tags:
      - "Userlist"
      summary: "Return one userlist"
      description: "Returns one userlist configuration by it's name."
      operationId: "getUserlist"
      parameters:
      - name: "name"
        in: "path"
        description: "Userlist name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/userlist"
        "404":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Userlist"
      summary: "Delete a userlist"
      description: "Deletes a userlist configuration by it's name."
      operationId: "deleteUserlist"
      parameters:
      - name: "name"
        in: "path"
        description: "Userlist name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Userlist deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/users:
    get:
      tags:
      - "User"
      summary: "Return an array of userlist users"
      operationId: "getUsers"
      parameters:
      - name: "userlist"
        in: "query"
        description: "Parent userlist name"
        required: true
        type: "string"
        x-exportParamName: "Userlist"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/users"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "User"
      summary: "Add a new userlist user"
      operationId: "createUser"
      parameters:
      - name: "userlist"
        in: "query"
        description: "Parent userlist name"
        required: true
        type: "string"
        x-exportParamName: "Userlist"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/user"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "User created"
          schema:
            $ref: "#/definitions/user"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/user"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/users/{username}:
    get:
      tags:
      - "User"
      summary: "Return one userlist user"
      operationId: "getUser"
      parameters:
      - name: "username"
        in: "path"
        description: "User username"
        required: true
        type: "string"
        x-exportParamName: "Username"
      - name: "userlist"
        in: "query"
        description: "Parent userlist name"
        required: true
        type: "string"
        x-exportParamName: "Userlist"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/user"
        "404":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "User"
      summary: "Replace a user"
      operationId: "replaceUser"
      parameters:
      - name: "username"
        in: "path"
        description: "User username"
        required: true
        type: "string"
        x-exportParamName: "Username"
      - name: "userlist"
        in: "query"
        description: "Parent userlist name"
        required: true
        type: "string"
        x-exportParamName: "Userlist"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/user"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "User replaced"
          schema:
            $ref: "#/definitions/user"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/user"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "User"
      summary: "Delete a user"
      operationId: "deleteUser"
      parameters:
      - name: "username"
        in: "path"
        description: "User username"
        required: true
        type: "string"
        x-exportParamName: "Username"
      - name: "userlist"
        in: "query"
        description: "Parent userlist name"
        required: true
        type: "string"
        x-exportParamName: "Userlist"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "User deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/groups:
    get:
      tags:
      - "Group"
      summary: "Return an array of userlist groups"
      operationId: "getGroups"
      parameters:
      - name: "userlist"
        in: "query"
        description: "Parent userlist name"
        required: true
        type: "string"
        x-exportParamName: "Userlist"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/groups"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Group"
      summary: "Add a new userlist group"
      operationId: "createGroup"
      parameters:
      - name: "userlist"
        in: "query"
        description: "Parent userlist name"
        required: true
        type: "string"
        x-exportParamName: "Userlist"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/group"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Group created"
          schema:
            $ref: "#/definitions/group"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/group"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/groups/{name}:
    get:
      tags:
      - "Group"
      summary: "Return one userlist group"
      operationId: "getGroup"
      parameters:
      - name: "name"
        in: "path"
        description: "Group name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "userlist"
        in: "query"
        description: "Parent userlist name"
        required: true
        type: "string"
        x-exportParamName: "Userlist"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/group"
        "404":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Group"
      summary: "Replace a group"
      operationId: "replaceGroup"
      parameters:
      - name: "name"
        in: "path"
        description: "group name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "userlist"
        in: "query"
        description: "Parent userlist name"
        required: true
        type: "string"
        x-exportParamName: "Userlist"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/group"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Group replaced"
          schema:
            $ref: "#/definitions/group"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/group"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Group"
      summary: "Delete a group"
      operationId: "deleteGroup"
      parameters:
      - name: "name"
        in: "path"
        description: "group name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "userlist"
        in: "query"
        description: "Parent userlist name"
        required: true
        type: "string"
        x-exportParamName: "Userlist"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Group deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/mailers_section:
    get:
      tags:
      - "Mailers"
      summary: "Return an array of mailers sections"
      description: "Returns an array of all the configured mailers in HAProxy"
      operationId: "getMailersSections"
      parameters:
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/mailers_sections"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Mailers"
      summary: "Add a new Mailers section"
      description: "Creates a new empty Mailers section"
      operationId: "createMailersSection"
      parameters:
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/mailers_section"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Mailers created"
          schema:
            $ref: "#/definitions/mailers_section"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/mailers_section"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/mailers_section/{name}:
    get:
      tags:
      - "Mailers"
      summary: "Return a Mailers section"
      description: "Returns one mailers configuration by it's name."
      operationId: "getMailersSection"
      parameters:
      - name: "name"
        in: "path"
        description: "Mailers name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/mailers_section"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Mailers"
      summary: "Modify a Mailers section"
      description: "Modifies a mailers configuration by it's name."
      operationId: "editMailersSection"
      parameters:
      - name: "name"
        in: "path"
        description: "Mailers name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/mailers_section"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Mailers configuration updated"
          schema:
            $ref: "#/definitions/mailers_section"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/mailers_section"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Mailers"
      summary: "Delete a Mailers section"
      description: "Deletes a mailers from the configuration by it's name."
      operationId: "deleteMailersSection"
      parameters:
      - name: "name"
        in: "path"
        description: "Mailers name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Mailers deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/mailer_entries:
    get:
      tags:
      - "MailerEntry"
      summary: "Return an array of mailer_entries"
      description: "Returns an array of all the mailer_entries configured in the specified\
        \ mailers section."
      operationId: "getMailerEntries"
      parameters:
      - name: "mailers_section"
        in: "query"
        description: "Parent mailers section name"
        required: true
        type: "string"
        x-exportParamName: "MailersSection"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/mailer_entries"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "MailerEntry"
      summary: "Add a new mailer_entry"
      description: "Adds a new mailer entry to the specified mailers section in the\
        \ configuration file."
      operationId: "createMailerEntry"
      parameters:
      - name: "mailers_section"
        in: "query"
        description: "Parent mailers section name"
        required: true
        type: "string"
        x-exportParamName: "MailersSection"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/mailer_entry"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "MailerEntry created"
          schema:
            $ref: "#/definitions/mailer_entry"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/mailer_entry"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/mailer_entries/{name}:
    get:
      tags:
      - "MailerEntry"
      summary: "Return one mailer_entry"
      description: "Returns one mailer_entry configuration by it's name in the specified\
        \ mailers section."
      operationId: "getMailerEntry"
      parameters:
      - name: "name"
        in: "path"
        description: "MailerEntry name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "mailers_section"
        in: "query"
        description: "Parent mailers name"
        required: true
        type: "string"
        x-exportParamName: "MailersSection"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/mailer_entry"
        "404":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "MailerEntry"
      summary: "Replace a mailer_entry"
      description: "Replaces a mailer entry configuration by it's name in the specified\
        \ mailers section."
      operationId: "replaceMailerEntry"
      parameters:
      - name: "name"
        in: "path"
        description: "MailerEntry name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "mailers_section"
        in: "query"
        description: "Parent mailers section name"
        required: true
        type: "string"
        x-exportParamName: "MailersSection"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/mailer_entry"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "MailerEntry replaced"
          schema:
            $ref: "#/definitions/mailer_entry"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/mailer_entry"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "MailerEntry"
      summary: "Delete a mailer_entry"
      description: "Deletes a mailer entry configuration by it's name in the specified\
        \ mailers section."
      operationId: "deleteMailerEntry"
      parameters:
      - name: "name"
        in: "path"
        description: "MailerEntry name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "mailers_section"
        in: "query"
        description: "Parent mailers section name"
        required: true
        type: "string"
        x-exportParamName: "MailersSection"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "MailerEntry deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/peer_section:
    get:
      tags:
      - "Peer"
      summary: "Return an array of peer_section"
      description: "Returns an array of all configured peer_section."
      operationId: "getPeerSections"
      parameters:
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/peer_sections"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Peer"
      summary: "Add a peer"
      description: "Adds a new peer to the configuration file."
      operationId: "createPeer"
      parameters:
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/peer_section"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Peer created"
          schema:
            $ref: "#/definitions/peer_section"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/peer_section"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/peer_section/{name}:
    get:
      tags:
      - "Peer"
      summary: "Return a peer"
      description: "Returns one peer configuration by it's name."
      operationId: "getPeerSection"
      parameters:
      - name: "name"
        in: "path"
        description: "Peer name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/peer_section"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Peer"
      summary: "Delete a peer"
      description: "Deletes a peer from the configuration by it's name."
      operationId: "deletePeer"
      parameters:
      - name: "name"
        in: "path"
        description: "Peer name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Peer deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/peer_entries:
    get:
      tags:
      - "PeerEntry"
      summary: "Return an array of peer_entries"
      description: "Returns an array of all peer_entries that are configured in specified\
        \ peer section."
      operationId: "getPeerEntries"
      parameters:
      - name: "peer_section"
        in: "query"
        description: "Parent peer section name"
        required: true
        type: "string"
        x-exportParamName: "PeerSection"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/peer_entries"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "PeerEntry"
      summary: "Add a new peer_entry"
      description: "Adds a new peer entry in the specified peer section in the configuration\
        \ file."
      operationId: "createPeerEntry"
      parameters:
      - name: "peer_section"
        in: "query"
        description: "Parent peer section name"
        required: true
        type: "string"
        x-exportParamName: "PeerSection"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/peer_entry"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "PeerEntry created"
          schema:
            $ref: "#/definitions/peer_entry"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/peer_entry"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/peer_entries/{name}:
    get:
      tags:
      - "PeerEntry"
      summary: "Return one peer_entry"
      description: "Returns one peer_entry configuration by it's name in the specified\
        \ peer section."
      operationId: "getPeerEntry"
      parameters:
      - name: "name"
        in: "path"
        description: "PeerEntry name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "peer_section"
        in: "query"
        description: "Parent peers name"
        required: true
        type: "string"
        x-exportParamName: "PeerSection"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/peer_entry"
        "404":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "PeerEntry"
      summary: "Replace a peer_entry"
      description: "Replaces a peer entry configuration by it's name in the specified\
        \ peer section."
      operationId: "replacePeerEntry"
      parameters:
      - name: "name"
        in: "path"
        description: "PeerEntry name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "peer_section"
        in: "query"
        description: "Parent peers name"
        required: true
        type: "string"
        x-exportParamName: "PeerSection"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/peer_entry"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "PeerEntry replaced"
          schema:
            $ref: "#/definitions/peer_entry"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/peer_entry"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "PeerEntry"
      summary: "Delete a peer_entry"
      description: "Deletes a peer entry configuration by it's name in the specified\
        \ peer section."
      operationId: "deletePeerEntry"
      parameters:
      - name: "name"
        in: "path"
        description: "PeerEntry name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "peer_section"
        in: "query"
        description: "Parent peers name"
        required: true
        type: "string"
        x-exportParamName: "PeerSection"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "PeerEntry deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/http_errors_sections:
    get:
      tags:
      - "HTTPErrors"
      summary: "Return an array of http-error sections"
      description: "Returns an array of all configured http-error sections."
      operationId: "getHTTPErrorsSections"
      parameters:
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/http_errors_sections"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "HTTPErrors"
      summary: "Add a new http-error section"
      description: "Adds a new http-error section to the configuration."
      operationId: "createHTTPErrorsSection"
      parameters:
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/http_errors_section"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "http-error section created"
          schema:
            $ref: "#/definitions/http_errors_section"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/http_errors_section"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/http_errors_sections/{name}:
    get:
      tags:
      - "HTTPErrors"
      summary: "Return a http-error section"
      description: "Returns one http-error section with a given name from the configuration."
      operationId: "getHTTPErrorsSection"
      parameters:
      - name: "name"
        in: "path"
        description: "http-error section name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/http_errors_section"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "HTTPErrors"
      summary: "Replace a http-error section"
      description: "Replaces a http-error section with a given name in the configuration."
      operationId: "replaceHTTPErrorsSection"
      parameters:
      - name: "name"
        in: "path"
        description: "http-error section name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/http_errors_section"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "http-error section updated"
          schema:
            $ref: "#/definitions/http_errors_section"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/http_errors_section"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "HTTPErrors"
      summary: "Delete a http-error section"
      description: "Deletes a http-error section with a given name from the configuration."
      operationId: "deleteHTTPErrorsSection"
      parameters:
      - name: "name"
        in: "path"
        description: "http-error section name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "http-error section deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/programs:
    get:
      tags:
      - "ProcessManager"
      summary: "Return an array of programs"
      description: "Returns an array of all configured programs in the process-manager\
        \ configuration file."
      operationId: "getPrograms"
      parameters:
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/programs"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "ProcessManager"
      summary: "Add a program"
      description: "Adds a new program to the process-manager configuration file."
      operationId: "createProgram"
      parameters:
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/program"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Program created"
          schema:
            $ref: "#/definitions/program"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/program"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/programs/{name}:
    get:
      tags:
      - "ProcessManager"
      summary: "Return a program"
      description: "Returns one program by its name from the process-manager configuration\
        \ file."
      operationId: "getProgram"
      parameters:
      - name: "name"
        in: "path"
        description: "Program name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/program"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "ProcessManager"
      summary: "Replace a program"
      description: "Replaces a program from the process-manager configuration by its\
        \ name."
      operationId: "replaceProgram"
      parameters:
      - name: "name"
        in: "path"
        description: "Program name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/program"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Program replaced"
          schema:
            $ref: "#/definitions/program"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/program"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "ProcessManager"
      summary: "Delete a program"
      description: "Deletes a program from the process-manager configuration file\
        \ by its name."
      operationId: "deleteProgram"
      parameters:
      - name: "name"
        in: "path"
        description: "Program name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Program deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/fcgi_apps:
    get:
      tags:
      - "FCGIApp"
      summary: "Return an array of FCGI apps"
      description: "Returns an array of all configured FCGI applications."
      operationId: "getFCGIApps"
      parameters:
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/fcgiApps"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "FCGIApp"
      summary: "Add an FCGI app"
      description: "Adds a new FCGI application to the configuration file."
      operationId: "createFCGIApp"
      parameters:
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/fcgiApp"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Application created"
          schema:
            $ref: "#/definitions/fcgiApp"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/fcgiApp"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/fcgi_apps/{name}:
    get:
      tags:
      - "FCGIApp"
      summary: "Return a FCGI app"
      description: "Returns one FCGI application configuration by its name."
      operationId: "getFCGIApp"
      parameters:
      - name: "name"
        in: "path"
        description: "Application name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/fcgiApp"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "FCGIApp"
      summary: "Replace a FCGI app"
      description: "Replaces a FCGI application configuration by its name."
      operationId: "replaceFCGIApp"
      parameters:
      - name: "name"
        in: "path"
        description: "Application name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/fcgiApp"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Application replaced"
          schema:
            $ref: "#/definitions/fcgiApp"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/fcgiApp"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "FCGIApp"
      summary: "Delete an FCGI app"
      description: "Deletes an FCGI application from the configuration by its name."
      operationId: "deleteFCGIApp"
      parameters:
      - name: "name"
        in: "path"
        description: "Application name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Application deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/backends:
    get:
      tags:
      - "Backend"
      summary: "Return an array of backends"
      description: "Returns an array of all configured backends."
      operationId: "getBackends"
      parameters:
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/backends"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Backend"
      summary: "Add a backend"
      description: "Adds a new backend to the configuration file."
      operationId: "createBackend"
      parameters:
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/backend"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Backend created"
          schema:
            $ref: "#/definitions/backend"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/backend"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/backends/{name}:
    get:
      tags:
      - "Backend"
      summary: "Return a backend"
      description: "Returns one backend configuration by it's name."
      operationId: "getBackend"
      parameters:
      - name: "name"
        in: "path"
        description: "Backend name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/backend"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Backend"
      summary: "Replace a backend"
      description: "Replaces a backend configuration by it's name."
      operationId: "replaceBackend"
      parameters:
      - name: "name"
        in: "path"
        description: "Backend name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/backend"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Backend replaced"
          schema:
            $ref: "#/definitions/backend"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/backend"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Backend"
      summary: "Delete a backend"
      description: "Deletes a backend from the configuration by it's name."
      operationId: "deleteBackend"
      parameters:
      - name: "name"
        in: "path"
        description: "Backend name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Backend deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/rings:
    get:
      tags:
      - "Ring"
      summary: "Return an array of rings"
      description: "Returns an array of all configured rings."
      operationId: "getRings"
      parameters:
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/rings"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Ring"
      summary: "Add a ring"
      description: "Adds a new ring to the configuration file."
      operationId: "createRing"
      parameters:
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/ring"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Ring created"
          schema:
            $ref: "#/definitions/ring"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/ring"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/rings/{name}:
    get:
      tags:
      - "Ring"
      summary: "Return a ring"
      description: "Returns one ring configuration by it's name."
      operationId: "getRing"
      parameters:
      - name: "name"
        in: "path"
        description: "Ring name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/ring"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Ring"
      summary: "Replace a ring"
      description: "Replaces a ring configuration by it's name."
      operationId: "replaceRing"
      parameters:
      - name: "name"
        in: "path"
        description: "Ring name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/ring"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Ring replaced"
          schema:
            $ref: "#/definitions/ring"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/ring"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Ring"
      summary: "Delete a ring"
      description: "Deletes a ring from the configuration by it's name."
      operationId: "deleteRing"
      parameters:
      - name: "name"
        in: "path"
        description: "Ring name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Ring deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/binds:
    get:
      tags:
      - "Bind"
      summary: "Return an array of binds"
      description: "Returns an array of all binds that are configured in specified\
        \ frontend."
      operationId: "getBinds"
      parameters:
      - name: "frontend"
        in: "query"
        description: "Parent frontend name"
        required: false
        type: "string"
        x-exportParamName: "Frontend"
        x-optionalDataType: "String"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: false
        type: "string"
        enum:
        - "frontend"
        - "log_forward"
        - "peers"
        x-exportParamName: "ParentType"
        x-optionalDataType: "String"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/binds"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Bind"
      summary: "Add a new bind"
      description: "Adds a new bind in the specified frontend in the configuration\
        \ file."
      operationId: "createBind"
      parameters:
      - name: "frontend"
        in: "query"
        description: "Parent frontend name"
        required: false
        type: "string"
        x-exportParamName: "Frontend"
        x-optionalDataType: "String"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: false
        type: "string"
        enum:
        - "frontend"
        - "log_forward"
        - "peers"
        x-exportParamName: "ParentType"
        x-optionalDataType: "String"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/bind"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Bind created"
          schema:
            $ref: "#/definitions/bind"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/bind"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/binds/{name}:
    get:
      tags:
      - "Bind"
      summary: "Return one bind"
      description: "Returns one bind configuration by it's name in the specified frontend."
      operationId: "getBind"
      parameters:
      - name: "name"
        in: "path"
        description: "Bind name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "frontend"
        in: "query"
        description: "Parent frontend name"
        required: false
        type: "string"
        x-exportParamName: "Frontend"
        x-optionalDataType: "String"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: false
        type: "string"
        enum:
        - "frontend"
        - "log_forward"
        - "peers"
        x-exportParamName: "ParentType"
        x-optionalDataType: "String"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/bind"
        "404":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Bind"
      summary: "Replace a bind"
      description: "Replaces a bind configuration by it's name in the specified frontend."
      operationId: "replaceBind"
      parameters:
      - name: "name"
        in: "path"
        description: "Bind name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "frontend"
        in: "query"
        description: "Parent frontend name"
        required: false
        type: "string"
        x-exportParamName: "Frontend"
        x-optionalDataType: "String"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: false
        type: "string"
        enum:
        - "frontend"
        - "log_forward"
        - "peers"
        x-exportParamName: "ParentType"
        x-optionalDataType: "String"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/bind"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Bind replaced"
          schema:
            $ref: "#/definitions/bind"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/bind"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Bind"
      summary: "Delete a bind"
      description: "Deletes a bind configuration by it's name in the specified frontend."
      operationId: "deleteBind"
      parameters:
      - name: "name"
        in: "path"
        description: "Bind name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "frontend"
        in: "query"
        description: "Parent frontend name"
        required: false
        type: "string"
        x-exportParamName: "Frontend"
        x-optionalDataType: "String"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: false
        type: "string"
        enum:
        - "frontend"
        - "log_forward"
        - "peers"
        x-exportParamName: "ParentType"
        x-optionalDataType: "String"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Bind deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/dgram_binds:
    get:
      tags:
      - "DgramBind"
      summary: "Return an array of dgram binds"
      description: "Returns an array of all dgram binds that are configured in specified\
        \ log forward."
      operationId: "getDgramBinds"
      parameters:
      - name: "log_forward"
        in: "query"
        description: "Parent log forward name"
        required: true
        type: "string"
        x-exportParamName: "LogForward"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/dgram_binds"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "DgramBind"
      summary: "Add a new dgram bind"
      description: "Adds a new dgram bind in the specified log forward in the configuration\
        \ file."
      operationId: "createDgramBind"
      parameters:
      - name: "log_forward"
        in: "query"
        description: "Parent log forward name"
        required: true
        type: "string"
        x-exportParamName: "LogForward"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/dgram_bind"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Bind created"
          schema:
            $ref: "#/definitions/dgram_bind"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/dgram_bind"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/dgram_binds/{name}:
    get:
      tags:
      - "DgramBind"
      summary: "Return one dgram bind"
      description: "Returns one dgram bind configuration by it's name in the specified\
        \ log forward."
      operationId: "getDgramBind"
      parameters:
      - name: "name"
        in: "path"
        description: "Bind name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "log_forward"
        in: "query"
        description: "Parent log forward name"
        required: true
        type: "string"
        x-exportParamName: "LogForward"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/dgram_bind"
        "404":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "DgramBind"
      summary: "Replace a dgram bind"
      description: "Replaces a dgram bind configuration by it's name in the specified\
        \ log forward."
      operationId: "replaceDgramBind"
      parameters:
      - name: "name"
        in: "path"
        description: "Bind name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "log_forward"
        in: "query"
        description: "Parent log forward name"
        required: true
        type: "string"
        x-exportParamName: "LogForward"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/dgram_bind"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Bind replaced"
          schema:
            $ref: "#/definitions/dgram_bind"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/dgram_bind"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "DgramBind"
      summary: "Delete a dgram bind"
      description: "Deletes a dgram bind configuration by it's name in the specified\
        \ log forward."
      operationId: "deleteDgramBind"
      parameters:
      - name: "name"
        in: "path"
        description: "Bind name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "log_forward"
        in: "query"
        description: "Parent log forward name"
        required: true
        type: "string"
        x-exportParamName: "LogForward"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Bind deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/log_forwards:
    get:
      tags:
      - "LogForward"
      summary: "Return an array of log forwards"
      description: "Returns an array of all configured log forwards."
      operationId: "getLogForwards"
      parameters:
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/log_forwards"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "LogForward"
      summary: "Add a log forward"
      description: "Adds a new log_forward to the configuration file."
      operationId: "createLogForward"
      parameters:
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/log_forward"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Log Forward created"
          schema:
            $ref: "#/definitions/log_forward"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/log_forward"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/log_forwards/{name}:
    get:
      tags:
      - "LogForward"
      summary: "Return a log forward"
      description: "Returns one log forward configuration by it's name."
      operationId: "getLogForward"
      parameters:
      - name: "name"
        in: "path"
        description: "Log Forward name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/log_forward"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "LogForward"
      summary: "Replace a log forward"
      description: "Replaces a log forward configuration by it's name."
      operationId: "replaceLogForward"
      parameters:
      - name: "name"
        in: "path"
        description: "Log Forward name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/log_forward"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Log Forward replaced"
          schema:
            $ref: "#/definitions/log_forward"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/log_forward"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "LogForward"
      summary: "Delete a log forward"
      description: "Deletes a log forward from the configuration by it's name."
      operationId: "deleteLogForward"
      parameters:
      - name: "name"
        in: "path"
        description: "Log Forward name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Log Forward deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/servers:
    get:
      tags:
      - "Server"
      summary: "Return an array of servers"
      description: "Returns an array of all servers that are configured in specified\
        \ backend."
      operationId: "getServers"
      parameters:
      - name: "backend"
        in: "query"
        description: "Parent backend name"
        required: false
        type: "string"
        x-exportParamName: "Backend"
        x-optionalDataType: "String"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: false
        type: "string"
        enum:
        - "backend"
        - "ring"
        - "peers"
        x-exportParamName: "ParentType"
        x-optionalDataType: "String"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/servers"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Server"
      summary: "Add a new server"
      description: "Adds a new server in the specified backend in the configuration\
        \ file."
      operationId: "createServer"
      parameters:
      - name: "backend"
        in: "query"
        description: "Parent backend name"
        required: false
        type: "string"
        x-exportParamName: "Backend"
        x-optionalDataType: "String"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: false
        type: "string"
        enum:
        - "backend"
        - "ring"
        - "peers"
        x-exportParamName: "ParentType"
        x-optionalDataType: "String"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/server"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Server created"
          schema:
            $ref: "#/definitions/server"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/server"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/servers/{name}:
    get:
      tags:
      - "Server"
      summary: "Return one server"
      description: "Returns one server configuration by it's name in the specified\
        \ backend."
      operationId: "getServer"
      parameters:
      - name: "name"
        in: "path"
        description: "Server name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "backend"
        in: "query"
        description: "Parent backend name"
        required: false
        type: "string"
        x-exportParamName: "Backend"
        x-optionalDataType: "String"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: false
        type: "string"
        enum:
        - "backend"
        - "ring"
        - "peers"
        x-exportParamName: "ParentType"
        x-optionalDataType: "String"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/server"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Server"
      summary: "Replace a server"
      description: "Replaces a server configuration by it's name in the specified\
        \ backend."
      operationId: "replaceServer"
      parameters:
      - name: "name"
        in: "path"
        description: "Server name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "backend"
        in: "query"
        description: "Parent backend name"
        required: false
        type: "string"
        x-exportParamName: "Backend"
        x-optionalDataType: "String"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: false
        type: "string"
        enum:
        - "backend"
        - "ring"
        - "peers"
        x-exportParamName: "ParentType"
        x-optionalDataType: "String"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/server"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Server replaced"
          schema:
            $ref: "#/definitions/server"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/server"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Server"
      summary: "Delete a server"
      description: "Deletes a server configuration by it's name in the specified backend."
      operationId: "deleteServer"
      parameters:
      - name: "name"
        in: "path"
        description: "Server name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "backend"
        in: "query"
        description: "Parent backend name"
        required: false
        type: "string"
        x-exportParamName: "Backend"
        x-optionalDataType: "String"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: false
        type: "string"
        enum:
        - "backend"
        - "ring"
        - "peers"
        x-exportParamName: "ParentType"
        x-optionalDataType: "String"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Server deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/server_templates:
    get:
      tags:
      - "ServerTemplate"
      summary: "Return an array of server templates"
      description: "Returns an array of all server templates that are configured in\
        \ specified backend."
      operationId: "getServerTemplates"
      parameters:
      - name: "backend"
        in: "query"
        description: "Parent backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
              x-nullable: false
          schema:
            $ref: "#/definitions/server_templates"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "ServerTemplate"
      summary: "Add a new server template"
      description: "Adds a new server template in the specified backend in the configuration\
        \ file."
      operationId: "createServerTemplate"
      parameters:
      - name: "backend"
        in: "query"
        description: "Parent backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/server_template"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Server template created"
          schema:
            $ref: "#/definitions/server_template"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/server_template"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/server_templates/{prefix}:
    get:
      tags:
      - "ServerTemplate"
      summary: "Return one server template"
      description: "Returns one server template configuration by it's prefix in the\
        \ specified backend."
      operationId: "getServerTemplate"
      parameters:
      - name: "prefix"
        in: "path"
        description: "Server template prefix"
        required: true
        type: "string"
        x-exportParamName: "Prefix"
      - name: "backend"
        in: "query"
        description: "Parent backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
              x-nullable: false
          schema:
            $ref: "#/definitions/server_template"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "ServerTemplate"
      summary: "Replace a server template"
      description: "Replaces a server template configuration by it's prefix in the\
        \ specified backend."
      operationId: "replaceServerTemplate"
      parameters:
      - name: "prefix"
        in: "path"
        description: "Server template prefix"
        required: true
        type: "string"
        x-exportParamName: "Prefix"
      - name: "backend"
        in: "query"
        description: "Parent backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/server_template"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Server template replaced"
          schema:
            $ref: "#/definitions/server_template"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/server_template"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "ServerTemplate"
      summary: "Delete a server template"
      description: "Deletes a server template configuration by it's prefix in the\
        \ specified backend."
      operationId: "deleteServerTemplate"
      parameters:
      - name: "prefix"
        in: "path"
        description: "Server template prefix"
        required: true
        type: "string"
        x-exportParamName: "Prefix"
      - name: "backend"
        in: "query"
        description: "Parent backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Server template deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/http_checks:
    get:
      tags:
      - "HTTPCheck"
      summary: "Return an array of HTTP checks"
      description: "Returns all HTTP checks that are configured in specified parent."
      operationId: "getHTTPChecks"
      parameters:
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "backend"
        - "defaults"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/http_checks"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "HTTPCheck"
      summary: "Add a new HTTP check"
      description: "Adds a new HTTP check of the specified type in the specified parent."
      operationId: "createHTTPCheck"
      parameters:
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "backend"
        - "defaults"
        x-exportParamName: "ParentType"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/http_check"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "HTTP check created"
          schema:
            $ref: "#/definitions/http_check"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/http_check"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/http_checks/{index}:
    get:
      tags:
      - "HTTPCheck"
      summary: "Return one HTTP check"
      description: "Returns one HTTP check configuration by it's index in the specified\
        \ parent."
      operationId: "getHTTPCheck"
      parameters:
      - name: "index"
        in: "path"
        description: "HTTP Check Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "backend"
        - "defaults"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/http_check"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "HTTPCheck"
      summary: "Replace a HTTP check"
      description: "Replaces a HTTP Check configuration by it's index in the specified\
        \ parent."
      operationId: "replaceHTTPCheck"
      parameters:
      - name: "index"
        in: "path"
        description: "HTTP Check Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "backend"
        - "defaults"
        x-exportParamName: "ParentType"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/http_check"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "HTTP check replaced"
          schema:
            $ref: "#/definitions/http_check"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/http_check"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "HTTPCheck"
      summary: "Delete a HTTP check"
      description: "Deletes a HTTP check configuration by it's index from the specified\
        \ parent."
      operationId: "deleteHTTPCheck"
      parameters:
      - name: "index"
        in: "path"
        description: "HTTP check Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "backend"
        - "defaults"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "HTTP check deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/http_request_rules:
    get:
      tags:
      - "HTTPRequestRule"
      summary: "Return an array of all HTTP Request Rules"
      description: "Returns all HTTP Request Rules that are configured in specified\
        \ parent."
      operationId: "getHTTPRequestRules"
      parameters:
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/http_request_rules"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "HTTPRequestRule"
      summary: "Add a new HTTP Request Rule"
      description: "Adds a new HTTP Request Rule of the specified type in the specified\
        \ parent."
      operationId: "createHTTPRequestRule"
      parameters:
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/http_request_rule"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "HTTP Request Rule created"
          schema:
            $ref: "#/definitions/http_request_rule"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/http_request_rule"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/http_request_rules/{index}:
    get:
      tags:
      - "HTTPRequestRule"
      summary: "Return one HTTP Request Rule"
      description: "Returns one HTTP Request Rule configuration by it's index in the\
        \ specified parent."
      operationId: "getHTTPRequestRule"
      parameters:
      - name: "index"
        in: "path"
        description: "HTTP Request Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/http_request_rule"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "HTTPRequestRule"
      summary: "Replace a HTTP Request Rule"
      description: "Replaces a HTTP Request Rule configuration by it's index in the\
        \ specified parent."
      operationId: "replaceHTTPRequestRule"
      parameters:
      - name: "index"
        in: "path"
        description: "HTTP Request Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/http_request_rule"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "HTTP Request Rule replaced"
          schema:
            $ref: "#/definitions/http_request_rule"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/http_request_rule"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "HTTPRequestRule"
      summary: "Delete a HTTP Request Rule"
      description: "Deletes a HTTP Request Rule configuration by it's index from the\
        \ specified parent."
      operationId: "deleteHTTPRequestRule"
      parameters:
      - name: "index"
        in: "path"
        description: "HTTP Request Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "HTTP Request Rule deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/http_response_rules:
    get:
      tags:
      - "HTTPResponseRule"
      summary: "Return an array of all HTTP Response Rules"
      description: "Returns all HTTP Response Rules that are configured in specified\
        \ parent."
      operationId: "getHTTPResponseRules"
      parameters:
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/http_response_rules"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "HTTPResponseRule"
      summary: "Add a new HTTP Response Rule"
      description: "Adds a new HTTP Response Rule of the specified type in the specified\
        \ parent."
      operationId: "createHTTPResponseRule"
      parameters:
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/http_response_rule"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "HTTP Response Rule created"
          schema:
            $ref: "#/definitions/http_response_rule"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/http_response_rule"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/http_response_rules/{index}:
    get:
      tags:
      - "HTTPResponseRule"
      summary: "Return one HTTP Response Rule"
      description: "Returns one HTTP Response Rule configuration by it's index in\
        \ the specified parent."
      operationId: "getHTTPResponseRule"
      parameters:
      - name: "index"
        in: "path"
        description: "HTTP Response Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/http_response_rule"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "HTTPResponseRule"
      summary: "Replace a HTTP Response Rule"
      description: "Replaces a HTTP Response Rule configuration by it's index in the\
        \ specified parent."
      operationId: "replaceHTTPResponseRule"
      parameters:
      - name: "index"
        in: "path"
        description: "HTTP Response Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/http_response_rule"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "HTTP Response Rule replaced"
          schema:
            $ref: "#/definitions/http_response_rule"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/http_response_rule"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "HTTPResponseRule"
      summary: "Delete a HTTP Response Rule"
      description: "Deletes a HTTP Response Rule configuration by it's index from\
        \ the specified parent."
      operationId: "deleteHTTPResponseRule"
      parameters:
      - name: "index"
        in: "path"
        description: "HTTP Response Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "HTTP Response Rule deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/http_after_response_rules:
    get:
      tags:
      - "HTTPAfterResponseRule"
      summary: "Return an array of all HTTP After Response Rules"
      description: "Returns all HTTP After Response Rules that are configured in specified\
        \ parent."
      operationId: "getHTTPAfterResponseRules"
      parameters:
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/http_after_response_rules"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "HTTPAfterResponseRule"
      summary: "Add a new HTTP After Response Rule"
      description: "Adds a new HTTP After Response Rule of the specified type in the\
        \ specified parent."
      operationId: "createHTTPAfterResponseRule"
      parameters:
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/http_after_response_rule"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "HTTP Response Rule created"
          schema:
            $ref: "#/definitions/http_after_response_rule"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/http_after_response_rule"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/http_after_response_rules/{index}:
    get:
      tags:
      - "HTTPAfterResponseRule"
      summary: "Return one HTTP After Response Rule"
      description: "Returns one HTTP After Response Rule configuration by it's index\
        \ in the specified parent."
      operationId: "getHTTPAfterResponseRule"
      parameters:
      - name: "index"
        in: "path"
        description: "HTTP After Response Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/http_after_response_rule"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "HTTPAfterResponseRule"
      summary: "Replace a HTTP After Response Rule"
      description: "Replaces a HTTP After Response Rule configuration by it's index\
        \ in the specified parent."
      operationId: "replaceHTTPAfterResponseRule"
      parameters:
      - name: "index"
        in: "path"
        description: "HTTP After Response Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/http_after_response_rule"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "HTTP After Response Rule replaced"
          schema:
            $ref: "#/definitions/http_after_response_rule"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/http_after_response_rule"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "HTTPAfterResponseRule"
      summary: "Delete a HTTP After Response Rule"
      description: "Deletes a HTTP After Response Rule configuration by it's index\
        \ from the specified parent."
      operationId: "deleteHTTPAfterResponseRule"
      parameters:
      - name: "index"
        in: "path"
        description: "HTTP After Response Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "HTTP After Response Rule deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/http_error_rules:
    get:
      tags:
      - "HTTPErrorRule"
      summary: "Return an array of all HTTP Error Rules"
      description: "Returns all HTTP Error Rules that are configured in the specified\
        \ parent."
      operationId: "getHTTPErrorRules"
      parameters:
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        - "defaults"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/http_error_rules"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "HTTPErrorRule"
      summary: "Add a new HTTP Error Rule"
      description: "Adds a new HTTP Error Rule of the specified type in the specified\
        \ parent."
      operationId: "createHTTPErrorRule"
      parameters:
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        - "defaults"
        x-exportParamName: "ParentType"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/http_error_rule"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "HTTP Error Rule created"
          schema:
            $ref: "#/definitions/http_error_rule"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/http_error_rule"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/http_error_rules/{index}:
    get:
      tags:
      - "HTTPErrorRule"
      summary: "Return one HTTP Error Rule"
      description: "Returns one HTTP Error Rule configuration by its index in the\
        \ specified parent."
      operationId: "getHTTPErrorRule"
      parameters:
      - name: "index"
        in: "path"
        description: "HTTP Error Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        - "defaults"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/http_error_rule"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "HTTPErrorRule"
      summary: "Replace a HTTP Error Rule"
      description: "Replaces a HTTP Error Rule configuration by its index in the specified\
        \ parent."
      operationId: "replaceHTTPErrorRule"
      parameters:
      - name: "index"
        in: "path"
        description: "HTTP Error Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        - "defaults"
        x-exportParamName: "ParentType"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/http_error_rule"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "HTTP Error Rule replaced"
          schema:
            $ref: "#/definitions/http_error_rule"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/http_error_rule"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "HTTPErrorRule"
      summary: "Delete a HTTP Error Rule"
      description: "Deletes a HTTP Error Rule configuration by its index from the\
        \ specified parent."
      operationId: "deleteHTTPErrorRule"
      parameters:
      - name: "index"
        in: "path"
        description: "HTTP Error Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        - "defaults"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "HTTP Error Rule deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/tables:
    get:
      tags:
      - "Table"
      summary: "Return an array of tables"
      description: "Returns an array of all tables that are configured in specified\
        \ peer section."
      operationId: "getTables"
      parameters:
      - name: "peer_section"
        in: "query"
        description: "Parent peer section name"
        required: true
        type: "string"
        x-exportParamName: "PeerSection"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/tables"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Table"
      summary: "Add a new table"
      description: "Adds a new table in the specified peer section in the configuration\
        \ file."
      operationId: "createTable"
      parameters:
      - name: "peer_section"
        in: "query"
        description: "Parent peer section name"
        required: true
        type: "string"
        x-exportParamName: "PeerSection"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/table"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Table created"
          schema:
            $ref: "#/definitions/table"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/table"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/tables/{name}:
    get:
      tags:
      - "Table"
      summary: "Return one table"
      description: "Returns one table configuration by it's name in the specified\
        \ peer section."
      operationId: "getTable"
      parameters:
      - name: "name"
        in: "path"
        description: "Table name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "peer_section"
        in: "query"
        description: "Parent peers name"
        required: true
        type: "string"
        x-exportParamName: "PeerSection"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/table"
        "404":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Table"
      summary: "Replace a table"
      description: "Replaces a table configuration by it's name in the specified peer\
        \ section."
      operationId: "replaceTable"
      parameters:
      - name: "name"
        in: "path"
        description: "Table name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "peer_section"
        in: "query"
        description: "Parent peers name"
        required: true
        type: "string"
        x-exportParamName: "PeerSection"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/table"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Table replaced"
          schema:
            $ref: "#/definitions/table"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/table"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Table"
      summary: "Delete a table"
      description: "Deletes a table configuration by it's name in the specified peer\
        \ section."
      operationId: "deleteTable"
      parameters:
      - name: "name"
        in: "path"
        description: "Table name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "peer_section"
        in: "query"
        description: "Parent peers name"
        required: true
        type: "string"
        x-exportParamName: "PeerSection"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Table deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/tcp_checks:
    get:
      tags:
      - "TCPCheck"
      summary: "Return an array of TCP checks"
      description: "Returns all TCP checks that are configured in specified parent."
      operationId: "getTCPChecks"
      parameters:
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "backend"
        - "defaults"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/tcp_checks"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "TCPCheck"
      summary: "Add a new TCP check"
      description: "Adds a new TCP check of the specified type in the specified parent."
      operationId: "createTCPCheck"
      parameters:
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "backend"
        - "defaults"
        x-exportParamName: "ParentType"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/tcp_check"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "TCP check created"
          schema:
            $ref: "#/definitions/tcp_check"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/tcp_check"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/tcp_checks/{index}:
    get:
      tags:
      - "TCPCheck"
      summary: "Return one TCP check"
      description: "Returns one TCP check configuration by it's index in the specified\
        \ parent."
      operationId: "getTCPCheck"
      parameters:
      - name: "index"
        in: "path"
        description: "TCP Check Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "backend"
        - "defaults"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/tcp_check"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "TCPCheck"
      summary: "Replace a TCP check"
      description: "Replaces a TCP Check configuration by it's index in the specified\
        \ parent."
      operationId: "replaceTCPCheck"
      parameters:
      - name: "index"
        in: "path"
        description: "TCP Check Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "backend"
        - "defaults"
        x-exportParamName: "ParentType"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/tcp_check"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "TCP check replaced"
          schema:
            $ref: "#/definitions/tcp_check"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/tcp_check"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "TCPCheck"
      summary: "Delete a TCP check"
      description: "Deletes a TCP check configuration by it's index from the specified\
        \ parent."
      operationId: "deleteTCPCheck"
      parameters:
      - name: "index"
        in: "path"
        description: "TCP check Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "backend"
        - "defaults"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "TCP check deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/tcp_request_rules:
    get:
      tags:
      - "TCPRequestRule"
      summary: "Return an array of all TCP Request Rules"
      description: "Returns all TCP Request Rules that are configured in specified\
        \ parent and parent type."
      operationId: "getTCPRequestRules"
      parameters:
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/tcp_request_rules"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "TCPRequestRule"
      summary: "Add a new TCP Request Rule"
      description: "Adds a new TCP Request Rule of the specified type in the specified\
        \ parent."
      operationId: "createTCPRequestRule"
      parameters:
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/tcp_request_rule"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "TCP Request Rule created"
          schema:
            $ref: "#/definitions/tcp_request_rule"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/tcp_request_rule"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/tcp_request_rules/{index}:
    get:
      tags:
      - "TCPRequestRule"
      summary: "Return one TCP Request Rule"
      description: "Returns one TCP Request Rule configuration by it's index in the\
        \ specified parent."
      operationId: "getTCPRequestRule"
      parameters:
      - name: "index"
        in: "path"
        description: "TCP Request Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/tcp_request_rule"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "TCPRequestRule"
      summary: "Replace a TCP Request Rule"
      description: "Replaces a TCP Request Rule configuration by it's index in the\
        \ specified parent."
      operationId: "replaceTCPRequestRule"
      parameters:
      - name: "index"
        in: "path"
        description: "TCP Request Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/tcp_request_rule"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "TCP Request Rule replaced"
          schema:
            $ref: "#/definitions/tcp_request_rule"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/tcp_request_rule"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "TCPRequestRule"
      summary: "Delete a TCP Request Rule"
      description: "Deletes a TCP Request Rule configuration by it's index from the\
        \ specified parent."
      operationId: "deleteTCPRequestRule"
      parameters:
      - name: "index"
        in: "path"
        description: "TCP Request Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "TCP Request Rule deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/tcp_response_rules:
    get:
      tags:
      - "TCPResponseRule"
      summary: "Return an array of all TCP Response Rules"
      description: "Returns all TCP Response Rules that are configured in specified\
        \ backend."
      operationId: "getTCPResponseRules"
      parameters:
      - name: "backend"
        in: "query"
        description: "Parent backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/tcp_response_rules"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "TCPResponseRule"
      summary: "Add a new TCP Response Rule"
      description: "Adds a new TCP Response Rule of the specified type in the specified\
        \ backend."
      operationId: "createTCPResponseRule"
      parameters:
      - name: "backend"
        in: "query"
        description: "Parent backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/tcp_response_rule"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "TCP Response Rule created"
          schema:
            $ref: "#/definitions/tcp_response_rule"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/tcp_response_rule"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/tcp_response_rules/{index}:
    get:
      tags:
      - "TCPResponseRule"
      summary: "Return one TCP Response Rule"
      description: "Returns one TCP Response Rule configuration by it's index in the\
        \ specified backend."
      operationId: "getTCPResponseRule"
      parameters:
      - name: "index"
        in: "path"
        description: "TCP Response Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "backend"
        in: "query"
        description: "Parent backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/tcp_response_rule"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "TCPResponseRule"
      summary: "Replace a TCP Response Rule"
      description: "Replaces a TCP Response Rule configuration by it's Index in the\
        \ specified backend."
      operationId: "replaceTCPResponseRule"
      parameters:
      - name: "index"
        in: "path"
        description: "TCP Response Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "backend"
        in: "query"
        description: "Parent backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/tcp_response_rule"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "TCP Response Rule replaced"
          schema:
            $ref: "#/definitions/tcp_response_rule"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/tcp_response_rule"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "TCPResponseRule"
      summary: "Delete a TCP Response Rule"
      description: "Deletes a TCP Response Rule configuration by it's index from the\
        \ specified backend."
      operationId: "deleteTCPResponseRule"
      parameters:
      - name: "index"
        in: "path"
        description: "TCP Response Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "backend"
        in: "query"
        description: "Parent backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "TCP Response Rule deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/backend_switching_rules:
    get:
      tags:
      - "BackendSwitchingRule"
      summary: "Return an array of all Backend Switching Rules"
      description: "Returns all Backend Switching Rules that are configured in specified\
        \ frontend."
      operationId: "getBackendSwitchingRules"
      parameters:
      - name: "frontend"
        in: "query"
        description: "Frontend name"
        required: true
        type: "string"
        x-exportParamName: "Frontend"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/backend_switching_rules"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "BackendSwitchingRule"
      summary: "Add a new Backend Switching Rule"
      description: "Adds a new Backend Switching Rule of the specified type in the\
        \ specified frontend."
      operationId: "createBackendSwitchingRule"
      parameters:
      - name: "frontend"
        in: "query"
        description: "Frontend name"
        required: true
        type: "string"
        x-exportParamName: "Frontend"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/backend_switching_rule"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Backend Switching Rule created"
          schema:
            $ref: "#/definitions/backend_switching_rule"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/backend_switching_rule"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/backend_switching_rules/{index}:
    get:
      tags:
      - "BackendSwitchingRule"
      summary: "Return one Backend Switching Rule"
      description: "Returns one Backend Switching Rule configuration by it's index\
        \ in the specified frontend."
      operationId: "getBackendSwitchingRule"
      parameters:
      - name: "index"
        in: "path"
        description: "Switching Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "frontend"
        in: "query"
        description: "Frontend name"
        required: true
        type: "string"
        x-exportParamName: "Frontend"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/backend_switching_rule"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "BackendSwitchingRule"
      summary: "Replace a Backend Switching Rule"
      description: "Replaces a Backend Switching Rule configuration by it's index\
        \ in the specified frontend."
      operationId: "replaceBackendSwitchingRule"
      parameters:
      - name: "index"
        in: "path"
        description: "Switching Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "frontend"
        in: "query"
        description: "Frontend name"
        required: true
        type: "string"
        x-exportParamName: "Frontend"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/backend_switching_rule"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Backend Switching Rule replaced"
          schema:
            $ref: "#/definitions/backend_switching_rule"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/backend_switching_rule"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "BackendSwitchingRule"
      summary: "Delete a Backend Switching Rule"
      description: "Deletes a Backend Switching Rule configuration by it's index from\
        \ the specified frontend."
      operationId: "deleteBackendSwitchingRule"
      parameters:
      - name: "index"
        in: "path"
        description: "Switching Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "frontend"
        in: "query"
        description: "Frontend name"
        required: true
        type: "string"
        x-exportParamName: "Frontend"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Backend Switching Rule deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/server_switching_rules:
    get:
      tags:
      - "ServerSwitchingRule"
      summary: "Return an array of all Server Switching Rules"
      description: "Returns all Backend Switching Rules that are configured in specified\
        \ backend."
      operationId: "getServerSwitchingRules"
      parameters:
      - name: "backend"
        in: "query"
        description: "Backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/server_switching_rules"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "ServerSwitchingRule"
      summary: "Add a new Server Switching Rule"
      description: "Adds a new Server Switching Rule of the specified type in the\
        \ specified backend."
      operationId: "createServerSwitchingRule"
      parameters:
      - name: "backend"
        in: "query"
        description: "Backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/server_switching_rule"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Server Switching Rule created"
          schema:
            $ref: "#/definitions/server_switching_rule"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/server_switching_rule"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/server_switching_rules/{index}:
    get:
      tags:
      - "ServerSwitchingRule"
      summary: "Return one Server Switching Rule"
      description: "Returns one Server Switching Rule configuration by it's index\
        \ in the specified backend."
      operationId: "getServerSwitchingRule"
      parameters:
      - name: "index"
        in: "path"
        description: "Switching Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "backend"
        in: "query"
        description: "Backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/server_switching_rule"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "ServerSwitchingRule"
      summary: "Replace a Server Switching Rule"
      description: "Replaces a Server Switching Rule configuration by it's index in\
        \ the specified backend."
      operationId: "replaceServerSwitchingRule"
      parameters:
      - name: "index"
        in: "path"
        description: "Switching Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "backend"
        in: "query"
        description: "Backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/server_switching_rule"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Server Switching Rule replaced"
          schema:
            $ref: "#/definitions/server_switching_rule"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/server_switching_rule"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "ServerSwitchingRule"
      summary: "Delete a Server Switching Rule"
      description: "Deletes a Server Switching Rule configuration by it's index from\
        \ the specified backend."
      operationId: "deleteServerSwitchingRule"
      parameters:
      - name: "index"
        in: "path"
        description: "Switching Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "backend"
        in: "query"
        description: "Backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Server Switching Rule deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/filters:
    get:
      tags:
      - "Filter"
      summary: "Return an array of all Filters"
      description: "Returns all Filters that are configured in specified parent."
      operationId: "getFilters"
      parameters:
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/filters"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Filter"
      summary: "Add a new Filter"
      description: "Adds a new Filter of the specified type in the specified parent."
      operationId: "createFilter"
      parameters:
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/filter"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Filter created"
          schema:
            $ref: "#/definitions/filter"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/filter"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/filters/{index}:
    get:
      tags:
      - "Filter"
      summary: "Return one Filter"
      description: "Returns one Filter configuration by it's index in the specified\
        \ parent."
      operationId: "getFilter"
      parameters:
      - name: "index"
        in: "path"
        description: "Filter Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/filter"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Filter"
      summary: "Replace a Filter"
      description: "Replaces a Filter configuration by it's index in the specified\
        \ parent."
      operationId: "replaceFilter"
      parameters:
      - name: "index"
        in: "path"
        description: "Filter Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/filter"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Filter replaced"
          schema:
            $ref: "#/definitions/filter"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/filter"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Filter"
      summary: "Delete a Filter"
      description: "Deletes a Filter configuration by it's index from the specified\
        \ parent."
      operationId: "deleteFilter"
      parameters:
      - name: "index"
        in: "path"
        description: "Filter Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Filter deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/stick_rules:
    get:
      tags:
      - "StickRule"
      summary: "Return an array of all Stick Rules"
      description: "Returns all Stick Rules that are configured in specified backend."
      operationId: "getStickRules"
      parameters:
      - name: "backend"
        in: "query"
        description: "Backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/stick_rules"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "StickRule"
      summary: "Add a new Stick Rule"
      description: "Adds a new Stick Rule of the specified type in the specified backend."
      operationId: "createStickRule"
      parameters:
      - name: "backend"
        in: "query"
        description: "Backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/stick_rule"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Stick Rule created"
          schema:
            $ref: "#/definitions/stick_rule"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/stick_rule"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/stick_rules/{index}:
    get:
      tags:
      - "StickRule"
      summary: "Return one Stick Rule"
      description: "Returns one Stick Rule configuration by it's index in the specified\
        \ backend."
      operationId: "getStickRule"
      parameters:
      - name: "index"
        in: "path"
        description: "Stick Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "backend"
        in: "query"
        description: "Backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/stick_rule"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "StickRule"
      summary: "Replace a Stick Rule"
      description: "Replaces a Stick Rule configuration by it's index in the specified\
        \ backend."
      operationId: "replaceStickRule"
      parameters:
      - name: "index"
        in: "path"
        description: "Stick Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "backend"
        in: "query"
        description: "Backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/stick_rule"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Stick Rule replaced"
          schema:
            $ref: "#/definitions/stick_rule"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/stick_rule"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "StickRule"
      summary: "Delete a Stick Rule"
      description: "Deletes a Stick Rule configuration by it's index from the specified\
        \ backend."
      operationId: "deleteStickRule"
      parameters:
      - name: "index"
        in: "path"
        description: "Stick Rule Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "backend"
        in: "query"
        description: "Backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Stick Rule deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/log_targets:
    get:
      tags:
      - "LogTarget"
      summary: "Return an array of all Log Targets"
      description: "Returns all Log Targets that are configured in specified parent."
      operationId: "getLogTargets"
      parameters:
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        - "defaults"
        - "global"
        - "log_forward"
        - "peers"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/log_targets"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "LogTarget"
      summary: "Add a new Log Target"
      description: "Adds a new Log Target of the specified type in the specified parent."
      operationId: "createLogTarget"
      parameters:
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        - "defaults"
        - "global"
        - "log_forward"
        - "peers"
        x-exportParamName: "ParentType"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/log_target"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Log Target created"
          schema:
            $ref: "#/definitions/log_target"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/log_target"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/log_targets/{index}:
    get:
      tags:
      - "LogTarget"
      summary: "Return one Log Target"
      description: "Returns one Log Target configuration by it's index in the specified\
        \ parent."
      operationId: "getLogTarget"
      parameters:
      - name: "index"
        in: "path"
        description: "Log Target Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        - "defaults"
        - "global"
        - "log_forward"
        - "peers"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/log_target"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "LogTarget"
      summary: "Replace a Log Target"
      description: "Replaces a Log Target configuration by it's index in the specified\
        \ parent."
      operationId: "replaceLogTarget"
      parameters:
      - name: "index"
        in: "path"
        description: "Log Target Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        - "defaults"
        - "global"
        - "log_forward"
        - "peers"
        x-exportParamName: "ParentType"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/log_target"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Log Target replaced"
          schema:
            $ref: "#/definitions/log_target"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/log_target"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "LogTarget"
      summary: "Delete a Log Target"
      description: "Deletes a Log Target configuration by it's index from the specified\
        \ parent."
      operationId: "deleteLogTarget"
      parameters:
      - name: "index"
        in: "path"
        description: "Log Target Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: false
        type: "string"
        x-exportParamName: "ParentName"
        x-optionalDataType: "String"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        - "defaults"
        - "global"
        - "log_forward"
        - "peers"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Log Target deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/acls:
    get:
      tags:
      - "ACL"
      summary: "Return an array of all ACL lines"
      description: "Returns all ACL lines that are configured in specified parent."
      operationId: "getAcls"
      parameters:
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        - "fcgi-app"
        x-exportParamName: "ParentType"
      - name: "acl_name"
        in: "query"
        description: "ACL name"
        required: false
        type: "string"
        x-exportParamName: "AclName"
        x-optionalDataType: "String"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/acls"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "ACL"
      summary: "Add a new ACL line"
      description: "Adds a new ACL line of the specified type in the specified parent."
      operationId: "createAcl"
      parameters:
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/acl"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "ACL line created"
          schema:
            $ref: "#/definitions/acl"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/acl"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/acls/{index}:
    get:
      tags:
      - "ACL"
      summary: "Return one ACL line"
      description: "Returns one ACL line configuration by it's index in the specified\
        \ parent."
      operationId: "getAcl"
      parameters:
      - name: "index"
        in: "path"
        description: "ACL line Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/acl"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "ACL"
      summary: "Replace a ACL line"
      description: "Replaces a ACL line configuration by it's index in the specified\
        \ parent."
      operationId: "replaceAcl"
      parameters:
      - name: "index"
        in: "path"
        description: "ACL line Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/acl"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "ACL line replaced"
          schema:
            $ref: "#/definitions/acl"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/acl"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "ACL"
      summary: "Delete a ACL line"
      description: "Deletes a ACL line configuration by it's index from the specified\
        \ parent."
      operationId: "deleteAcl"
      parameters:
      - name: "index"
        in: "path"
        description: "ACL line Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "parent_name"
        in: "query"
        description: "Parent name"
        required: true
        type: "string"
        x-exportParamName: "ParentName"
      - name: "parent_type"
        in: "query"
        description: "Parent type"
        required: true
        type: "string"
        enum:
        - "frontend"
        - "backend"
        x-exportParamName: "ParentType"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "ACL line deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/caches:
    get:
      tags:
      - "Cache"
      summary: "Return an array of caches"
      description: "Returns an array of all configured caches."
      operationId: "getCaches"
      parameters:
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/caches"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Cache"
      summary: "Add a cache"
      description: "Adds a new cache section to the configuration file."
      operationId: "createCache"
      parameters:
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/cache"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Cache created"
          schema:
            $ref: "#/definitions/cache"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/cache"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/caches/{name}:
    get:
      tags:
      - "Cache"
      summary: "Return a cache"
      description: "Returns one cache section configuration by it's name."
      operationId: "getCache"
      parameters:
      - name: "name"
        in: "path"
        description: "Cache name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/cache"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Cache"
      summary: "Replace a cache"
      description: "Replaces a cache configuration by it's name."
      operationId: "replaceCache"
      parameters:
      - name: "name"
        in: "path"
        description: "Cache name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/cache"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Cache replaced"
          schema:
            $ref: "#/definitions/cache"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/cache"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Cache"
      summary: "Delete a cache"
      description: "Deletes a cache from the configuration by it's name."
      operationId: "deleteCache"
      parameters:
      - name: "name"
        in: "path"
        description: "Cache name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Cache deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/resolvers:
    get:
      tags:
      - "Resolver"
      summary: "Return an array of resolvers"
      description: "Returns an array of all configured resolvers."
      operationId: "getResolvers"
      parameters:
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/resolvers"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Resolver"
      summary: "Add a resolver"
      description: "Adds a new resolver section to the configuration file."
      operationId: "createResolver"
      parameters:
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/resolver"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Resolver created"
          schema:
            $ref: "#/definitions/resolver"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/resolver"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/resolvers/{name}:
    get:
      tags:
      - "Resolver"
      summary: "Return a resolver"
      description: "Returns one resolver section configuration by it's name."
      operationId: "getResolver"
      parameters:
      - name: "name"
        in: "path"
        description: "Resolver name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/resolver"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Resolver"
      summary: "Replace a resolver"
      description: "Replaces a resolver configuration by it's name."
      operationId: "replaceResolver"
      parameters:
      - name: "name"
        in: "path"
        description: "Resolver name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/resolver"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Resolver replaced"
          schema:
            $ref: "#/definitions/resolver"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/resolver"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Resolver"
      summary: "Delete a resolver"
      description: "Deletes a resolver from the configuration by it's name."
      operationId: "deleteResolver"
      parameters:
      - name: "name"
        in: "path"
        description: "Resolver name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Resolver deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/nameservers:
    get:
      tags:
      - "Nameserver"
      summary: "Return an array of nameservers"
      description: "Returns an array of all configured nameservers."
      operationId: "getNameservers"
      parameters:
      - name: "resolver"
        in: "query"
        description: "Parent resolver name"
        required: true
        type: "string"
        x-exportParamName: "Resolver"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/nameservers"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Nameserver"
      summary: "Add a nameserver"
      description: "Adds a new nameserver to the resolvers section."
      operationId: "createNameserver"
      parameters:
      - name: "resolver"
        in: "query"
        description: "Parent resolver name"
        required: true
        type: "string"
        x-exportParamName: "Resolver"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/nameserver"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Nameserver created"
          schema:
            $ref: "#/definitions/nameserver"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/nameserver"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/nameservers/{name}:
    get:
      tags:
      - "Nameserver"
      summary: "Return a nameserver"
      description: "Returns one nameserver configuration by it's name."
      operationId: "getNameserver"
      parameters:
      - name: "name"
        in: "path"
        description: "Nameserver name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "resolver"
        in: "query"
        description: "Parent resolver name"
        required: true
        type: "string"
        x-exportParamName: "Resolver"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/nameserver"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Nameserver"
      summary: "Replace a nameserver"
      description: "Replaces a nameserver configuration by it's name."
      operationId: "replaceNameserver"
      parameters:
      - name: "name"
        in: "path"
        description: "Nameserver name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "resolver"
        in: "query"
        description: "Parent resolver name"
        required: true
        type: "string"
        x-exportParamName: "Resolver"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/nameserver"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Nameserver replaced"
          schema:
            $ref: "#/definitions/nameserver"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/nameserver"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Nameserver"
      summary: "Delete a nameserver"
      description: "Deletes a nameserver from the resolvers section by it's name."
      operationId: "deleteNameserver"
      parameters:
      - name: "name"
        in: "path"
        description: "Nameserver name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "resolver"
        in: "query"
        description: "Parent resolver name"
        required: true
        type: "string"
        x-exportParamName: "Resolver"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Nameserver deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/raw:
    get:
      tags:
      - "Configuration"
      summary: "Return HAProxy configuration"
      description: "Returns HAProxy configuration file in plain text"
      operationId: "getHAProxyConfiguration"
      produces:
      - "application/json"
      parameters:
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Operation successful"
          headers:
            Cluster-Version:
              type: "string"
              description: "Cluster configuration version"
            Configuration-Checksum:
              type: "string"
              description: "Configuration file md5 checksum"
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/inline_response_200"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Configuration"
      summary: "Push new haproxy configuration"
      description: "Push a new haproxy configuration file in plain text"
      operationId: "postHAProxyConfiguration"
      consumes:
      - "text/plain"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "data"
        required: true
        schema:
          type: "string"
        x-exportParamName: "Data"
      - name: "skip_version"
        in: "query"
        description: "If set, no version check will be done and the pushed config\
          \ will be enforced"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "SkipVersion"
        x-optionalDataType: "Bool"
      - name: "skip_reload"
        in: "query"
        description: "If set, no reload will be initiated and runtime actions from\
          \ X-Runtime-Actions will be applied"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "SkipReload"
        x-optionalDataType: "Bool"
      - name: "only_validate"
        in: "query"
        description: "If set, only validates configuration, without applying it"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "OnlyValidate"
        x-optionalDataType: "Bool"
      - name: "X-Runtime-Actions"
        in: "header"
        description: "List of Runtime API commands with parameters separated by ';'"
        required: false
        type: "string"
        x-exportParamName: "XRuntimeActions"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "New HAProxy configuration pushed"
          headers:
            Cluster-Version:
              type: "string"
              description: "Cluster configuration version"
            Configuration-Checksum:
              type: "string"
              description: "Configuration file md5 checksum"
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            type: "string"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Cluster-Version:
              type: "string"
              description: "Cluster configuration version"
            Configuration-Checksum:
              type: "string"
              description: "Configuration file md5 checksum"
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            type: "string"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/runtime:
    get:
      tags:
      - "Discovery"
      summary: "Return list of HAProxy advanced runtime endpoints"
      description: "Returns a list of endpoints to be used for advanced runtime settings\
        \ of HAProxy objects."
      operationId: "getRuntimeEndpoints"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/endpoints"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/runtime/acls:
    get:
      tags:
      - "ACL Runtime"
      summary: "Return an array of all ACL files"
      description: "Returns all ACL files using the runtime socket."
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/acl_files"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/runtime/acls/{id}:
    get:
      tags:
      - "ACL Runtime"
      summary: "Return an ACL file"
      description: "Returns an ACL file by id using the runtime socket."
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ACL file entry ID"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/acl_file"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/runtime/acl_file_entries:
    get:
      tags:
      - "ACL Runtime"
      summary: "Return an ACL entries"
      description: "Returns an ACL runtime setting using the runtime socket."
      produces:
      - "application/json"
      parameters:
      - name: "acl_id"
        in: "query"
        description: "ACL ID"
        required: true
        type: "string"
        x-exportParamName: "AclId"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/acl_files_entries"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "ACL Runtime"
      summary: "Add entry to an ACL file"
      description: "Adds an entry into the ACL file using the runtime socket."
      produces:
      - "application/json"
      parameters:
      - name: "acl_id"
        in: "query"
        description: "ACL ID"
        required: true
        type: "string"
        x-exportParamName: "AclId"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/acl_file_entry"
        x-exportParamName: "Data"
      responses:
        "201":
          description: "ACL entry created"
          schema:
            $ref: "#/definitions/acl_file_entry"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "ACL Runtime"
      summary: "Add a new ACL payload"
      description: "Adds a new ACL payload."
      operationId: "addPayloadRuntimeACL"
      parameters:
      - name: "acl_id"
        in: "query"
        description: "ACL ID"
        required: true
        type: "string"
        x-exportParamName: "AclId"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/acl_files_entries"
        x-exportParamName: "Data"
      responses:
        "201":
          description: "ACL payload added"
          schema:
            $ref: "#/definitions/acl_files_entries"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/runtime/acl_file_entries/{id}:
    get:
      tags:
      - "ACL Runtime"
      summary: "Return an ACL entry"
      description: "Returns the ACL entry by its ID using the runtime socket."
      produces:
      - "application/json"
      parameters:
      - name: "acl_id"
        in: "query"
        description: "ACL ID"
        required: true
        type: "string"
        x-exportParamName: "AclId"
      - name: "id"
        in: "path"
        description: "File entry ID"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/acl_file_entry"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "ACL Runtime"
      summary: "Delete an ACL entry"
      description: "Deletes the entry from the ACL by its value using the runtime\
        \ socket."
      produces:
      - "application/json"
      parameters:
      - name: "acl_id"
        in: "query"
        description: "ACL ID"
        required: true
        type: "string"
        x-exportParamName: "AclId"
      - name: "id"
        in: "path"
        description: "File entry ID"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "204":
          description: "Successful operation"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/runtime/info:
    get:
      tags:
      - "Information"
      summary: "Return HAProxy process information"
      description: "Return HAProxy process information"
      operationId: "getHaproxyProcessInfo"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/process_infos"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/runtime/servers:
    get:
      tags:
      - "Server"
      summary: "Return an array of runtime servers' settings"
      description: "Returns an array of all servers' runtime settings."
      operationId: "getRuntimeServers"
      parameters:
      - name: "backend"
        in: "query"
        description: "Parent backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/runtime_servers"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Server"
      summary: "Adds a new server to a backend"
      description: "Adds a new server to the specified backend"
      operationId: "addRuntimeServer"
      parameters:
      - name: "backend"
        in: "query"
        description: "Parent backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/runtime_add_server"
        x-exportParamName: "Data"
      responses:
        "201":
          description: "Server added"
          schema:
            $ref: "#/definitions/runtime_add_server"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/runtime/servers/{name}:
    get:
      tags:
      - "Server"
      summary: "Return one server runtime settings"
      description: "Returns one server runtime settings by it's name in the specified\
        \ backend."
      operationId: "getRuntimeServer"
      parameters:
      - name: "name"
        in: "path"
        description: "Server name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "backend"
        in: "query"
        description: "Parent backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/runtime_server"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Server"
      summary: "Replace server transient settings"
      description: "Replaces a server transient settings by it's name in the specified\
        \ backend."
      operationId: "replaceRuntimeServer"
      parameters:
      - name: "name"
        in: "path"
        description: "Server name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "backend"
        in: "query"
        description: "Parent backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/runtime_server"
        x-exportParamName: "Data"
      responses:
        "200":
          description: "Server transient settings replaced"
          schema:
            $ref: "#/definitions/runtime_server"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Server"
      summary: "Deletes a server from a backend"
      description: "Deletes a server from the specified backend"
      operationId: "deleteRuntimeServer"
      parameters:
      - name: "name"
        in: "path"
        description: "Server name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "backend"
        in: "query"
        description: "Parent backend name"
        required: true
        type: "string"
        x-exportParamName: "Backend"
      responses:
        "204":
          description: "Server deleted"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/runtime/stick_tables:
    get:
      tags:
      - "StickTable"
      summary: "Return Stick Tables"
      description: "Returns an array of all stick tables."
      operationId: "getStickTables"
      parameters:
      - name: "process"
        in: "query"
        description: "Process number if master-worker mode, if not all processes are\
          \ returned"
        required: false
        type: "integer"
        x-exportParamName: "Process"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/stick_tables"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/runtime/stick_tables/{name}:
    get:
      tags:
      - "StickTable"
      summary: "Return Stick Table"
      description: "Returns one stick table from runtime."
      operationId: "getStickTable"
      parameters:
      - name: "name"
        in: "path"
        description: "Stick table name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "process"
        in: "query"
        description: "Process number if master-worker mode, if not only first process\
          \ is returned"
        required: true
        type: "integer"
        x-exportParamName: "Process"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/stick_table"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/runtime/stick_table_entries:
    get:
      tags:
      - "StickTable"
      summary: "Return Stick Table Entries"
      description: "Returns an array of all entries in a given stick tables."
      operationId: "getStickTableEntries"
      parameters:
      - name: "stick_table"
        in: "query"
        description: "Stick table name"
        required: true
        type: "string"
        x-exportParamName: "StickTable"
      - name: "process"
        in: "query"
        description: "Process number if master-worker mode, if not only first process\
          \ is returned"
        required: true
        type: "integer"
        x-exportParamName: "Process"
      - name: "filter"
        in: "query"
        description: "A list of filters in format data.<type> <operator> <value> separated\
          \ by comma"
        required: false
        type: "string"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "key"
        in: "query"
        description: "Key which we want the entries for"
        required: false
        type: "string"
        x-exportParamName: "Key"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Max number of entries to be returned for pagination"
        required: false
        type: "integer"
        x-exportParamName: "Count"
        x-optionalDataType: "Int32"
      - name: "offset"
        in: "query"
        description: "Offset which indicates how many items we skip in pagination"
        required: false
        type: "integer"
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/stick_table_entries"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "StickTable"
      summary: "Set Entry to Stick Table"
      description: "Create or update a stick-table entry in the table."
      operationId: "setStickTableEntries"
      parameters:
      - name: "stick_table"
        in: "query"
        description: "Stick table name"
        required: true
        type: "string"
        x-exportParamName: "StickTable"
      - name: "process"
        in: "query"
        description: "Process number if master-worker mode, if not only first process\
          \ is returned"
        required: true
        type: "integer"
        x-exportParamName: "Process"
      - in: "body"
        name: "stick_table_entry"
        description: "Stick table entry"
        required: false
        schema:
          $ref: "#/definitions/stick_table_entry_1"
        x-exportParamName: "StickTableEntry"
      responses:
        "204":
          description: "Successful operation"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/runtime/maps:
    get:
      tags:
      - "Maps"
      summary: "Return runtime map files"
      description: "Returns runtime map files."
      operationId: "getAllRuntimeMapFiles"
      parameters:
      - name: "include_unmanaged"
        in: "query"
        description: "If true, also show unmanaged map files loaded in haproxy"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "IncludeUnmanaged"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/maps"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/runtime/maps/{name}:
    get:
      tags:
      - "Maps"
      summary: "Return one runtime map file"
      description: "Returns one runtime map file."
      operationId: "getOneRuntimeMap"
      parameters:
      - name: "name"
        in: "path"
        description: "Map file name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/map"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Maps"
      summary: "Add a new map payload"
      description: "Adds a new map payload."
      operationId: "addPayloadRuntimeMap"
      parameters:
      - name: "name"
        in: "path"
        description: "Map file name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "force_sync"
        in: "query"
        description: "If true, immediately syncs changes to disk"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceSync"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/map_entries"
        x-exportParamName: "Data"
      responses:
        "201":
          description: "Map payload added"
          schema:
            $ref: "#/definitions/map_entries"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Maps"
      summary: "Remove all map entries from the map file"
      description: "Remove all map entries from the map file."
      operationId: "clearRuntimeMap"
      parameters:
      - name: "name"
        in: "path"
        description: "Map file name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "forceDelete"
        in: "query"
        description: "If true, deletes file from disk"
        required: false
        type: "boolean"
        x-exportParamName: "ForceDelete"
        x-optionalDataType: "Bool"
      - name: "force_sync"
        in: "query"
        description: "If true, immediately syncs changes to disk"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceSync"
        x-optionalDataType: "Bool"
      responses:
        "204":
          description: "All map entries deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/runtime/maps_entries:
    get:
      tags:
      - "Maps"
      summary: "Return one map runtime entries"
      description: "Returns an array of all entries in a given runtime map file."
      operationId: "showRuntimeMap"
      parameters:
      - name: "map"
        in: "query"
        description: "Mapfile attribute storage_name"
        required: true
        type: "string"
        x-exportParamName: "Map_"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/map_entries"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Maps"
      summary: "Adds an entry into the map file"
      description: "Adds an entry into the map file."
      operationId: "addMapEntry"
      parameters:
      - name: "map"
        in: "query"
        description: "Mapfile attribute storage_name"
        required: true
        type: "string"
        x-exportParamName: "Map_"
      - name: "force_sync"
        in: "query"
        description: "If true, immediately syncs changes to disk"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceSync"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/map_entry"
        x-exportParamName: "Data"
      responses:
        "201":
          description: "Map entry created"
          schema:
            $ref: "#/definitions/map_entry"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/runtime/maps_entries/{id}:
    get:
      tags:
      - "Maps"
      summary: "Return one map runtime setting"
      description: "Returns one map runtime setting by it's id."
      operationId: "getRuntimeMapEntry"
      parameters:
      - name: "id"
        in: "path"
        description: "Map id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "map"
        in: "query"
        description: "Mapfile attribute storage_name"
        required: true
        type: "string"
        x-exportParamName: "Map_"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/map_entry"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Maps"
      summary: "Replace the value corresponding to each id in a map"
      description: "Replaces the value corresponding to each id in a map."
      operationId: "replaceRuntimeMapEntry"
      parameters:
      - name: "id"
        in: "path"
        description: "Map id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "map"
        in: "query"
        description: "Mapfile attribute storage_name"
        required: true
        type: "string"
        x-exportParamName: "Map_"
      - name: "force_sync"
        in: "query"
        description: "If true, immediately syncs changes to disk"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceSync"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/data"
        x-exportParamName: "Data"
      responses:
        "200":
          description: "Map value replaced"
          schema:
            $ref: "#/definitions/map_entry"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Maps"
      summary: "Deletes all the map entries from the map by its id"
      description: "Delete all the map entries from the map by its id."
      operationId: "deleteRuntimeMapEntry"
      parameters:
      - name: "id"
        in: "path"
        description: "Map id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "map"
        in: "query"
        description: "Mapfile attribute storage_name"
        required: true
        type: "string"
        x-exportParamName: "Map_"
      - name: "force_sync"
        in: "query"
        description: "If true, immediately syncs changes to disk"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceSync"
        x-optionalDataType: "Bool"
      responses:
        "204":
          description: "Map key/value deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/version:
    get:
      tags:
      - "Configuration"
      summary: "Return a configuration version"
      description: "Returns configuration version."
      operationId: "getConfigurationVersion"
      parameters:
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Configuration version"
          schema:
            type: "integer"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/storage:
    get:
      tags:
      - "Discovery"
      summary: "Return list of HAProxy storage endpoints"
      description: "Returns a list of endpoints that use HAProxy storage for persistency,\
        \ e.g. maps, ssl certificates..."
      operationId: "getStorageEndpoints"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/endpoints"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/storage/maps:
    get:
      tags:
      - "Storage"
      summary: "Return a list of all managed map files"
      description: "Returns a list of all managed map files"
      operationId: "getAllStorageMapFiles"
      parameters: []
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/maps"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Storage"
      summary: "Creates a managed storage map file with its entries"
      description: "Creates a managed storage map file with its entries."
      operationId: "createStorageMapFile"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "file_upload"
        in: "formData"
        description: "The map file contents"
        required: false
        type: "file"
        x-mimetype: "text/plain"
        x-exportParamName: "FileUpload"
      responses:
        "201":
          description: "Map file created with its entries"
          schema:
            $ref: "#/definitions/map"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/storage/maps/{name}:
    get:
      tags:
      - "Storage"
      summary: "Return the contents of one managed map file from disk"
      description: "Returns the contents of one managed map file from disk"
      operationId: "getOneStorageMap"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "name"
        in: "path"
        description: "Map file storage_name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "file"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Storage"
      summary: "Replace contents of a managed map file on disk"
      description: "Replaces the contents of a managed map file on disk"
      operationId: "replaceStorageMapFile"
      consumes:
      - "text/plain"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Map file storage_name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "data"
        required: true
        schema:
          type: "string"
        x-exportParamName: "Data"
      - name: "skip_reload"
        in: "query"
        description: "If set, no reload will be initiated after update"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "SkipReload"
        x-optionalDataType: "Bool"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Map file replaced"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Storage"
      summary: "Deletes a managed map file from disk"
      description: "Deletes a managed map file from disk."
      operationId: "deleteStorageMap"
      parameters:
      - name: "name"
        in: "path"
        description: "Map file storage_name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "204":
          description: "Map file deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/storage/ssl_certificates:
    get:
      tags:
      - "Storage"
      summary: "Return all available SSL certificates on disk"
      description: "Returns all available SSL certificates on disk."
      operationId: "getAllStorageSSLCertificates"
      parameters: []
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/ssl_certificates"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Storage"
      summary: "Create SSL certificate"
      description: "Creates SSL certificate."
      operationId: "createStorageSSLCertificate"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "file_upload"
        in: "formData"
        description: "The SSL certificate to upload"
        required: false
        type: "file"
        x-mimetype: "text/plain"
        x-exportParamName: "FileUpload"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "SSL certificate created"
          schema:
            $ref: "#/definitions/ssl_certificate"
        "202":
          description: "SSL certificate created requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/ssl_certificate"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/storage/ssl_certificates/{name}:
    get:
      tags:
      - "Storage"
      summary: "Return one SSL certificate from disk"
      description: "Returns one SSL certificate from disk."
      operationId: "getOneStorageSSLCertificate"
      parameters:
      - name: "name"
        in: "path"
        description: "SSL certificate name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/ssl_certificate"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Storage"
      summary: "Replace SSL certificates on disk"
      description: "Replaces SSL certificate on disk."
      operationId: "replaceStorageSSLCertificate"
      consumes:
      - "text/plain"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "SSL certificate name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "data"
        required: true
        schema:
          type: "string"
        x-exportParamName: "Data"
      - name: "skip_reload"
        in: "query"
        description: "If set, no reload will be initiated after update"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "SkipReload"
        x-optionalDataType: "Bool"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "SSL certificate replaced"
          schema:
            $ref: "#/definitions/ssl_certificate"
        "202":
          description: "SSL certificate replaced and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/ssl_certificate"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Storage"
      summary: "Delete SSL certificate from disk"
      description: "Deletes SSL certificate from disk."
      operationId: "deleteStorageSSLCertificate"
      parameters:
      - name: "name"
        in: "path"
        description: "SSL certificate name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "skip_reload"
        in: "query"
        description: "If set, no reload will be initiated after update"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "SkipReload"
        x-optionalDataType: "Bool"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "SSL certificate deleted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "SSL certificate deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/storage/general:
    get:
      tags:
      - "Storage"
      summary: "Return a list of all managed general use files"
      description: "Returns a list of all managed general use files"
      operationId: "getAllStorageGeneralFiles"
      parameters: []
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/general_files"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Storage"
      summary: "Creates a managed storage general use file with contents"
      description: "Creates a managed storage general use file with contents."
      operationId: "createStorageGeneralFile"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "file_upload"
        in: "formData"
        description: "General use file content"
        required: false
        type: "file"
        x-mimetype: "text/plain"
        x-exportParamName: "FileUpload"
      responses:
        "201":
          description: "General use file created with its contents"
          schema:
            $ref: "#/definitions/general_file"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/storage/general/{name}:
    get:
      tags:
      - "Storage"
      summary: "Return the contents of one managed general use file from disk"
      description: "Returns the contents of one managed general use file from disk"
      operationId: "getOneStorageGeneralFile"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "name"
        in: "path"
        description: "General use file storage_name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "file"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Storage"
      summary: "Replace contents of a managed general use file on disk"
      description: "Replaces the contents of a managed general use file on disk"
      operationId: "replaceStorageGeneralFile"
      consumes:
      - "text/plain"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "General use file storage_name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "data"
        required: true
        schema:
          type: "string"
        x-exportParamName: "Data"
      - name: "skip_reload"
        in: "query"
        description: "If set, no reload will be initiated after update"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "SkipReload"
        x-optionalDataType: "Bool"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "General use file replaced"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Storage"
      summary: "Deletes a managed general use file from disk"
      description: "Deletes a managed general use file from disk."
      operationId: "deleteStorageGeneralFile"
      parameters:
      - name: "name"
        in: "path"
        description: "General use file storage_name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "204":
          description: "General use file deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/spoe:
    get:
      tags:
      - "Discovery"
      summary: "Return list of HAProxy SPOE endpoints"
      description: "Returns a list of endpoints to be used for SPOE settings of HAProxy."
      operationId: "getSpoeEndpoints"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/endpoints"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/spoe/spoe_files:
    get:
      tags:
      - "Spoe"
      summary: "Return all available SPOE files"
      description: "Returns all available SPOE files."
      operationId: "getAllSpoeFiles"
      parameters: []
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/spoe_files"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Spoe"
      summary: "Creates SPOE file with its entries"
      description: "Creates SPOE file with its entries."
      operationId: "createSpoe"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "file_upload"
        in: "formData"
        description: "The spoe file to upload"
        required: false
        type: "file"
        x-mimetype: "text/plain"
        x-exportParamName: "FileUpload"
      responses:
        "201":
          description: "SPOE file created with its entries"
          schema:
            type: "string"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/spoe/spoe_files/{name}:
    get:
      tags:
      - "Spoe"
      summary: "Return one SPOE file"
      description: "Returns one SPOE file."
      operationId: "getOneSpoeFile"
      parameters:
      - name: "name"
        in: "path"
        description: "SPOE file name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Spoe configuration file version"
          schema:
            $ref: "#/definitions/inline_response_200_1"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Spoe"
      summary: "Delete SPOE file"
      description: "Deletes SPOE file."
      operationId: "deleteSpoeFile"
      parameters:
      - name: "name"
        in: "path"
        description: "SPOE file name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "204":
          description: "SPOE file deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/spoe/spoe_scopes:
    get:
      tags:
      - "Spoe"
      summary: "Return an array of spoe scopes"
      description: "Returns an array of all configured spoe scopes."
      operationId: "getSpoeScopes"
      parameters:
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Spoe configuration file version"
          schema:
            $ref: "#/definitions/spoe_scopes"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Spoe"
      summary: "Add a new spoe scope"
      description: "Adds a new spoe scope."
      operationId: "createSpoeScope"
      parameters:
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/spoe_scope"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      responses:
        "201":
          description: "Spoe scope created"
          schema:
            $ref: "#/definitions/spoe_scope"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/spoe/spoe_scopes/{name}:
    get:
      tags:
      - "Spoe"
      summary: "Return one SPOE scope"
      description: "Returns one SPOE scope in one SPOE file."
      operationId: "getSpoeScope"
      parameters:
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      - name: "name"
        in: "path"
        description: "Spoe scope"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Spoe configuration file version"
          schema:
            $ref: "#/definitions/spoe_scope"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Spoe"
      summary: "Delete a SPOE scope"
      description: "Deletes a SPOE scope from the configuration file."
      operationId: "deleteSpoeScope"
      parameters:
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      - name: "name"
        in: "path"
        description: "Spoe scope name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      responses:
        "204":
          description: "Spoe scope deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/spoe/spoe_agents:
    get:
      tags:
      - "Spoe"
      summary: "Return an array of spoe agents in one scope"
      description: "Returns an array of all configured spoe agents in one scope."
      operationId: "getSpoeAgents"
      parameters:
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      - name: "scope"
        in: "query"
        description: "Spoe scope"
        required: true
        type: "string"
        x-exportParamName: "Scope"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Spoe configuration file version"
          schema:
            $ref: "#/definitions/spoe_agents"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Spoe"
      summary: "Add a new spoe agent to scope"
      description: "Adds a new spoe agent to the spoe scope."
      operationId: "createSpoeAgent"
      parameters:
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      - name: "scope"
        in: "query"
        description: "Spoe scope"
        required: true
        type: "string"
        x-exportParamName: "Scope"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/spoe_agent"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      responses:
        "201":
          description: "Spoe agent created"
          schema:
            $ref: "#/definitions/spoe_agent"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/spoe/spoe_agents/{name}:
    get:
      tags:
      - "Spoe"
      summary: "Return a spoe agent"
      description: "Returns one spoe agent configuration in one SPOE scope."
      operationId: "getSpoeAgent"
      parameters:
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      - name: "scope"
        in: "query"
        description: "Spoe scope"
        required: true
        type: "string"
        x-exportParamName: "Scope"
      - name: "name"
        in: "path"
        description: "Spoe agent name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Spoe configuration file version"
          schema:
            $ref: "#/definitions/spoe_agent"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Spoe"
      summary: "Replace a SPOE agent"
      description: "Replaces a SPOE agent configuration in one SPOE scope."
      operationId: "replaceSpoeAgent"
      parameters:
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      - name: "scope"
        in: "query"
        description: "Spoe scope"
        required: true
        type: "string"
        x-exportParamName: "Scope"
      - name: "name"
        in: "path"
        description: "Spoe agent name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/spoe_agent"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Spoe agent replaced"
          schema:
            $ref: "#/definitions/spoe_agent"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Spoe"
      summary: "Delete a SPOE agent"
      description: "Deletes a SPOE agent from the configuration in one SPOE scope."
      operationId: "deleteSpoeAgent"
      parameters:
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      - name: "scope"
        in: "query"
        description: "Spoe scope"
        required: true
        type: "string"
        x-exportParamName: "Scope"
      - name: "name"
        in: "path"
        description: "Spoe agent name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      responses:
        "204":
          description: "Spoe agent deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/spoe/spoe_messages:
    get:
      tags:
      - "Spoe"
      summary: "Return an array of spoe messages in one scope"
      description: "Returns an array of all configured spoe messages in one scope."
      operationId: "getSpoeMessages"
      parameters:
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      - name: "scope"
        in: "query"
        description: "Spoe scope"
        required: true
        type: "string"
        x-exportParamName: "Scope"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Spoe configuration file version"
          schema:
            $ref: "#/definitions/spoe_messages"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Spoe"
      summary: "Add a new spoe message to scope"
      description: "Adds a new spoe message to the spoe scope."
      operationId: "createSpoeMessage"
      parameters:
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      - name: "scope"
        in: "query"
        description: "Spoe scope"
        required: true
        type: "string"
        x-exportParamName: "Scope"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/spoe_message"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      responses:
        "201":
          description: "Spoe message created"
          schema:
            $ref: "#/definitions/spoe_message"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/spoe/spoe_messages/{name}:
    get:
      tags:
      - "Spoe"
      summary: "Return a spoe message"
      description: "Returns one spoe message configuration in SPOE scope."
      operationId: "getSpoeMessage"
      parameters:
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      - name: "scope"
        in: "query"
        description: "Spoe scope"
        required: true
        type: "string"
        x-exportParamName: "Scope"
      - name: "name"
        in: "path"
        description: "Spoe message name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Spoe configuration file version"
          schema:
            $ref: "#/definitions/spoe_message"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Spoe"
      summary: "Replace a spoe message"
      description: "Replaces a spoe message configuration in one SPOE scope."
      operationId: "replaceSpoeMessage"
      parameters:
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      - name: "scope"
        in: "query"
        description: "Spoe scope"
        required: true
        type: "string"
        x-exportParamName: "Scope"
      - name: "name"
        in: "path"
        description: "Spoe message name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/spoe_message"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Spoe message replaced"
          schema:
            $ref: "#/definitions/spoe_message"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Spoe"
      summary: "Delete a spoe message"
      description: "Deletes a spoe message from the SPOE scope."
      operationId: "deleteSpoeMessage"
      parameters:
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      - name: "scope"
        in: "query"
        description: "Spoe scope"
        required: true
        type: "string"
        x-exportParamName: "Scope"
      - name: "name"
        in: "path"
        description: "Spoe message name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      responses:
        "204":
          description: "Spoe message deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/spoe/spoe_groups:
    get:
      tags:
      - "Spoe"
      summary: "Return an array of SPOE groups"
      description: "Returns an array of all configured SPOE groups in one SPOE scope."
      operationId: "getSpoeGroups"
      parameters:
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      - name: "scope"
        in: "query"
        description: "Spoe scope"
        required: true
        type: "string"
        x-exportParamName: "Scope"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Spoe configuration file version"
          schema:
            $ref: "#/definitions/spoe_groups"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "Spoe"
      summary: "Add a new SPOE groups"
      description: "Adds a new SPOE groups to the SPOE scope."
      operationId: "createSpoeGroup"
      parameters:
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      - name: "scope"
        in: "query"
        description: "Spoe scope"
        required: true
        type: "string"
        x-exportParamName: "Scope"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/spoe_group"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      responses:
        "201":
          description: "Spoe groups created"
          schema:
            $ref: "#/definitions/spoe_group"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/spoe/spoe_groups/{name}:
    get:
      tags:
      - "Spoe"
      summary: "Return a SPOE groups"
      description: "Returns one SPOE groups configuration in one SPOE scope."
      operationId: "getSpoeGroup"
      parameters:
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      - name: "scope"
        in: "query"
        description: "Spoe scope"
        required: true
        type: "string"
        x-exportParamName: "Scope"
      - name: "name"
        in: "path"
        description: "Spoe group name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Spoe configuration file version"
          schema:
            $ref: "#/definitions/spoe_group"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "Spoe"
      summary: "Replace a SPOE groups"
      description: "Replaces a SPOE groups configuration in one SPOE scope."
      operationId: "replaceSpoeGroup"
      parameters:
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      - name: "scope"
        in: "query"
        description: "Spoe scope"
        required: true
        type: "string"
        x-exportParamName: "Scope"
      - name: "name"
        in: "path"
        description: "Spoe group name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/spoe_group"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Spoe groups replaced"
          schema:
            $ref: "#/definitions/spoe_group"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "Spoe"
      summary: "Delete a SPOE groups"
      description: "Deletes a SPOE groups from the one SPOE scope."
      operationId: "deleteSpoeGroup"
      parameters:
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      - name: "scope"
        in: "query"
        description: "Spoe scope"
        required: true
        type: "string"
        x-exportParamName: "Scope"
      - name: "name"
        in: "path"
        description: "Spoe group name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      responses:
        "204":
          description: "Spoe group deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/spoe/version:
    get:
      tags:
      - "Spoe"
      summary: "Return a SPOE configuration version"
      description: "Returns SPOE configuration version."
      operationId: "getSpoeConfigurationVersion"
      parameters:
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "spoe"
        in: "query"
        description: "Spoe file name"
        required: true
        type: "string"
        x-exportParamName: "Spoe"
      responses:
        "200":
          description: "SPOE configuration version"
          schema:
            type: "integer"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/captures:
    get:
      tags:
      - "DeclareCapture"
      summary: "Return an array of declare captures"
      description: "Returns an array of all declare capture records that are configured\
        \ in specified frontend."
      operationId: "getDeclareCaptures"
      parameters:
      - name: "frontend"
        in: "query"
        description: "Parent frontend name"
        required: true
        type: "string"
        x-exportParamName: "Frontend"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/captures"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "DeclareCapture"
      summary: "Add a new declare capture"
      description: "Adds a new declare capture in the specified frontend in the configuration\
        \ file."
      operationId: "createDeclareCapture"
      parameters:
      - name: "frontend"
        in: "query"
        description: "Parent frontend name"
        required: true
        type: "string"
        x-exportParamName: "Frontend"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/capture"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Declare capture created"
          schema:
            $ref: "#/definitions/capture"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/capture"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "409":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
  /services/haproxy/configuration/captures/{index}:
    get:
      tags:
      - "DeclareCapture"
      summary: "Return one declare capture"
      description: "Returns one declare capture configuration by it's index in the\
        \ specified frontend."
      operationId: "getDeclareCapture"
      parameters:
      - name: "index"
        in: "path"
        description: "Declare Capture Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "frontend"
        in: "query"
        description: "Parent frontend name"
        required: true
        type: "string"
        x-exportParamName: "Frontend"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Successful operation"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/capture"
        "404":
          description: "The specified resource already exists"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "DeclareCapture"
      summary: "Replace a declare capture"
      description: "Replaces a declare capture configuration by it's index in the\
        \ specified frontend."
      operationId: "replaceDeclareCapture"
      parameters:
      - name: "index"
        in: "path"
        description: "Declare Capture Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "frontend"
        in: "query"
        description: "Parent frontend name"
        required: true
        type: "string"
        x-exportParamName: "Frontend"
      - in: "body"
        name: "data"
        required: true
        schema:
          $ref: "#/definitions/capture"
        x-exportParamName: "Data"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Declare Capture replaced"
          schema:
            $ref: "#/definitions/capture"
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
          schema:
            $ref: "#/definitions/capture"
        "400":
          description: "Bad request"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "DeclareCapture"
      summary: "Delete a declare capture"
      description: "Deletes a declare capture configuration by it's index in the specified\
        \ frontend."
      operationId: "deleteDeclareCapture"
      parameters:
      - name: "index"
        in: "path"
        description: "Declare Capture Index"
        required: true
        type: "integer"
        x-exportParamName: "Index"
      - name: "frontend"
        in: "query"
        description: "Parent frontend name"
        required: true
        type: "string"
        x-exportParamName: "Frontend"
      - name: "transaction_id"
        in: "query"
        description: "ID of the transaction where we want to add the operation. Cannot\
          \ be used when version is specified."
        required: false
        type: "string"
        x-nullable: false
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version used for checking configuration version. Cannot be used\
          \ when transaction is specified, transaction has it's own version."
        required: false
        type: "integer"
        x-nullable: false
        x-exportParamName: "Version"
        x-optionalDataType: "Int32"
      - name: "force_reload"
        in: "query"
        description: "If set, do a force reload, do not wait for the configured reload-delay.\
          \ Cannot be used when transaction is specified, as changes in transaction\
          \ are not applied directly to configuration."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceReload"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Configuration change accepted and reload requested"
          headers:
            Reload-ID:
              type: "string"
              description: "ID of the requested reload"
        "204":
          description: "Declare Capture deleted"
        "404":
          description: "The specified resource was not found"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
        default:
          description: "General Error"
          headers:
            Configuration-Version:
              type: "string"
              description: "Configuration file version"
          schema:
            $ref: "#/definitions/error"
securityDefinitions:
  basic_auth:
    type: "basic"
definitions:
  program:
    type: "object"
    required:
    - "command"
    - "name"
    properties:
      command:
        type: "string"
        description: "The command to be run, with flags and options."
      group:
        type: "string"
        description: "The group to run the command as, if different than the HAProxy\
          \ group."
      name:
        type: "string"
        pattern: "^[A-Za-z0-9-_.:]+$"
        x-nullable: false
      start-on-reload:
        type: "string"
        description: "HAProxy stops and recreates child programs at reload."
        enum:
        - "enabled"
        - "disabled"
      user:
        type: "string"
        description: "The user to run the command as, if different than the HAProxy\
          \ user."
    title: "Program"
    description: "HAProxy program configuration"
    example:
      command: "spoa-mirror --runtime 0 --mirror-url http://test.local"
      group: "mygroupname"
      name: "mirror"
      start-on-reload: "enabled"
      user: "myusername"
  programs:
    type: "array"
    items:
      $ref: "#/definitions/program"
  fcgiApp:
    type: "object"
    required:
    - "docroot"
    - "name"
    properties:
      docroot:
        type: "string"
        description: "Defines the document root on the remote host. The parameter\
          \ serves to build the default value of FastCGI parameters SCRIPT_FILENAME\
          \ and PATH_TRANSLATED. It is a mandatory setting."
      get_values:
        type: "string"
        description: "Enables or disables the retrieval of variables related to connection\
          \ management."
        enum:
        - "enabled"
        - "disabled"
      index:
        type: "string"
        description: "Defines the script name to append after a URI that ends with\
          \ a slash (\"/\") to set the default value for the FastCGI parameter SCRIPT_NAME.\
          \ It is an optional setting."
      keep_conn:
        type: "string"
        description: "Tells the FastCGI application whether or not to keep the connection\
          \ open after it sends a response. If disabled, the FastCGI application closes\
          \ the connection after responding to this request."
        enum:
        - "enabled"
        - "disabled"
      log_stderrs:
        type: "array"
        items:
          $ref: "#/definitions/fcgiLogStderr"
        x-omitempty: true
      max_reqs:
        type: "integer"
        description: "Defines the maximum number of concurrent requests this application\
          \ can accept. If the FastCGI application retrieves the variable FCGI_MAX_REQS\
          \ during connection establishment, it can override this option. Furthermore,\
          \ if the application does not do multiplexing, it will ignore this option."
        minimum: 1
      mpxs_conns:
        type: "string"
        description: "Enables or disables the support of connection multiplexing.\
          \ If the FastCGI application retrieves the variable FCGI_MPXS_CONNS during\
          \ connection establishment, it can override this option."
        enum:
        - "enabled"
        - "disabled"
      name:
        type: "string"
        description: "Declares a FastCGI application"
        pattern: "^[^\\s]+$"
        x-nullable: false
      pass_headers:
        type: "array"
        items:
          $ref: "#/definitions/fcgiPassHeader"
        x-omitempty: true
      path_info:
        type: "string"
        description: "Defines a regular expression to extract the script-name and\
          \ the path-info from the URI.\nThus, <regex> must have two captures: the\
          \ first to capture the script name, and the second to capture the path-\
          \ info.\nIf not defined, it does not perform matching on the URI, and does\
          \ not fill the FastCGI parameters PATH_INFO and PATH_TRANSLATED."
      set_params:
        type: "array"
        items:
          $ref: "#/definitions/fcgiSetParam"
        x-omitempty: true
    title: "FCGI application"
    description: "HAProxy FastCGI application configuration"
    example:
      get_values: "enabled"
      path_info: "path_info"
      max_reqs: 1
      set_params:
      - cond_test: "cond_test"
        format: "format"
        name: "name"
        cond: "if"
      - cond_test: "cond_test"
        format: "format"
        name: "name"
        cond: "if"
      mpxs_conns: "enabled"
      keep_conn: "enabled"
      name: "name"
      index: "index"
      pass_headers:
      - cond_test: "cond_test"
        name: "name"
        cond: "if"
      - cond_test: "cond_test"
        name: "name"
        cond: "if"
      docroot: "docroot"
      log_stderrs:
      - address: "address"
        len: 0
        level: "level"
        minlevel: "minlevel"
        format: "format"
        global: true
        facility: "facility"
        sample:
          ranges: "ranges"
          size: 6
      - address: "address"
        len: 0
        level: "level"
        minlevel: "minlevel"
        format: "format"
        global: true
        facility: "facility"
        sample:
          ranges: "ranges"
          size: 6
  fcgiApps:
    type: "array"
    items:
      $ref: "#/definitions/fcgiApp"
  fcgiSetParam:
    type: "object"
    properties:
      cond:
        type: "string"
        enum:
        - "if"
        - "unless"
        x-display-name: "Condition"
      cond_test:
        type: "string"
        x-dependency:
          cond:
            required: true
        x-display-name: "Condition Test"
      format:
        type: "string"
      name:
        type: "string"
    description: "Sets a FastCGI parameter to pass to this application.\nIts value,\
      \ defined by <format> can take a formatted string, the same as the log directive.\n\
      Optionally, you can follow it with an ACL-based condition, in which case the\
      \ FastCGI application evaluates it only if the condition is true."
    example:
      cond_test: "cond_test"
      format: "format"
      name: "name"
      cond: "if"
  fcgiPassHeader:
    type: "object"
    properties:
      cond:
        type: "string"
        enum:
        - "if"
        - "unless"
        x-display-name: "Condition"
      cond_test:
        type: "string"
        x-dependency:
          cond:
            required: true
        x-display-name: "Condition Test"
      name:
        type: "string"
    description: "Specifies the name of a request header to pass to the FastCGI application.\n\
      Optionally, you can follow it with an ACL-based condition, in which case the\
      \ FastCGI application evaluates it only if the condition is true.\nMost request\
      \ headers are already available to the FastCGI application with the prefix \"\
      HTTP\".\nThus, you only need this directive to pass headers that are purposefully\
      \ omitted.\nCurrently, the headers \"Authorization\", \"Proxy-Authorization\"\
      , and hop-by-hop headers are omitted.\nNote that the headers \"Content-type\"\
      \ and \"Content-length\" never pass to the FastCGI application because they\
      \ are already converted into parameters."
    example:
      cond_test: "cond_test"
      name: "name"
      cond: "if"
  fcgiLogStderr:
    type: "object"
    properties:
      address:
        type: "string"
      facility:
        type: "string"
        title: "Facility"
      format:
        type: "string"
        title: "Format"
      global:
        type: "boolean"
        title: "Global"
      len:
        type: "integer"
        title: "Length"
      level:
        type: "string"
        title: "Level"
        x-dependency:
          facility:
            required: true
      minlevel:
        type: "string"
        title: "Minimum level"
        x-dependency:
          facility:
            required: true
      sample:
        $ref: "#/definitions/Sample"
    description: "Enables logging of STDERR messages that the FastCGI application\
      \ reports.\nIt is an optional setting. By default, HAProxy Enterprise ignores\
      \ STDERR messages."
    example:
      address: "address"
      len: 0
      level: "level"
      minlevel: "minlevel"
      format: "format"
      global: true
      facility: "facility"
      sample:
        ranges: "ranges"
        size: 6
  bind_params:
    type: "object"
    properties:
      accept_netscaler_cip:
        type: "integer"
      accept_proxy:
        type: "boolean"
      allow_0rtt:
        type: "boolean"
      alpn:
        type: "string"
        pattern: "^[^\\s]+$"
        x-display-name: "ALPN Protocols"
      backlog:
        type: "string"
      ca_ignore_err:
        type: "string"
        x-dependency:
          ssl:
            value: true
      ca_sign_file:
        type: "string"
        x-dependency:
          ssl:
            value: true
      ca_sign_pass:
        type: "string"
        x-dependency:
          ssl:
            value: true
        x-display-name: "Passphrase"
      ca_verify_file:
        type: "string"
        x-dependency:
          ca_file:
            value: true
      ciphers:
        type: "string"
        x-dependency:
          ssl:
            value: true
      ciphersuites:
        type: "string"
        x-dependency:
          ssl:
            value: true
      client_sigalgs:
        type: "string"
        x-dependency:
          ssl:
            value: true
      crl_file:
        type: "string"
        x-dependency:
          ssl:
            value: true
      crt_ignore_err:
        type: "string"
        x-dependency:
          ssl:
            value: true
      crt_list:
        type: "string"
        x-dependency:
          ssl:
            value: true
      curves:
        type: "string"
        x-dependency:
          ssl:
            value: true
      defer_accept:
        type: "boolean"
      ecdhe:
        type: "string"
        x-dependency:
          ssl:
            value: true
      expose_fd_listeners:
        type: "boolean"
      force_sslv3:
        type: "boolean"
      force_tlsv10:
        type: "boolean"
      force_tlsv11:
        type: "boolean"
      force_tlsv12:
        type: "boolean"
      force_tlsv13:
        type: "boolean"
      generate_certificates:
        type: "boolean"
        x-dependency:
          ssl:
            value: true
      gid:
        type: "integer"
        x-display-name: "Group ID"
      group:
        type: "string"
        x-display-name: "Group name"
      id:
        type: "string"
        x-display-name: "Socket ID"
      interface:
        type: "string"
      level:
        type: "string"
        example: "user"
        enum:
        - "user"
        - "operator"
        - "admin"
      maxconn:
        type: "integer"
        example: 1234
      mode:
        type: "string"
      mss:
        type: "string"
      name:
        type: "string"
        pattern: "^[^\\s]+$"
        x-nullable: false
      namespace:
        type: "string"
        example: "app"
      nbconn:
        type: "integer"
        x-display-name: "Number of connection"
      nice:
        type: "integer"
        example: 1
      no_alpn:
        type: "boolean"
        x-dependency:
          ssl:
            value: true
      no_ca_names:
        type: "boolean"
        x-dependency:
          ssl:
            value: true
      no_sslv3:
        type: "boolean"
        x-dependency:
          ssl:
            value: true
      no_tls_tickets:
        type: "boolean"
        x-dependency:
          ssl:
            value: true
      no_tlsv10:
        type: "boolean"
        x-dependency:
          ssl:
            value: true
      no_tlsv11:
        type: "boolean"
        x-dependency:
          ssl:
            value: true
      no_tlsv12:
        type: "boolean"
        x-dependency:
          ssl:
            value: true
      no_tlsv13:
        type: "boolean"
        x-dependency:
          ssl:
            value: true
      npn:
        type: "string"
      prefer_client_ciphers:
        type: "boolean"
      process:
        type: "string"
        pattern: "^[^\\s]+$"
      proto:
        type: "string"
        x-display-name: "Protocol name"
      quic-cc-algo:
        type: "string"
        enum:
        - "cubic"
        - "newreno"
      quic-force-retry:
        type: "boolean"
      quic-socket:
        type: "string"
        enum:
        - "connection"
        - "listener"
      severity_output:
        type: "string"
        example: "none"
        enum:
        - "none"
        - "number"
        - "string"
        x-display-name: "Format"
      sigalgs:
        type: "string"
        x-dependency:
          ssl:
            value: true
      ssl:
        type: "boolean"
      ssl_cafile:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          ssl:
            value: true
        x-display-name: "SSL CA File"
      ssl_certificate:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          ssl:
            value: true
      ssl_max_ver:
        type: "string"
        enum:
        - "SSLv3"
        - "TLSv1.0"
        - "TLSv1.1"
        - "TLSv1.2"
        - "TLSv1.3"
      ssl_min_ver:
        type: "string"
        enum:
        - "SSLv3"
        - "TLSv1.0"
        - "TLSv1.1"
        - "TLSv1.2"
        - "TLSv1.3"
      strict_sni:
        type: "boolean"
        x-dependency:
          ssl:
            value: true
      tcp_user_timeout:
        type: "integer"
        x-nullable: true
      tfo:
        type: "boolean"
      thread:
        type: "string"
      tls_ticket_keys:
        type: "string"
      transparent:
        type: "boolean"
      uid:
        type: "string"
      user:
        type: "string"
      v4v6:
        type: "boolean"
      v6only:
        type: "boolean"
      verify:
        type: "string"
        example: "none"
        enum:
        - "none"
        - "optional"
        - "required"
        x-dependency:
          ssl:
            value: "enabled"
    additionalProperties: false
  server_params:
    type: "object"
    properties:
      agent-addr:
        type: "string"
        pattern: "^[^\\s]+$"
      agent-check:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-dependency:
          agent-port:
            required: true
      agent-inter:
        type: "integer"
        x-nullable: true
      agent-port:
        type: "integer"
        minimum: 1
        maximum: 65535
        x-nullable: true
      agent-send:
        type: "string"
      allow_0rtt:
        type: "boolean"
      alpn:
        type: "string"
        pattern: "^[^\\s]+$"
        x-display-name: "ALPN Protocols"
      backup:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      check:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      check-send-proxy:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      check-sni:
        type: "string"
        pattern: "^[^\\s]+$"
      check-ssl:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      check_alpn:
        type: "string"
        pattern: "^[^\\s]+$"
        x-display-name: "Protocols"
      check_proto:
        type: "string"
        pattern: "^[^\\s]+$"
        x-display-name: "Name"
      check_via_socks4:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      ciphers:
        type: "string"
        x-dependency:
          ssl:
            value: "enabled"
      ciphersuites:
        type: "string"
        x-dependency:
          ssl:
            value: "enabled"
      client_sigalgs:
        type: "string"
        x-dependency:
          ssl:
            value: true
      cookie:
        type: "string"
        pattern: "^[^\\s]+$"
      crl_file:
        type: "string"
        x-dependency:
          ssl:
            value: "enabled"
      curves:
        type: "string"
        x-dependency:
          ssl:
            value: true
      downinter:
        type: "integer"
        x-nullable: true
      error_limit:
        type: "integer"
        x-display-name: "Error count"
      fall:
        type: "integer"
        x-display-name: "Nr. of consecutive failed checks"
        x-nullable: true
      fastinter:
        type: "integer"
        x-nullable: true
      force_sslv3:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      force_tlsv10:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      force_tlsv11:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      force_tlsv12:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      force_tlsv13:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      health_check_address:
        type: "string"
        pattern: "^[^\\s]+$"
      health_check_port:
        type: "integer"
        minimum: 1
        maximum: 65535
        x-nullable: true
      init-addr:
        type: "string"
        pattern: "^[^\\s]+$"
        x-nullable: true
      inter:
        type: "integer"
        x-nullable: true
      log-bufsize:
        type: "integer"
        x-nullable: true
      log_proto:
        type: "string"
        enum:
        - "legacy"
        - "octet-count"
      maintenance:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      max_reuse:
        type: "integer"
        x-nullable: true
      maxconn:
        type: "integer"
        x-display-name: "Max Concurrent Connections"
        x-nullable: true
      maxqueue:
        type: "integer"
        x-display-name: "Max Number of Connections"
        x-nullable: true
      minconn:
        type: "integer"
        x-nullable: true
      namespace:
        type: "string"
      no_sslv3:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      no_tlsv10:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      no_tlsv11:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      no_tlsv12:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      no_tlsv13:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      no_verifyhost:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      npn:
        type: "string"
        x-dependency:
          ssl:
            value: "enabled"
      observe:
        type: "string"
        enum:
        - "layer4"
        - "layer7"
        x-dependency:
          ssl:
            value: "enabled"
      on-error:
        type: "string"
        enum:
        - "fastinter"
        - "fail-check"
        - "sudden-death"
        - "mark-down"
      on-marked-down:
        type: "string"
        enum:
        - "shutdown-sessions"
      on-marked-up:
        type: "string"
        enum:
        - "shutdown-backup-sessions"
      pool_low_conn:
        type: "integer"
        x-nullable: true
      pool_max_conn:
        type: "integer"
        x-nullable: true
      pool_purge_delay:
        type: "integer"
        x-nullable: true
      proto:
        type: "string"
        pattern: "^[^\\s]+$"
      proxy-v2-options:
        type: "array"
        items:
          type: "string"
          enum:
          - "ssl"
          - "cert-cn"
          - "ssl-cipher"
          - "cert-sig"
          - "cert-key"
          - "authority"
          - "crc32c"
          - "unique-id"
        x-omitempty: true
      redir:
        type: "string"
        x-display-name: "Prefix"
      resolve-net:
        type: "string"
        pattern: "^([A-Za-z0-9.:/]+)(,[A-Za-z0-9.:/]+)*$"
      resolve-prefer:
        type: "string"
        enum:
        - "ipv4"
        - "ipv6"
      resolve_opts:
        type: "string"
        pattern: "^(allow-dup-ip|ignore-weight|prevent-dup-ip)(,(allow-dup-ip|ignore-weight|prevent-dup-ip))*$"
      resolvers:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dynamic-enum:
          operation: "getResolvers"
          property: "name"
      rise:
        type: "integer"
        x-nullable: true
      send-proxy:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      send-proxy-v2:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      send_proxy_v2_ssl:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      send_proxy_v2_ssl_cn:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      set-proxy-v2-tlv-fmt:
        $ref: "#/definitions/server_params_setproxyv2tlvfmt"
      shard:
        type: "integer"
      sigalgs:
        type: "string"
        x-dependency:
          ssl:
            value: true
      slowstart:
        type: "integer"
        x-nullable: true
      sni:
        type: "string"
        pattern: "^[^\\s]+$"
      socks4:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          check-via-socks4:
            required: true
      source:
        type: "string"
      ssl:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      ssl_cafile:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          ssl:
            value: "enabled"
        x-display-name: "SSL CA File"
      ssl_certificate:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          ssl:
            value: "enabled"
      ssl_max_ver:
        type: "string"
        enum:
        - "SSLv3"
        - "TLSv1.0"
        - "TLSv1.1"
        - "TLSv1.2"
        - "TLSv1.3"
      ssl_min_ver:
        type: "string"
        enum:
        - "SSLv3"
        - "TLSv1.0"
        - "TLSv1.1"
        - "TLSv1.2"
        - "TLSv1.3"
      ssl_reuse:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      stick:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      tcp_ut:
        type: "integer"
        x-nullable: true
      tfo:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      tls_tickets:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-dependency:
          ssl:
            value: "enabled"
      track:
        type: "string"
      verify:
        type: "string"
        enum:
        - "none"
        - "required"
        x-dependency:
          ssl:
            value: "enabled"
      verifyhost:
        type: "string"
        x-dependency:
          ssl:
            value: "enabled"
          verify:
            value: "required"
      weight:
        type: "integer"
        x-nullable: true
      ws:
        type: "string"
        enum:
        - "auto"
        - "h1"
        - "h2"
        x-display-name: "Relaying websocket stream protocol"
  site:
    type: "object"
    required:
    - "name"
    properties:
      farms:
        type: "array"
        items:
          $ref: "#/definitions/site_farms"
        x-omitempty: true
      name:
        type: "string"
        pattern: "^[A-Za-z0-9-_.:]+$"
        x-nullable: false
      service:
        $ref: "#/definitions/site_service"
    title: "Site"
    description: "Site configuration. Sites are considered as one service and all\
      \ farms connected to that service.\nFarms are connected to service using use-backend\
      \ and default_backend directives. Sites let you\nconfigure simple HAProxy configurations,\
      \ for more advanced options use /haproxy/configuration\nendpoints.\n"
    example:
      farms:
      - balance:
          algorithm: "roundrobin"
        mode: "http"
        name: "www_backend"
        servers:
        - address: "127.0.1.1"
          name: "www_server"
          port: 4567
        - address: "127.0.1.2"
          name: "www_server_new"
          port: 4567
        use_as: "default"
      name: "test_site"
      service:
        http_connection_mode: "httpclose"
        maxconn: 2000
        mode: "http"
    additionalProperties: false
  sites:
    title: "Sites"
    type: "array"
    description: "Sites array. Sites are considered as one service and all farms connected\
      \ to that service.\nFarms are connected to service using use-backend and default_backend\
      \ directives. Sites let you\nconfigure simple HAProxy configurations, for more\
      \ advanced options use /haproxy/configuration\nendpoints.\n"
    items:
      $ref: "#/definitions/site"
  global:
    type: "object"
    properties:
      anonkey:
        type: "integer"
        minimum: 0
        maximum: 4294967295
        x-nullable: true
      busy_polling:
        type: "boolean"
      ca_base:
        type: "string"
        x-display-name: "SSL CA Certificates Base Directory"
      chroot:
        type: "string"
        pattern: "^[^\\s]+$"
        x-display-name: "Chroot"
      close_spread_time:
        type: "integer"
        x-nullable: true
      cluster_secret:
        type: "string"
        x-display-name: "Cluster Secret"
      cpu_maps:
        type: "array"
        items:
          $ref: "#/definitions/global_cpu_maps"
        x-omitempty: true
        x-display-name: "CPU Maps"
        x-go-name: "CPUMaps"
      crt_base:
        type: "string"
        x-display-name: "SSL Certificates Base Directory"
      daemon:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      default_path:
        $ref: "#/definitions/global_default_path"
      description:
        type: "string"
        x-display-name: "Text that describes the instance"
      device_atlas_options:
        $ref: "#/definitions/global_device_atlas_options"
      expose_experimental_directives:
        type: "boolean"
      external_check:
        type: "boolean"
        x-display-name: "External Check"
      fifty_one_degrees_options:
        $ref: "#/definitions/global_fifty_one_degrees_options"
      gid:
        type: "integer"
        x-display-name: "GID"
      grace:
        type: "integer"
        x-display-name: "Defines a delay between SIGUSR1 and real soft-stop"
        x-nullable: true
      group:
        type: "string"
        pattern: "^[^\\s]+$"
        x-display-name: "Group"
      h1_case_adjust:
        type: "array"
        items:
          $ref: "#/definitions/global_h1_case_adjust"
        x-omitempty: true
        x-go-name: "H1CaseAdjusts"
      h1_case_adjust_file:
        type: "string"
      h2_workaround_bogus_websocket_clients:
        type: "boolean"
      hard_stop_after:
        type: "integer"
        x-display-name: "Hard Stop After"
        x-nullable: true
      httpclient_resolvers_disabled:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "HTTP Client Resolvers Disabled"
      httpclient_resolvers_id:
        type: "string"
        x-display-name: "HTTP Client Resolvers ID"
      httpclient_resolvers_prefer:
        type: "string"
        enum:
        - "ipv4"
        - "ipv6"
        x-display-name: "HTTP Client Resolvers Prefer"
      httpclient_retries:
        type: "integer"
        x-display-name: "HTTP Client Retries"
      httpclient_ssl_ca_file:
        type: "string"
        x-display-name: "HTTP Client SSL CA File"
      httpclient_ssl_verify:
        type: "string"
        enum:
        - ""
        - "none"
        - "required"
        x-display-name: "HTTP Client SSL Verify"
        x-nullable: true
      httpclient_timeout_connect:
        type: "integer"
        x-display-name: "HTTP Client Connect Timeout"
        x-nullable: true
      insecure_fork_wanted:
        type: "boolean"
      insecure_setuid_wanted:
        type: "boolean"
      issuers_chain_path:
        type: "string"
      limited_quic:
        type: "boolean"
      localpeer:
        type: "string"
        pattern: "^[^\\s]+$"
        x-display-name: "Local instance's peer name."
      log_send_hostname:
        $ref: "#/definitions/global_log_send_hostname"
      lua_load_per_thread:
        type: "string"
      lua_loads:
        type: "array"
        items:
          $ref: "#/definitions/global_lua_loads"
        x-omitempty: true
      lua_prepend_path:
        type: "array"
        items:
          $ref: "#/definitions/global_lua_prepend_path"
        x-omitempty: true
      master-worker:
        type: "boolean"
        x-display-name: "Master Worker Mode"
      max_spread_checks:
        type: "integer"
        x-nullable: true
      maxcompcpuusage:
        type: "integer"
        x-display-name: "Maximum HAProxy CPU usage"
      maxcomprate:
        type: "integer"
        x-display-name: "Maximum per-process input compression rate"
      maxconn:
        type: "integer"
        x-display-name: "Max Connections"
      maxconnrate:
        type: "integer"
        x-display-name: "Maximum per-process number of concurrent connections"
      maxpipes:
        type: "integer"
        x-display-name: "Maximum per-process number of pipes"
      maxsessrate:
        type: "integer"
        x-display-name: "Maximum per-process number of sessions per second"
      maxsslconn:
        type: "integer"
        x-display-name: "Maximum per-process number of concurrent SSL connections"
      maxsslrate:
        type: "integer"
        x-display-name: "Maximum per-process number of SSL sessions per second"
      maxzlibmem:
        type: "integer"
        x-display-name: "Maximum amount of RAM in megabytes per process usable by\
          \ the zlib"
      mworker_max_reloads:
        type: "integer"
        minimum: 0
        x-display-name: "The number of times a worker can survive a reload"
        x-nullable: true
      nbproc:
        type: "integer"
        x-display-name: "Number of Processes"
      nbthread:
        type: "integer"
        x-display-name: "Number of Threads"
      no-quic:
        type: "boolean"
        x-display-name: "Disable the use of the QUIC protocol"
      node:
        type: "string"
      noepoll:
        type: "boolean"
        x-display-name: "Disable the use of the \"epoll\" event polling system on\
          \ Linux"
      noevports:
        type: "boolean"
        x-display-name: "Disable the use of the event ports event polling system on\
          \ SunOS system derived from Solaris 10 and later"
      nogetaddrinfo:
        type: "boolean"
        x-display-name: "Disable the use of getaddrinfo for name resolving"
      nokqueue:
        type: "boolean"
        x-display-name: "Disable the use of the \"kqueue\" event polling system on\
          \ BSD"
      nopoll:
        type: "boolean"
        x-display-name: "Disable the use of the \"poll\" event polling system"
      noreuseport:
        type: "boolean"
        x-display-name: "Disable the use of SO_REUSEPORT"
      nosplice:
        type: "boolean"
        x-display-name: "Disable the use of kernel tcp splicing between sockets on\
          \ Linux"
      numa_cpu_mapping:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      pidfile:
        type: "string"
        x-display-name: "PID File"
      pp2_never_send_local:
        type: "boolean"
      prealloc-fd:
        type: "boolean"
        x-display-name: "Prealloc FD"
      presetenv:
        type: "array"
        items:
          $ref: "#/definitions/global_presetenv"
        x-omitempty: true
        x-display-name: "Preset environment variables"
        x-go-name: "PresetEnvs"
      profiling_tasks:
        type: "string"
        enum:
        - "auto"
        - "on"
        - "off"
        x-display-name: "Enable or disables per-task CPU profiling"
      quiet:
        type: "boolean"
      resetenv:
        type: "string"
        x-display-name: "Remove all environment variables except the ones specified"
      runtime_apis:
        type: "array"
        items:
          type: "object"
          allOf:
          - $ref: "#/definitions/bind_params"
          - type: "object"
            properties:
              address:
                type: "string"
                pattern: "^[^\\s]+$"
            required:
            - "address"
          x-go-name: "RuntimeAPI"
        x-omitempty: true
        x-display-name: "Runtime APIs"
        x-go-name: "RuntimeAPIs"
      server_state_base:
        type: "string"
        pattern: "^[^\\s]+$"
        x-display-name: "Server State Base"
      server_state_file:
        type: "string"
        pattern: "^[^\\s]+$"
        x-display-name: "Server State File"
      set_dumpable:
        type: "boolean"
      set_var:
        type: "array"
        items:
          $ref: "#/definitions/global_set_var"
        x-omitempty: true
        x-display-name: "Set variables"
        x-go-name: "SetVars"
      set_var_fmt:
        type: "array"
        items:
          $ref: "#/definitions/global_set_var_fmt"
        x-omitempty: true
        x-display-name: "Set variable formats"
        x-go-name: "SetVarFmts"
      setcap:
        type: "string"
        pattern: "^[^\\s]+$"
        x-omitempty: true
        x-display-name: "OS Capabilities"
      setenv:
        type: "array"
        items:
          $ref: "#/definitions/global_setenv"
        x-omitempty: true
        x-display-name: "Set environment variables"
        x-go-name: "SetEnvs"
      spread_checks:
        type: "integer"
        x-display-name: "Add some randomness in the check interval"
      ssl_default_bind_ciphers:
        type: "string"
        x-display-name: "SSL Default Bind Ciphers"
      ssl_default_bind_ciphersuites:
        type: "string"
        x-display-name: "SSL Default Bind Ciphersuites"
      ssl_default_bind_client_sigalgs:
        type: "string"
        x-display-name: "SSL Default Bind Client Sigalgs"
      ssl_default_bind_curves:
        type: "string"
        x-display-name: "SSL Default Bind Curves"
      ssl_default_bind_options:
        type: "string"
        x-display-name: "SSL Default Bind Options"
      ssl_default_bind_sigalgs:
        type: "string"
        x-display-name: "SSL Default Bind Sigalgs"
      ssl_default_server_ciphers:
        type: "string"
        x-display-name: "SSL Default Server Ciphers"
      ssl_default_server_ciphersuites:
        type: "string"
        x-display-name: "SSL Default Server Ciphersuites"
      ssl_default_server_client_sigalgs:
        type: "string"
        x-display-name: "SSL Default Server Client Sigalgs"
      ssl_default_server_curves:
        type: "string"
        x-display-name: "SSL Default Server Curves"
      ssl_default_server_options:
        type: "string"
        x-display-name: "SSL Default Server Options"
      ssl_default_server_sigalgs:
        type: "string"
        x-display-name: "SSL Default Server Sigalgs"
      ssl_dh_param_file:
        type: "string"
      ssl_engines:
        type: "array"
        items:
          $ref: "#/definitions/global_ssl_engines"
        x-omitempty: true
        x-display-name: "SSL Engines"
        x-go-name: "SslEngines"
      ssl_load_extra_files:
        type: "string"
        x-display-name: "SSL Load Extra Files"
      ssl_mode_async:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Asynchronous TLS I/O operations"
      ssl_propquery:
        type: "string"
        x-display-name: "SSL Query String Property"
      ssl_provider:
        type: "string"
        x-display-name: "SSL Provider"
      ssl_provider_path:
        type: "string"
        x-display-name: "SSL Provider Path"
      ssl_server_verify:
        type: "string"
        enum:
        - "none"
        - "required"
        x-display-name: "Verify server certificates"
      ssl_skip_self_issued_ca:
        type: "boolean"
        x-display-name: "Self issued CA, aka x509 root CA"
      stats_maxconn:
        type: "integer"
        x-display-name: "Stats maxconn"
        x-nullable: true
      stats_timeout:
        type: "integer"
        x-nullable: true
      strict_limits:
        type: "boolean"
      thread_group_lines:
        type: "array"
        items:
          $ref: "#/definitions/global_thread_group_lines"
        x-omitempty: true
        x-display-name: "Thread Groups"
        x-go-name: "ThreadGroupLines"
      thread_groups:
        type: "integer"
        x-display-name: "Number of Thread Groups"
      tune_options:
        $ref: "#/definitions/global_tune_options"
      tune_ssl_default_dh_param:
        type: "integer"
        x-deprecated: true
        x-display-name: "SSL Default DH Parameter Size"
      uid:
        type: "integer"
        x-display-name: "UID"
      ulimit_n:
        type: "integer"
      unsetenv:
        type: "string"
        x-display-name: "Removes environment variables specified in arguments"
      user:
        type: "string"
        pattern: "^[^\\s]+$"
        x-display-name: "User"
      wurfl_options:
        $ref: "#/definitions/global_wurfl_options"
      zero_warning:
        type: "boolean"
    title: "Global"
    description: "HAProxy global configuration"
    example:
      lua_loads:
      - file: "file"
      - file: "file"
      pp2_never_send_local: true
      nopoll: true
      server_state_file: "server_state_file"
      httpclient_resolvers_id: "httpclient_resolvers_id"
      h1_case_adjust_file: "h1_case_adjust_file"
      pidfile: "pidfile"
      tune_ssl_default_dh_param: 7
      chroot: "chroot"
      nokqueue: true
      crt_base: "crt_base"
      stats_maxconn: 6
      resetenv: "resetenv"
      insecure_fork_wanted: true
      spread_checks: 9
      device_atlas_options:
        json_file: "json_file"
        properties_cookie: "properties_cookie"
        log_level: "log_level"
        separator: "separator"
      httpclient_ssl_ca_file: "httpclient_ssl_ca_file"
      ssl_server_verify: "none"
      cpu_maps:
      - process: "process"
        cpu_set: "cpu_set"
      - process: "process"
        cpu_set: "cpu_set"
      ssl_propquery: "ssl_propquery"
      node: "node"
      setcap: "setcap"
      prealloc-fd: true
      ssl_default_bind_ciphersuites: "ssl_default_bind_ciphersuites"
      ssl_load_extra_files: "ssl_load_extra_files"
      ssl_provider_path: "ssl_provider_path"
      ssl_mode_async: "enabled"
      ssl_skip_self_issued_ca: true
      nbproc: 5
      thread_groups: 9
      setenv:
      - name: "name"
        value: "value"
      - name: "name"
        value: "value"
      max_spread_checks: 3
      close_spread_time: 6
      uid: 0
      wurfl_options:
        patch_file: "patch_file"
        data_file: "data_file"
        information_list_separator: "information_list_separator"
        cache_size: 2
        information_list: "information_list"
      anonkey: 343953088
      nosplice: true
      httpclient_retries: 7
      httpclient_ssl_verify: ""
      ssl_default_server_ciphers: "ssl_default_server_ciphers"
      grace: 5
      maxconnrate: 1
      httpclient_timeout_connect: 9
      mworker_max_reloads: 0
      quiet: true
      maxcomprate: 4
      default_path:
        path: "path"
        type: "current"
      external_check: true
      maxcompcpuusage: 2
      cluster_secret: "cluster_secret"
      profiling_tasks: "auto"
      master-worker: true
      lua_load_per_thread: "lua_load_per_thread"
      localpeer: "localpeer"
      nbthread: 9
      httpclient_resolvers_disabled: "enabled"
      maxsessrate: 1
      ssl_dh_param_file: "ssl_dh_param_file"
      ssl_default_bind_client_sigalgs: "ssl_default_bind_client_sigalgs"
      thread_group_lines:
      - num_or_range: "num_or_range"
        group: "group"
      - num_or_range: "num_or_range"
        group: "group"
      stats_timeout: 8
      h1_case_adjust:
      - from: "from"
        to: "to"
      - from: "from"
        to: "to"
      h2_workaround_bogus_websocket_clients: true
      noepoll: true
      maxsslrate: 7
      maxpipes: 1
      group: "group"
      set_var:
      - name: "name"
        expr: "expr"
      - name: "name"
        expr: "expr"
      presetenv:
      - name: "name"
        value: "value"
      - name: "name"
        value: "value"
      ssl_default_server_ciphersuites: "ssl_default_server_ciphersuites"
      log_send_hostname:
        param: "param"
        enabled: "enabled"
      nogetaddrinfo: true
      insecure_setuid_wanted: true
      daemon: "enabled"
      set_dumpable: true
      ssl_engines:
      - algorithms: "algorithms"
        name: "name"
      - algorithms: "algorithms"
        name: "name"
      ssl_default_bind_options: "ssl_default_bind_options"
      ssl_default_server_options: "ssl_default_server_options"
      noevports: true
      httpclient_resolvers_prefer: "ipv4"
      ssl_default_bind_sigalgs: "ssl_default_bind_sigalgs"
      ulimit_n: 3
      gid: 5
      limited_quic: true
      ssl_default_bind_curves: "ssl_default_bind_curves"
      maxconn: 7
      busy_polling: true
      description: "description"
      strict_limits: true
      ssl_provider: "ssl_provider"
      no-quic: true
      lua_prepend_path:
      - path: "path"
        type: "path"
      - path: "path"
        type: "path"
      ssl_default_server_sigalgs: "ssl_default_server_sigalgs"
      numa_cpu_mapping: "enabled"
      zero_warning: true
      maxsslconn: 6
      ssl_default_server_curves: "ssl_default_server_curves"
      ca_base: "ca_base"
      server_state_base: "server_state_base"
      expose_experimental_directives: true
      fifty_one_degrees_options:
        data_file: "data_file"
        cache_size: 1
        property_name_list: "property_name_list"
        property_separator: "property_separator"
      ssl_default_server_client_sigalgs: "ssl_default_server_client_sigalgs"
      noreuseport: true
      runtime_apis:
      - ""
      - ""
      issuers_chain_path: "issuers_chain_path"
      set_var_fmt:
      - format: "format"
        name: "name"
      - format: "format"
        name: "name"
      hard_stop_after: 2
      unsetenv: "unsetenv"
      user: "user"
      ssl_default_bind_ciphers: "ssl_default_bind_ciphers"
      tune_options:
        buffers_limit: 6
        fail_alloc: true
        ssl_default_dh_param: 1
        h1_zero_copy_fwd_send: "enabled"
        lua_maxmem: true
        lua_burst_timeout: 8
        h2_be_initial_window_size: 6
        listener_default_shards: "by-process"
        ssl_keylog: "enabled"
        h2_be_max_concurrent_streams: 6
        listener_multi_queue: "enabled"
        vars_global_max_size: 5
        ssl_ocsp_update_max_delay: 8
        ssl_ctx_cache_size: 9
        http_maxhdr: 337
        runqueue_depth: 0
        ssl_force_private_cache: true
        idle_pool_shared: "enabled"
        quic_frontend_max_streams_bidi: 0
        pool_low_fd_ratio: 9
        rcvbuf_client: 6
        sndbuf_server: 6
        h1_zero_copy_fwd_recv: "enabled"
        sndbuf_backend: 2
        rcvbuf_server: 4
        h2_fe_max_concurrent_streams: 6
        zlib_windowsize: 12
        ssl_lifetime: 3
        rcvbuf_frontend: 8
        quic_frontend_max_idle_timeout: 9
        h2_fe_initial_window_size: 5
        disable_zero_copy_forwarding: true
        maxpollevents: 4
        max_checks_per_thread: 5
        pool_high_fd_ratio: 7
        pt_zero_copy_forwarding: "enabled"
        h2_zero_copy_fwd_send: "enabled"
        lua_log_stderr: "auto"
        vars_sess_max_size: 3
        peers_max_updates_at_once: 1
        buffers_reserve: 2
        zlib_memlevel: 8
        maxrewrite: 0
        comp_maxlevel: 1
        events_max_events_at_once: 2884
        ssl_maxrecord: 9
        h2_max_concurrent_streams: 7
        memory_hot_size: 6
        pattern_cache_size: 4
        quic_socket_owner: "listener"
        rcvbuf_backend: 4
        vars_proc_max_size: 8
        lua_service_timeout: 3
        lua_forced_yield: 7
        ssl_ocsp_update_min_delay: 0
        h2_max_frame_size: 0
        sndbuf_frontend: 8
        vars_reqres_max_size: 7
        ssl_capture_buffer_size: 8
        lua_session_timeout: 3
        idletimer: 30489
        maxaccept: 3
        ssl_cachesize: 4
        vars_txn_max_size: 3
        sndbuf_client: 1
        quic_max_frame_loss: 7
        bufsize: 6
        quic_frontend_conn_tx_buffers_limit: 0
        sched_low_latency: "enabled"
        quic_retry_threshold: 5
        h2_header_table_size: 21975
        h2_initial_window_size: 3
        lua_log_loggers: "enabled"
        recv_enough: 3
        fd_edge_triggered: "enabled"
        lua_task_timeout: 7
        pipesize: 4
        http_cookielen: 7
        http_logurilen: 6
        stick_counters: 5
      maxzlibmem: 1
    additionalProperties: false
  defaults:
    type: "object"
    properties:
      abortonclose:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      accept_invalid_http_request:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Accept Invalid HTTP Request"
      accept_invalid_http_response:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Accept Invalid HTTP Response"
      adv_check:
        type: "string"
        enum:
        - "ssl-hello-chk"
        - "smtpchk"
        - "ldap-check"
        - "mysql-check"
        - "pgsql-check"
        - "tcp-check"
        - "redis-check"
        - "httpchk"
        x-display-name: "Advanced Check"
      allbackups:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "All Backups"
      backlog:
        type: "integer"
        x-display-name: "Backlog"
        x-nullable: true
      balance:
        $ref: "#/definitions/balance"
      bind_process:
        type: "string"
        pattern: "^[^\\s]+$"
      check_timeout:
        type: "integer"
        x-nullable: true
      checkcache:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Checkcache"
      clflog:
        type: "boolean"
        x-display-name: "CLF Log"
      client_fin_timeout:
        type: "integer"
        x-nullable: true
      client_timeout:
        type: "integer"
        x-nullable: true
      clitcpka:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Client TCP Keep Alive"
      clitcpka_cnt:
        type: "integer"
        x-display-name: "Clitcpka Cnt"
        x-nullable: true
      clitcpka_idle:
        type: "integer"
        x-display-name: "Clitcpka Idle"
        x-nullable: true
      clitcpka_intvl:
        type: "integer"
        x-display-name: "Clitcpka Intvl"
        x-nullable: true
      compression:
        $ref: "#/definitions/compression"
      connect_timeout:
        type: "integer"
        x-nullable: true
      contstats:
        type: "string"
        enum:
        - "enabled"
        x-display-name: "Continuous Statistics"
      cookie:
        $ref: "#/definitions/cookie"
      default_backend:
        type: "string"
        pattern: "^[A-Za-z0-9-_.:]+$"
        x-dynamic-enum:
          operation: "getBackends"
          property: "name"
      default_server:
        $ref: "#/definitions/default_server"
      disable_h2_upgrade:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Disable HTTP/2 Upgrade"
      disabled:
        type: "boolean"
      dontlog_normal:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Dontlog Normal"
      dontlognull:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Don't Log Null"
      dynamic_cookie_key:
        type: "string"
        pattern: "^[^\\s]+$"
      email_alert:
        $ref: "#/definitions/email_alert"
      enabled:
        type: "boolean"
      error_files:
        type: "array"
        items:
          $ref: "#/definitions/errorfile"
        x-omitempty: true
        x-go-name: "ErrorFiles"
      error_log_format:
        type: "string"
      errorfiles_from_http_errors:
        type: "array"
        items:
          $ref: "#/definitions/errorfiles"
        x-omitempty: true
        x-go-name: "ErrorFilesFromHTTPErrors"
      errorloc302:
        $ref: "#/definitions/errorloc"
      errorloc303:
        $ref: "#/definitions/errorloc"
      external_check:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "External Check"
      external_check_command:
        type: "string"
        pattern: "^[^\\s]+$"
        x-display-name: "External Check Command"
      external_check_path:
        type: "string"
        pattern: "^[^\\s]+$"
        x-display-name: "External Check Path"
      forwardfor:
        $ref: "#/definitions/forwardfor"
      from:
        type: "string"
        pattern: "^[A-Za-z0-9-_.:]+$"
      fullconn:
        type: "integer"
        x-nullable: true
      h1_case_adjust_bogus_client:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "H1 Adjust Bogus Client"
      h1_case_adjust_bogus_server:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "H1 Adjust Bogus Server"
      hash_type:
        $ref: "#/definitions/hash_type"
      http-buffer-request:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "HTTP bufferrequest"
      http-check:
        $ref: "#/definitions/http_check"
      http-use-htx:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "HTTP Use HTX"
      http_connection_mode:
        type: "string"
        enum:
        - "httpclose"
        - "http-server-close"
        - "http-keep-alive"
      http_ignore_probes:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "HTTP Ignore Probes"
      http_keep_alive_timeout:
        type: "integer"
        x-nullable: true
      http_no_delay:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "HTTP No Delay"
      http_pretend_keepalive:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      http_request_timeout:
        type: "integer"
        x-nullable: true
      http_restrict_req_hdr_names:
        type: "string"
        enum:
        - "preserve"
        - "delete"
        - "reject"
        x-display-name: "Restrict HTTP Request Header Names"
      http_reuse:
        type: "string"
        enum:
        - "aggressive"
        - "always"
        - "never"
        - "safe"
      http_send_name_header:
        type: "string"
        x-display-name: "Add the server name to a request"
        x-nullable: true
      http_use_proxy_header:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "HTTP Use Proxy Header"
      httpchk_params:
        $ref: "#/definitions/httpchk_params"
      httplog:
        type: "boolean"
        x-display-name: "HTTP Log"
      httpslog:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Httpslog"
      idle_close_on_response:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Idle Close On Response"
      independent_streams:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Independent Streams"
      load_server_state_from_file:
        type: "string"
        enum:
        - "global"
        - "local"
        - "none"
      log_format:
        type: "string"
      log_format_sd:
        type: "string"
        x-display-name: "Log Format SD"
      log_health_checks:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Log Health Checks"
      log_separate_errors:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      log_tag:
        type: "string"
        pattern: "^[^\\s]+$"
      logasap:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Log ASAP"
      max_keep_alive_queue:
        type: "integer"
        x-display-name: "Maximum server queue size for maintaining keep-alive connections"
        x-nullable: true
      maxconn:
        type: "integer"
        x-display-name: "Max Connections"
        x-nullable: true
      mode:
        type: "string"
        enum:
        - "tcp"
        - "http"
        - "log"
      monitor_uri:
        $ref: "#/definitions/monitor_uri"
      mysql_check_params:
        $ref: "#/definitions/mysql_check_params"
      name:
        type: "string"
        pattern: "^[A-Za-z0-9-_.:]+$"
      nolinger:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Nolinger"
      originalto:
        $ref: "#/definitions/originalto"
      persist:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Persist"
      persist_rule:
        $ref: "#/definitions/persist_rule"
      pgsql_check_params:
        $ref: "#/definitions/pgsql_check_params"
      prefer_last_server:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Prefer Last Server"
      queue_timeout:
        type: "integer"
        x-nullable: true
      redispatch:
        $ref: "#/definitions/redispatch"
      retries:
        type: "integer"
        x-nullable: true
      retry_on:
        type: "string"
        x-display-name: "Specify when to attempt to automatically retry a failed request"
      server_fin_timeout:
        type: "integer"
        x-nullable: true
      server_timeout:
        type: "integer"
        x-nullable: true
      smtpchk_params:
        $ref: "#/definitions/smtpchk_params"
      socket_stats:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Socket Stats"
      source:
        $ref: "#/definitions/source"
      splice_auto:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Splice Auto"
      splice_request:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Splice Request"
      splice_response:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Splice Response"
      srvtcpka:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Server TCP Keep Alive"
      srvtcpka_cnt:
        type: "integer"
        x-display-name: "Srvtcpka Cnt"
        x-nullable: true
      srvtcpka_idle:
        type: "integer"
        x-display-name: "Srvtcpka Idle"
        x-nullable: true
      srvtcpka_intvl:
        type: "integer"
        x-display-name: "Srvtcpka Intvl"
        x-nullable: true
      stats_options:
        $ref: "#/definitions/stats_options"
      tarpit_timeout:
        type: "integer"
        x-nullable: true
      tcp_smart_accept:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Tcp Smart Accept"
      tcp_smart_connect:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Tcp Smart Connect"
      tcpka:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "TCP Keep Alive"
      tcplog:
        type: "boolean"
        x-display-name: "TCP Log"
      transparent:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Transparent"
      tunnel_timeout:
        type: "integer"
        x-nullable: true
      unique_id_format:
        type: "string"
        x-display-name: "Unique ID format"
      unique_id_header:
        type: "string"
        x-dependency:
          unique_id_format:
            required: true
        x-display-name: "Unique ID header"
    title: "Defaults"
    description: "HAProxy defaults configuration"
    example:
      redispatch:
        interval: 6
        enabled: "enabled"
      srvtcpka_intvl: 3
      persist_rule:
        rdp_cookie_name: "rdp_cookie_name"
        type: "rdp-cookie"
      error_log_format: "error_log_format"
      accept_invalid_http_request: "enabled"
      dontlognull: "enabled"
      balance:
        hash_expression: "hash_expression"
        rdp_cookie_name: "rdp_cookie_name"
        url_param_max_wait: 2
        hdr_use_domain_only: true
        uri_whole: true
        hdr_name: "hdr_name"
        uri_len: 5
        uri_depth: 1
        random_draws: 6
        url_param_check_post: 5
        uri_path_only: true
        algorithm: "roundrobin"
        url_param: "url_param"
      log_separate_errors: "enabled"
      clflog: true
      http_ignore_probes: "enabled"
      errorloc303:
        code: 1
        url: "url"
      errorloc302:
        code: 1
        url: "url"
      socket_stats: "enabled"
      client_timeout: 3
      http_no_delay: "enabled"
      queue_timeout: 3
      clitcpka: "enabled"
      cookie:
        maxidle: 1
        indirect: true
        postonly: true
        httponly: true
        preserve: true
        secure: true
        type: "rewrite"
        domain:
        - value: "value"
        - value: "value"
        name: "name"
        nocache: true
        dynamic: true
        maxlife: 1
        attr:
        - value: "value"
        - value: "value"
      mysql_check_params:
        client_version: "pre-41"
        username: "username"
      monitor_uri: {}
      abortonclose: "enabled"
      contstats: "enabled"
      disable_h2_upgrade: "enabled"
      clitcpka_intvl: 7
      checkcache: "enabled"
      retries: 1
      splice_request: "enabled"
      clitcpka_cnt: 2
      compression:
        algos-res:
        - "identity"
        - "identity"
        algorithms:
        - "identity"
        - "identity"
        types:
        - "types"
        - "types"
        types-res:
        - "types-res"
        - "types-res"
        types-req:
        - "types-req"
        - "types-req"
        offload: true
        algo-req: "identity"
        direction: "request"
      external_check_path: "external_check_path"
      logasap: "enabled"
      log_format: "log_format"
      accept_invalid_http_response: "enabled"
      h1_case_adjust_bogus_server: "enabled"
      enabled: true
      transparent: "enabled"
      client_fin_timeout: 9
      http-buffer-request: "enabled"
      unique_id_header: "unique_id_header"
      tarpit_timeout: 7
      bind_process: "bind_process"
      tcp_smart_connect: "enabled"
      disabled: true
      retry_on: "retry_on"
      tcplog: true
      persist: "enabled"
      external_check: "enabled"
      server_fin_timeout: 2
      srvtcpka_cnt: 6
      pgsql_check_params:
        username: "username"
      httpslog: "enabled"
      tcpka: "enabled"
      fullconn: 4
      tcp_smart_accept: "enabled"
      email_alert:
        myhostname: "myhostname"
        level: "emerg"
        mailers: "mailers"
        from: "from"
        to: "to"
      errorfiles_from_http_errors:
      - codes:
        - 7
        - 7
        name: "name"
      - codes:
        - 7
        - 7
        name: "name"
      smtpchk_params:
        domain: "domain"
        hello: "hello"
      splice_auto: "enabled"
      check_timeout: 7
      log_tag: "log_tag"
      http_use_proxy_header: "enabled"
      idle_close_on_response: "enabled"
      srvtcpka_idle: 3
      connect_timeout: 1
      http-check:
        min_recv: 9
        via_socks4: true
        alpn: "alpn"
        uri_log_format: "uri_log_format"
        pattern: "pattern"
        body: "body"
        type: "comment"
        ssl: true
        var_format: "var_format"
        default: true
        exclamation_mark: true
        on_error: "on_error"
        error_status: "L7OKC"
        addr: "addr"
        send_proxy: true
        var_name: "var_name"
        headers:
        - name: "name"
          fmt: "fmt"
        - name: "name"
          fmt: "fmt"
        port_string: "port_string"
        method: "HEAD"
        linger: true
        on_success: "on_success"
        match: "status"
        index: 5
        uri: "uri"
        version: "version"
        check_comment: "check_comment"
        sni: "sni"
        body_log_format: "body_log_format"
        status-code: "status-code"
        ok_status: "L7OK"
        tout_status: "L7TOUT"
        port: 61401
        proto: "proto"
        var_expr: "var_expr"
        var_scope: "var_scope"
      http_restrict_req_hdr_names: "preserve"
      source:
        address_second: "address_second"
        port_second: 38960
        address: "address"
        port: 45075
        usesrc: "address"
        hdr: "hdr"
        interface: "interface"
        occ: "occ"
      default_backend: "default_backend"
      mode: "tcp"
      tunnel_timeout: 6
      from: "from"
      http_send_name_header: "http_send_name_header"
      http_keep_alive_timeout: 6
      dynamic_cookie_key: "dynamic_cookie_key"
      default_server: ""
      httplog: true
      http_connection_mode: "httpclose"
      backlog: 0
      dontlog_normal: "enabled"
      httpchk_params:
        method: "HEAD"
        uri: "uri"
        version: "version"
      name: "name"
      originalto:
        header: "header"
        except: "except"
        enabled: "enabled"
      adv_check: "ssl-hello-chk"
      hash_type:
        method: "map-based"
        function: "sdbm"
        modifier: "avalanche"
      external_check_command: "external_check_command"
      maxconn: 6
      log_health_checks: "enabled"
      http_request_timeout: 8
      allbackups: "enabled"
      http_reuse: "aggressive"
      forwardfor:
        ifnone: true
        header: "header"
        except: "except"
        enabled: "enabled"
      load_server_state_from_file: "global"
      log_format_sd: "log_format_sd"
      http-use-htx: "enabled"
      h1_case_adjust_bogus_client: "enabled"
      prefer_last_server: "enabled"
      stats_options:
        stats_show_desc: "stats_show_desc"
        stats_admin: true
        stats_refresh_delay: 0
        stats_show_node_name: "stats_show_node_name"
        stats_admin_cond_test: "stats_admin_cond_test"
        stats_show_modules: true
        stats_admin_cond: "if"
        stats_http_requests:
        - cond_test: "cond_test"
          realm: "realm"
          cond: "cond"
          type: "allow"
        - cond_test: "cond_test"
          realm: "realm"
          cond: "cond"
          type: "allow"
        stats_show_legends: true
        stats_enable: true
        stats_uri_prefix: "stats_uri_prefix"
        stats_realm_realm: "stats_realm_realm"
        stats_realm: true
        stats_auths:
        - passwd: "passwd"
          user: "user"
        - passwd: "passwd"
          user: "user"
        stats_hide_version: true
        stats_maxconn: 1
      clitcpka_idle: 4
      splice_response: "enabled"
      max_keep_alive_queue: 9
      server_timeout: 6
      unique_id_format: "unique_id_format"
      http_pretend_keepalive: "enabled"
      independent_streams: "enabled"
      srvtcpka: "enabled"
      error_files:
      - code: 6
        file: "file"
      - code: 6
        file: "file"
      nolinger: "enabled"
    additionalProperties: false
  defaults_sections:
    title: "Defaults Sections"
    type: "array"
    description: "HAProxy defaults sections array"
    items:
      $ref: "#/definitions/defaults"
  frontend:
    type: "object"
    required:
    - "name"
    properties:
      accept_invalid_http_request:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Accept Invalid HTTP Request"
      backlog:
        type: "integer"
        x-display-name: "Backlog"
        x-nullable: true
      bind_process:
        type: "string"
        pattern: "^[^\\s]+$"
      clflog:
        type: "boolean"
        x-dependency:
          mode:
            value: "http"
        x-display-name: "CLF Log"
      client_fin_timeout:
        type: "integer"
        x-nullable: true
      client_timeout:
        type: "integer"
        x-nullable: true
      clitcpka:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-dependency:
          mode:
            value: "tcp"
        x-display-name: "Client TCP Keep Alive"
      clitcpka_cnt:
        type: "integer"
        x-display-name: "Clitcpka Cnt"
        x-nullable: true
      clitcpka_idle:
        type: "integer"
        x-display-name: "Clitcpka Idle"
        x-nullable: true
      clitcpka_intvl:
        type: "integer"
        x-display-name: "Clitcpka Intvl"
        x-nullable: true
      compression:
        $ref: "#/definitions/compression"
      contstats:
        type: "string"
        enum:
        - "enabled"
        x-display-name: "Continuous Statistics"
      default_backend:
        type: "string"
        pattern: "^[A-Za-z0-9-_.:]+$"
        x-dynamic-enum:
          operation: "getBackends"
          property: "name"
      description:
        type: "string"
        x-display-name: "Description"
      disable_h2_upgrade:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Disable HTTP/2 Upgrade"
      disabled:
        type: "boolean"
      dontlog_normal:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      dontlognull:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Don't Log Null"
      email_alert:
        $ref: "#/definitions/email_alert"
      enabled:
        type: "boolean"
      error_files:
        type: "array"
        items:
          $ref: "#/definitions/errorfile"
        x-omitempty: true
        x-go-name: "ErrorFiles"
      error_log_format:
        type: "string"
      errorfiles_from_http_errors:
        type: "array"
        items:
          $ref: "#/definitions/errorfiles"
        x-omitempty: true
        x-go-name: "ErrorFilesFromHTTPErrors"
      errorloc302:
        $ref: "#/definitions/errorloc"
      errorloc303:
        $ref: "#/definitions/errorloc"
      forwardfor:
        $ref: "#/definitions/forwardfor"
      from:
        type: "string"
        pattern: "^[A-Za-z0-9-_.:]+$"
      h1_case_adjust_bogus_client:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "H1 Adjust Bogus Client"
      http-buffer-request:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "HTTP bufferrequest"
      http-use-htx:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-dependency:
          mode:
            value: "http"
        x-display-name: "HTTP Use HTX"
      http_connection_mode:
        type: "string"
        enum:
        - "httpclose"
        - "http-server-close"
        - "http-keep-alive"
        x-dependency:
          mode:
            value: "http"
      http_ignore_probes:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "HTTP Ignore Probes"
      http_keep_alive_timeout:
        type: "integer"
        x-dependency:
          mode:
            value: "http"
        x-nullable: true
      http_no_delay:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "HTTP No Delay"
      http_request_timeout:
        type: "integer"
        x-dependency:
          mode:
            value: "http"
        x-nullable: true
      http_restrict_req_hdr_names:
        type: "string"
        enum:
        - "preserve"
        - "delete"
        - "reject"
        x-display-name: "Restrict HTTP Request Header Names"
      http_use_proxy_header:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "HTTP Use Proxy Header"
      httplog:
        type: "boolean"
        x-dependency:
          mode:
            value: "http"
        x-display-name: "HTTP Log"
      httpslog:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Httpslog"
      id:
        type: "integer"
        x-nullable: true
      idle_close_on_response:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Idle Close On Response"
      independent_streams:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Independent Streams"
      log_format:
        type: "string"
      log_format_sd:
        type: "string"
        x-display-name: "Log Format SD"
      log_separate_errors:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      log_tag:
        type: "string"
        pattern: "^[A-Za-z0-9-_.:]+$"
      logasap:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Log ASAP"
      maxconn:
        type: "integer"
        x-display-name: "Max Connections"
        x-nullable: true
      mode:
        type: "string"
        enum:
        - "http"
        - "tcp"
      monitor_fail:
        $ref: "#/definitions/monitor_fail"
      monitor_uri:
        $ref: "#/definitions/monitor_uri"
      name:
        type: "string"
        pattern: "^[A-Za-z0-9-_.:]+$"
        x-nullable: false
      nolinger:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Nolinger"
      originalto:
        $ref: "#/definitions/originalto"
      socket_stats:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Socket Stats"
      splice_auto:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Splice Auto"
      splice_request:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Splice Request"
      splice_response:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Splice Response"
      stats_options:
        $ref: "#/definitions/stats_options"
      stick_table:
        $ref: "#/definitions/config_stick_table"
      tarpit_timeout:
        type: "integer"
        x-nullable: true
      tcp_smart_accept:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Tcp Smart Accept"
      tcpka:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-dependency:
          mode:
            value: "tcp"
        x-display-name: "TCP Keep Alive"
      tcplog:
        type: "boolean"
        x-dependency:
          mode:
            value: "tcp"
        x-display-name: "TCP Log"
      unique_id_format:
        type: "string"
        x-display-name: "Unique ID format"
      unique_id_header:
        type: "string"
        x-dependency:
          unique_id_format:
            required: true
        x-display-name: "Unique ID header"
    title: "Frontend"
    description: "HAProxy frontend configuration"
    example:
      default_backend: "test_backend"
      http_connection_mode: "http-keep-alive"
      maxconn: 2000
      mode: "http"
      name: "test_frontend"
    additionalProperties: false
  frontends:
    title: "Frontends"
    type: "array"
    description: "HAProxy frontends array"
    items:
      $ref: "#/definitions/frontend"
  backend:
    type: "object"
    required:
    - "name"
    properties:
      abortonclose:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      accept_invalid_http_response:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Accept Invalid HTTP Response"
      adv_check:
        type: "string"
        enum:
        - "ssl-hello-chk"
        - "smtpchk"
        - "ldap-check"
        - "mysql-check"
        - "pgsql-check"
        - "tcp-check"
        - "redis-check"
        - "httpchk"
        x-display-name: "Advanced Check"
      allbackups:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "All Backups"
      balance:
        $ref: "#/definitions/balance"
      bind_process:
        type: "string"
        pattern: "^[^\\s]+$"
      check_timeout:
        type: "integer"
        x-nullable: true
      checkcache:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Checkcache"
      compression:
        $ref: "#/definitions/compression"
      connect_timeout:
        type: "integer"
        x-nullable: true
      cookie:
        $ref: "#/definitions/cookie"
      default_server:
        $ref: "#/definitions/default_server"
      description:
        type: "string"
        x-display-name: "Description"
      disabled:
        type: "boolean"
      dynamic_cookie_key:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          cookie:
            dynamic:
              value: true
      email_alert:
        $ref: "#/definitions/email_alert"
      enabled:
        type: "boolean"
      error_files:
        type: "array"
        items:
          $ref: "#/definitions/errorfile"
        x-omitempty: true
        x-go-name: "ErrorFiles"
      errorfiles_from_http_errors:
        type: "array"
        items:
          $ref: "#/definitions/errorfiles"
        x-omitempty: true
        x-go-name: "ErrorFilesFromHTTPErrors"
      errorloc302:
        $ref: "#/definitions/errorloc"
      errorloc303:
        $ref: "#/definitions/errorloc"
      external_check:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "External Check"
      external_check_command:
        type: "string"
        pattern: "^[^\\s]+$"
        x-display-name: "External Check Command"
      external_check_path:
        type: "string"
        pattern: "^[^\\s]+$"
        x-display-name: "External Check Path"
      force_persist:
        $ref: "#/definitions/backend_force_persist"
      forwardfor:
        $ref: "#/definitions/forwardfor"
      from:
        type: "string"
        pattern: "^[A-Za-z0-9-_.:]+$"
      fullconn:
        type: "integer"
        x-nullable: true
      h1_case_adjust_bogus_server:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-dependency:
          mode:
            value: "http"
        x-display-name: "H1 Adjust Bogus Server"
      hash_type:
        $ref: "#/definitions/hash_type"
      http-buffer-request:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-dependency:
          mode:
            value: "http"
        x-display-name: "HTTP bufferrequest"
      http-check:
        $ref: "#/definitions/http_check"
      http-keep-alive:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-deprecated: true
        x-dependency:
          mode:
            value: "http"
        x-display-name: "HTTP keep-alive"
      http-no-delay:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-dependency:
          mode:
            value: "http"
        x-display-name: "HTTP low interactive delays"
      http-server-close:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-deprecated: true
        x-dependency:
          mode:
            value: "http"
        x-display-name: "HTTP server close"
      http-use-htx:
        type: "string"
        pattern: "^[^\\s]+$"
        enum:
        - "enabled"
        - "disabled"
        x-dependency:
          mode:
            value: "http"
      http_connection_mode:
        type: "string"
        enum:
        - "httpclose"
        - "http-server-close"
        - "http-keep-alive"
        x-dependency:
          mode:
            value: "http"
      http_keep_alive_timeout:
        type: "integer"
        x-dependency:
          mode:
            value: "http"
        x-nullable: true
      http_pretend_keepalive:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-dependency:
          mode:
            value: "http"
      http_proxy:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-dependency:
          mode:
            value: "http"
        x-display-name: "HTTP proxy mode"
      http_request_timeout:
        type: "integer"
        x-dependency:
          mode:
            value: "http"
        x-nullable: true
      http_restrict_req_hdr_names:
        type: "string"
        enum:
        - "preserve"
        - "delete"
        - "reject"
        x-display-name: "Restrict HTTP Request Header Names"
      http_reuse:
        type: "string"
        enum:
        - "aggressive"
        - "always"
        - "never"
        - "safe"
        x-dependency:
          mode:
            value: "http"
      http_send_name_header:
        type: "string"
        x-display-name: "The header string to use to send the server name"
        x-nullable: true
      httpchk_params:
        $ref: "#/definitions/httpchk_params"
      httpclose:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-deprecated: true
        x-dependency:
          mode:
            value: "http"
        x-display-name: "HTTP connection closing"
      id:
        type: "integer"
        x-nullable: true
      ignore_persist:
        $ref: "#/definitions/backend_force_persist"
      independent_streams:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Independent Streams"
      load_server_state_from_file:
        type: "string"
        enum:
        - "global"
        - "local"
        - "none"
      log_health_checks:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Log Health Checks"
      log_tag:
        type: "string"
        pattern: "^[^\\s]+$"
      max_keep_alive_queue:
        type: "integer"
        x-display-name: "Maximum keep alive queue"
        x-nullable: true
      mode:
        type: "string"
        enum:
        - "http"
        - "tcp"
        - "log"
      mysql_check_params:
        $ref: "#/definitions/mysql_check_params"
      name:
        type: "string"
        pattern: "^[A-Za-z0-9-_.:]+$"
        x-nullable: false
      nolinger:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Nolinger"
      originalto:
        $ref: "#/definitions/originalto"
      persist:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Persist"
      persist_rule:
        $ref: "#/definitions/persist_rule"
      pgsql_check_params:
        $ref: "#/definitions/pgsql_check_params"
      prefer_last_server:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Prefer Last Server"
      queue_timeout:
        type: "integer"
        x-nullable: true
      redispatch:
        $ref: "#/definitions/redispatch"
      retries:
        type: "integer"
        x-nullable: true
      retry_on:
        type: "string"
        x-display-name: "Retry on"
      server_fin_timeout:
        type: "integer"
        x-nullable: true
      server_state_file_name:
        type: "string"
        x-display-name: "Server state file"
      server_timeout:
        type: "integer"
        x-nullable: true
      smtpchk_params:
        $ref: "#/definitions/smtpchk_params"
      source:
        $ref: "#/definitions/source"
      splice_auto:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Splice Auto"
      splice_request:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Splice Request"
      splice_response:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Splice Response"
      spop_check:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Spop Check"
      srvtcpka:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-dependency:
          mode:
            value: "tcp"
        x-display-name: "Server TCP Keep Alive"
      srvtcpka_cnt:
        type: "integer"
        x-display-name: "Srvtcpka Cnt"
        x-nullable: true
      srvtcpka_idle:
        type: "integer"
        x-display-name: "Srvtcpka Idle"
        x-nullable: true
      srvtcpka_intvl:
        type: "integer"
        x-display-name: "Srvtcpka Intvl"
        x-nullable: true
      stats_options:
        $ref: "#/definitions/stats_options"
      stick_table:
        $ref: "#/definitions/config_stick_table"
      tarpit_timeout:
        type: "integer"
        x-nullable: true
      tcp_smart_connect:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Tcp Smart Connect"
      tcpka:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-dependency:
          mode:
            value: "tcp"
        x-display-name: "TCP Keep Alive"
      transparent:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Transparent"
      tunnel_timeout:
        type: "integer"
        x-nullable: true
      use_fcgi_app:
        type: "string"
        x-display-name: "FastCGI application"
    title: "Backend"
    description: "HAProxy backend configuration"
    example:
      adv_check: "httpchk"
      balance:
        algorithm: "roundrobin"
      forwardfor:
        enabled: "enabled"
      httpchk_params:
        method: "GET"
        uri: "/check"
        version: "HTTP/1.1"
      mode: "http"
      name: "test_backend"
    additionalProperties: false
  backends:
    title: "Backends"
    type: "array"
    description: "HAProxy backends array"
    items:
      $ref: "#/definitions/backend"
  ring:
    type: "object"
    required:
    - "name"
    properties:
      description:
        type: "string"
        x-display-name: "The description is an optional description string of the\
          \ ring"
      format:
        type: "string"
        enum:
        - "iso"
        - "local"
        - "raw"
        - "rfc3164"
        - "rfc5424"
        - "short"
        - "priority"
        - "timed"
        x-display-name: "Format used to store events into the ring buffer"
      maxlen:
        type: "integer"
        x-display-name: "The maximum length of an event message stored into the ring"
        x-nullable: true
      name:
        type: "string"
        pattern: "^[A-Za-z0-9-_.:]+$"
        x-nullable: false
      size:
        type: "integer"
        x-display-name: "Optional size in bytes for the ring-buffer"
        x-nullable: true
      timeout_connect:
        type: "integer"
        x-nullable: true
      timeout_server:
        type: "integer"
        x-nullable: true
    title: "Ring"
    description: "HAProxy ring configuration"
    example:
      size: 6
      timeout_server: 5
      format: "iso"
      name: "name"
      timeout_connect: 1
      description: "description"
      maxlen: 0
    additionalProperties: false
  rings:
    title: "Rings"
    type: "array"
    description: "HAProxy rings array"
    items:
      $ref: "#/definitions/ring"
  dgram_bind:
    type: "object"
    properties:
      address:
        type: "string"
        pattern: "^[^\\s]+$"
      interface:
        type: "string"
      name:
        type: "string"
        pattern: "^[^\\s]+$"
        x-nullable: false
      namespace:
        type: "string"
      port:
        type: "integer"
        minimum: 1
        maximum: 65535
        x-nullable: true
      port-range-end:
        type: "integer"
        minimum: 1
        maximum: 65535
        x-nullable: true
      transparent:
        type: "boolean"
    title: "Dgram Bind"
    description: "HAProxy log forward dgram bind configuration"
    example:
      port-range-end: 39501
      address: "address"
      port: 5249
      name: "name"
      namespace: "namespace"
      interface: "interface"
      transparent: true
  dgram_binds:
    title: "Dgram Bind"
    type: "array"
    description: "HAProxy dgram bind array"
    items:
      $ref: "#/definitions/dgram_bind"
  log_forward:
    type: "object"
    required:
    - "name"
    properties:
      backlog:
        type: "integer"
        x-nullable: true
      maxconn:
        type: "integer"
        x-nullable: true
      name:
        type: "string"
        pattern: "^[A-Za-z0-9-_.:]+$"
        x-nullable: false
      timeout_client:
        type: "integer"
        x-nullable: true
    title: "Log Forward"
    description: "HAProxy log forward configuration"
    example:
      backlog: 0
      maxconn: 6
      name: "name"
      timeout_client: 1
    additionalProperties: false
  log_forwards:
    title: "Log Forwards"
    type: "array"
    description: "HAProxy log forwards array"
    items:
      $ref: "#/definitions/log_forward"
  userlist:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        pattern: "^[A-Za-z0-9-_.:]+$"
        x-nullable: false
    title: "Userlist"
    description: "HAProxy configuration of access control"
    example:
      name: "name"
  userlists:
    title: "Userlists"
    type: "array"
    description: "HAProxy userlists array"
    items:
      $ref: "#/definitions/userlist"
  user:
    required:
    - "password"
    - "secure_password"
    - "username"
    properties:
      groups:
        type: "string"
        x-nullable: false
      password:
        type: "string"
        x-nullable: false
      secure_password:
        type: "boolean"
      username:
        type: "string"
        pattern: "^[A-Za-z0-9-_.:]+$"
        x-nullable: false
    title: "User"
    description: "HAProxy userlist user"
    example:
      password: "password"
      groups: "groups"
      secure_password: true
      username: "username"
  users:
    title: "Users"
    type: "array"
    description: "HAProxy userlist users array"
    items:
      $ref: "#/definitions/user"
  group:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        pattern: "^[A-Za-z0-9-_.:]+$"
        x-nullable: false
      users:
        type: "string"
        x-nullable: false
    title: "Group"
    description: "HAProxy userlist group"
    example:
      name: "name"
      users: "users"
  groups:
    title: "Groups"
    type: "array"
    description: "HAProxy userlist groups array"
    items:
      $ref: "#/definitions/group"
  mailers_section:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        pattern: "^[A-Za-z0-9-_]+$"
        x-nullable: false
      timeout:
        type: "integer"
        minimum: 0
        x-display-name: "Timeout to send an email in milliseconds"
        x-nullable: true
    title: "Mailers Section"
    description: "A list of SMTP servers used by HAProxy to send emails."
    example:
      name: "name"
      timeout: 0
    additionalProperties: false
  mailers_sections:
    title: "Mailers Sections"
    type: "array"
    description: "HAProxy mailers_section array"
    items:
      $ref: "#/definitions/mailers_section"
  mailer_entry:
    type: "object"
    required:
    - "address"
    - "name"
    - "port"
    properties:
      address:
        type: "string"
        pattern: "^\\S+$"
        x-nullable: false
      name:
        type: "string"
        pattern: "^[A-Za-z0-9-_]+$"
        x-nullable: false
      port:
        type: "integer"
        minimum: 1
        maximum: 65535
        x-nullable: false
    title: "Mailer Entry"
    description: "Mailer entry of a Mailers section"
    example:
      address: "address"
      port: 5249
      name: "name"
  mailer_entries:
    title: "Mailer Entries"
    type: "array"
    description: "HAProxy mailer entries"
    items:
      $ref: "#/definitions/mailer_entry"
  peer_section:
    type: "object"
    required:
    - "name"
    properties:
      default_bind:
        $ref: "#/definitions/default_bind"
      default_server:
        $ref: "#/definitions/default_server"
      disabled:
        type: "boolean"
      enabled:
        type: "boolean"
      name:
        type: "string"
        pattern: "^[A-Za-z0-9-_.:]+$"
        x-nullable: false
      shards:
        type: "integer"
        description: "In some configurations, one would like to distribute the stick-table\
          \ contents\nto some peers in place of sending all the stick-table contents\
          \ to each peer\ndeclared in the \"peers\" section. In such cases, \"shards\"\
          \ specifies the\nnumber of peer involved in this stick-table contents distribution."
    title: "Peer Section"
    description: "HAProxy peer_section configuration"
    example:
      shards: 0
      name: "name"
      disabled: true
      default_server: ""
      default_bind: ""
      enabled: true
    additionalProperties: false
  peer_sections:
    title: "Peer_Section"
    type: "array"
    description: "HAProxy peer_section array"
    items:
      $ref: "#/definitions/peer_section"
  peer_entry:
    type: "object"
    required:
    - "address"
    - "name"
    - "port"
    properties:
      address:
        type: "string"
        pattern: "^[^\\s]+$"
      name:
        type: "string"
        pattern: "^[A-Za-z0-9-_.:]+$"
        x-nullable: false
      port:
        type: "integer"
        minimum: 1
        maximum: 65535
        x-nullable: true
      shard:
        type: "integer"
    title: "Peer Entry"
    description: "Peer Entry from peers table"
    example:
      address: "address"
      port: 5249
      name: "name"
      shard: 6
  peer_entries:
    title: "Peer entries"
    type: "array"
    description: "HAProxy peer entries array"
    items:
      $ref: "#/definitions/peer_entry"
  http_errors_section:
    type: "object"
    required:
    - "error_files"
    - "name"
    properties:
      error_files:
        type: "array"
        items:
          $ref: "#/definitions/errorfile"
        x-go-name: "ErrorFiles"
      name:
        type: "string"
        pattern: "^[A-Za-z0-9-_]+$"
        x-nullable: false
    title: "http-errors section"
    description: "A globally declared group of HTTP errors"
    example:
      error_files:
      - code: 400
        name: "/etc/haproxy/errorfiles/site1/400.http"
      - code: 404
        name: "/etc/haproxy/errorfiles/site1/404.http"
      name: "website-1"
    additionalProperties: false
  http_errors_sections:
    title: "http-errors sections"
    type: "array"
    description: "An array of HAProxy http-error sections"
    items:
      $ref: "#/definitions/http_errors_section"
  bind:
    title: "Bind"
    allOf:
    - $ref: "#/definitions/bind_params"
    - type: "object"
      properties:
        address:
          type: "string"
          example: "127.0.0.1"
          pattern: "^[^\\s]+$"
        port:
          type: "integer"
          example: 80
          minimum: 1
          maximum: 65535
          x-nullable: true
        port-range-end:
          type: "integer"
          example: 81
          minimum: 1
          maximum: 65535
          x-nullable: true
      additionalProperties: false
    description: "HAProxy frontend bind configuration"
  binds:
    title: "Binds"
    type: "array"
    description: "HAProxy frontend binds array (corresponds to bind directives)"
    items:
      $ref: "#/definitions/bind"
  server:
    title: "Server"
    allOf:
    - $ref: "#/definitions/server_params"
    - type: "object"
      required:
      - "address"
      - "name"
      properties:
        address:
          type: "string"
          pattern: "^[^\\s]+$"
          x-nullable: false
        id:
          type: "integer"
          x-nullable: true
        name:
          type: "string"
          pattern: "^[^\\s]+$"
          x-nullable: false
        port:
          type: "integer"
          minimum: 1
          maximum: 65535
          x-nullable: true
    description: "HAProxy backend server configuration"
    example:
      address: "10.1.1.1"
      name: "www"
      port: 8080
  servers:
    title: "Servers"
    type: "array"
    description: "HAProxy backend servers array"
    items:
      $ref: "#/definitions/server"
  server_template:
    title: "Server template"
    allOf:
    - $ref: "#/definitions/server_params"
    - type: "object"
      required:
      - "fqdn"
      - "num_or_range"
      - "prefix"
      properties:
        fqdn:
          type: "string"
          x-nullable: false
        id:
          type: "integer"
          x-nullable: true
        num_or_range:
          type: "string"
          x-nullable: false
        port:
          type: "integer"
          minimum: 1
          maximum: 65535
          x-nullable: true
        prefix:
          type: "string"
          pattern: "^[^\\s]+$"
          x-nullable: false
    description: "Set a template to initialize servers with shared parameters."
    example:
      fqdn: "google.com"
      num_or_range: "1-3"
      port: 80
      prefix: "srv"
  server_templates:
    title: "Server templates"
    type: "array"
    description: "HAProxy backend server templates array"
    items:
      $ref: "#/definitions/server_template"
  config_stick_table:
    type: "object"
    properties:
      expire:
        type: "integer"
        x-nullable: true
      keylen:
        type: "integer"
        x-display-name: "Key Length"
        x-nullable: true
      nopurge:
        type: "boolean"
        x-display-name: "No Purge"
      peers:
        type: "string"
        pattern: "^[^\\s]+$"
      size:
        type: "integer"
        x-nullable: true
      srvkey:
        type: "string"
        enum:
        - "addr"
        - "name"
        x-nullable: true
      store:
        type: "string"
        pattern: "^[^\\s]+$"
      type:
        type: "string"
        enum:
        - "ip"
        - "ipv6"
        - "integer"
        - "string"
        - "binary"
      write_to:
        type: "string"
        pattern: "^[^\\s]+$"
        x-nullable: true
  http_request_rule:
    type: "object"
    required:
    - "index"
    - "type"
    properties:
      acl_file:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value:
            - "add-acl"
            - "del-acl"
        x-display-name: "ACL File"
      acl_keyfmt:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value:
            - "add-acl"
            - "del-acl"
        x-display-name: "ACL Key Format"
      auth_realm:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            value: "auth"
        x-display-name: "Authentication Realm"
      bandwidth_limit_limit:
        type: "string"
        x-dependency:
          type:
            value: "set-bandwidth-limit"
        x-display-name: "Standard HAProxy expression"
      bandwidth_limit_name:
        type: "string"
        x-dependency:
          type:
            value: "set-bandwidth-limit"
        x-display-name: "Bandwidth limit name"
      bandwidth_limit_period:
        type: "string"
        x-dependency:
          type:
            value: "set-bandwidth-limit"
        x-display-name: "Standard HAProxy expression"
      cache_name:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value: "cache-use"
        x-display-name: "Cache Name"
      capture_id:
        type: "integer"
        x-dependency:
          type:
            value: "capture"
        x-display-name: "Capture SlotID"
        x-nullable: true
      capture_len:
        type: "integer"
        x-dependency:
          type:
            required: true
            value: "capture"
        x-display-name: "Capture Len"
      capture_sample:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            value: "capture"
        x-display-name: "Capture Sample"
      cond:
        type: "string"
        enum:
        - "if"
        - "unless"
        x-display-name: "Condition"
      cond_test:
        type: "string"
        x-dynamic-enum:
          freeFormat: true
          operation: "getACLs"
          property: "acl_name"
        x-dependency:
          cond:
            required: true
        x-display-name: "Condition Test"
      deny_status:
        type: "integer"
        minimum: 200
        maximum: 599
        x-dependency:
          type:
            value:
            - "deny"
            - "tarpit"
        x-nullable: true
      expr:
        type: "string"
        x-dependency:
          type:
            required: true
            value:
            - "do-resolve"
            - "set-bc-mark"
            - "set-bc-tos"
            - "set-dst"
            - "set-dst-port"
            - "set-fc-mark"
            - "set-fc-tos"
            - "set-priority-class"
            - "set-priority-offset"
            - "set-src"
            - "set-src-port"
        x-display-name: "Standard HAProxy expression"
      hdr_format:
        type: "string"
        x-dependency:
          type:
            required: true
            value:
            - "replace-header"
            - "replace-value"
            - "set-header"
            - "add-header"
        x-display-name: "Header Format"
      hdr_match:
        type: "string"
        x-dependency:
          type:
            required: true
            value:
            - "replace-header"
            - "replace-value"
        x-display-name: "Header Match"
      hdr_method:
        type: "string"
        x-dependency:
          type:
            value:
            - "del-header"
        x-display-name: "Header Match Method"
      hdr_name:
        type: "string"
        x-dependency:
          type:
            required: true
            value:
            - "add-header"
            - "replace-header"
            - "del-header"
            - "set-header"
            - "replace-value"
        x-display-name: "Header Name"
      hint_format:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value: "early-hint"
        x-display-name: "Hint Format"
      hint_name:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value: "early-hint"
        x-display-name: "Hint Name"
      index:
        type: "integer"
        x-nullable: true
      log_level:
        type: "string"
        enum:
        - "emerg"
        - "alert"
        - "crit"
        - "err"
        - "warning"
        - "notice"
        - "info"
        - "debug"
        - "silent"
        x-dependency:
          type:
            required: true
            value: "set-log-level"
      lua_action:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value: "lua"
      lua_params:
        type: "string"
        x-dependency:
          type:
            value: "lua"
      map_file:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value:
            - "set-map"
            - "del-map"
      map_keyfmt:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value:
            - "set-map"
            - "del-map"
        x-display-name: "Map Key Format"
      map_valuefmt:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value: "set-map"
        x-display-name: "Map Value Format"
      mark_value:
        type: "string"
        pattern: "^(0x[0-9A-Fa-f]+|[0-9]+)$"
        x-dependency:
          type:
            required: true
            value: "set-mark"
        x-display-name: "Mark Value"
      method_fmt:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value: "set-method"
      nice_value:
        type: "integer"
        minimum: -1024
        maximum: 1024
        x-dependency:
          type:
            required: true
            value: "set-nice"
        x-display-name: "Nice Value"
        x-nullable: false
      normalizer:
        type: "string"
        enum:
        - "fragment-encode"
        - "fragment-strip"
        - "path-merge-slashes"
        - "path-strip-dot"
        - "path-strip-dotdot"
        - "percent-decode-unreserved"
        - "percent-to-upercase"
        - "query-sort-by-name"
        x-dependency:
          type:
            required: true
            value: "normalize-uri"
      normalizer_full:
        type: "boolean"
        x-dependency:
          normalizer:
            value: "path-strip-dotdot"
          type:
            value: "normalize-uri"
      normalizer_strict:
        type: "boolean"
        x-dependency:
          normalizer:
            value:
            - "percent-decode-unreserved"
            - "percent-to-upercase"
          type:
            value: "normalize-uri"
      path_fmt:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value:
            - "set-path"
            - "set-pathq"
            - "replace-path"
            - "replace-pathq"
      path_match:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value:
            - "set-path"
            - "set-pathq"
            - "replace-path"
            - "replace-pathq"
      protocol:
        type: "string"
        enum:
        - "ipv4"
        - "ipv6"
        x-dependency:
          type:
            required: false
            value: "do-resolve"
        x-display-name: "Protocol"
      query-fmt:
        type: "string"
        x-dependency:
          type:
            required: true
            value: "set-query"
      redir_code:
        type: "integer"
        x-dependency:
          type:
            value: "redirect"
        x-display-name: "Redirect Code"
        x-nullable: true
      redir_option:
        type: "string"
        x-dependency:
          type:
            value: "redirect"
        x-display-name: "Redirect Option"
      redir_type:
        type: "string"
        enum:
        - "location"
        - "prefix"
        - "scheme"
        x-dependency:
          type:
            required: true
            value: "redirect"
        x-display-name: "Redirect Type"
      redir_value:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value: "redirect"
        x-display-name: "Redirect Value"
      resolvers:
        type: "string"
        x-dependency:
          type:
            required: true
            value: "do-resolve"
        x-display-name: "Resolvers"
      return_content:
        type: "string"
        x-dependency:
          return_content_format:
            required: true
            value:
            - "errofile"
            - "errorfiles"
            - "file"
            - "lf-file"
            - "string"
            - "lf-string"
      return_content_format:
        type: "string"
        enum:
        - "default-errorfiles"
        - "errorfile"
        - "errorfiles"
        - "file"
        - "lf-file"
        - "string"
        - "lf-string"
        x-dependency:
          type:
            value:
            - "deny"
            - "tarpit"
            - "return"
      return_content_type:
        type: "string"
        x-dependency:
          type:
            value:
            - "deny"
            - "tarpit"
            - "return"
        x-display-name: "Return content type"
        x-nullable: true
      return_hdrs:
        type: "array"
        items:
          $ref: "#/definitions/return_header"
        x-omitempty: true
        x-dependency:
          return_content_format:
            value:
            - "file"
            - "lf-file"
            - "string"
            - "lf-string"
        x-go-name: "ReturnHeaders"
      return_status_code:
        type: "integer"
        minimum: 200
        maximum: 599
        x-dependency:
          type:
            value: "return"
        x-display-name: "Return Error Code"
        x-nullable: true
      sc_expr:
        type: "string"
        x-dependency:
          type:
            required: true
            value:
            - "sc-add-gpc"
            - "sc-set-gpt0"
        x-display-name: "ScSet Expression Value"
      sc_id:
        type: "integer"
        x-dependency:
          type:
            required: true
            value:
            - "sc-add-gpc"
            - "sc-inc-gpc"
            - "sc-inc-gpc0"
            - "sc-inc-gpc1"
            - "sc-set-gpt0"
      sc_idx:
        type: "integer"
        x-dependency:
          type:
            required: true
            value:
            - "sc-add-gpc"
            - "sc-inc-gpc"
      sc_int:
        type: "integer"
        x-dependency:
          type:
            required: true
            value:
            - "sc-add-gpc"
            - "sc-set-gpt0"
        x-display-name: "ScSet Integer Value"
        x-nullable: true
      service_name:
        type: "string"
        x-dependency:
          type:
            required: true
            value: "use-service"
      spoe_engine:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value: "send-spoe-group"
        x-display-name: "SPOE Engine"
      spoe_group:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value: "send-spoe-group"
        x-display-name: "SPOE Group"
      strict_mode:
        type: "string"
        enum:
        - "on"
        - "off"
        x-dependency:
          type:
            required: true
            value: "strict-mode"
      timeout:
        type: "string"
        x-dependency:
          type:
            required: true
            value: "set-timeout"
      timeout_type:
        type: "string"
        enum:
        - "server"
        - "tunnel"
        - "client"
        x-dependency:
          type:
            required: true
            value: "set-timeout"
      tos_value:
        type: "string"
        pattern: "^(0x[0-9A-Fa-f]+|[0-9]+)$"
        x-dependency:
          type:
            required: true
            value: "set-tos"
        x-display-name: "Tos Value"
      track-sc0-key:
        type: "string"
        pattern: "^[^\\s]+$"
        x-deprecated: true
        x-dependency:
          type:
            required: true
            value: "track-sc0"
        x-display-name: "track-sc0 Key"
      track-sc0-table:
        type: "string"
        pattern: "^[^\\s]+$"
        x-deprecated: true
        x-dependency:
          type:
            value: "track-sc0"
        x-display-name: "track-sc0 Table"
      track-sc1-key:
        type: "string"
        pattern: "^[^\\s]+$"
        x-deprecated: true
        x-dependency:
          type:
            required: true
            value: "track-sc1"
        x-display-name: "track-sc1 Key"
      track-sc1-table:
        type: "string"
        pattern: "^[^\\s]+$"
        x-deprecated: true
        x-dependency:
          type:
            value: "track-sc1"
        x-display-name: "track-sc1 Table"
      track-sc2-key:
        type: "string"
        pattern: "^[^\\s]+$"
        x-deprecated: true
        x-dependency:
          type:
            required: true
            value: "track-sc2"
        x-display-name: "track-sc2 Key"
      track-sc2-table:
        type: "string"
        pattern: "^[^\\s]+$"
        x-deprecated: true
        x-dependency:
          type:
            value: "track-sc2"
        x-display-name: "track-sc2 Table"
      track_sc_key:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value: "track-sc"
        x-display-name: "track-sc Key"
      track_sc_stick_counter:
        type: "integer"
        x-dependency:
          type:
            value: "track-sc"
        x-display-name: "track-sc StickCounter"
        x-nullable: true
      track_sc_table:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            value: "track-sc"
        x-display-name: "track-sc Table"
      type:
        type: "string"
        enum:
        - "add-acl"
        - "add-header"
        - "allow"
        - "auth"
        - "cache-use"
        - "capture"
        - "del-acl"
        - "del-header"
        - "del-map"
        - "deny"
        - "disable-l7-retry"
        - "do-resolve"
        - "early-hint"
        - "lua"
        - "normalize-uri"
        - "redirect"
        - "reject"
        - "replace-header"
        - "replace-path"
        - "replace-pathq"
        - "replace-uri"
        - "replace-value"
        - "return"
        - "sc-add-gpc"
        - "sc-inc-gpc"
        - "sc-inc-gpc0"
        - "sc-inc-gpc1"
        - "sc-set-gpt0"
        - "send-spoe-group"
        - "set-bc-mark"
        - "set-bc-tos"
        - "set-dst"
        - "set-dst-port"
        - "set-fc-mark"
        - "set-fc-tos"
        - "set-header"
        - "set-log-level"
        - "set-map"
        - "set-mark"
        - "set-method"
        - "set-nice"
        - "set-path"
        - "set-pathq"
        - "set-priority-class"
        - "set-priority-offset"
        - "set-query"
        - "set-src"
        - "set-src-port"
        - "set-timeout"
        - "set-tos"
        - "set-uri"
        - "set-var"
        - "silent-drop"
        - "strict-mode"
        - "tarpit"
        - "track-sc0"
        - "track-sc1"
        - "track-sc2"
        - "track-sc"
        - "unset-var"
        - "use-service"
        - "wait-for-body"
        - "wait-for-handshake"
        - "set-bandwidth-limit"
        x-nullable: false
      uri-fmt:
        type: "string"
        x-dependency:
          type:
            required: true
            value:
            - "set-uri"
            - "replace-uri"
      uri-match:
        type: "string"
        x-dependency:
          type:
            required: true
            value: "replace-uri"
      var_expr:
        type: "string"
        x-dependency:
          type:
            required: true
            value: "set-var"
        x-display-name: "Var Expression"
      var_format:
        type: "string"
        x-dependency:
          type:
            required: true
            value: "set-var-fmt"
        x-display-name: "Var Format"
      var_name:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value:
            - "set-var"
            - "set-var-fmt"
            - "do-resolve"
            - "unset-var"
      var_scope:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value:
            - "set-var"
            - "set-var-fmt"
            - "unset-var"
      wait_at_least:
        type: "integer"
        x-dependency:
          type:
            value: "wait-for-body"
        x-nullable: true
      wait_time:
        type: "integer"
        x-dependency:
          type:
            required: true
            value: "wait-for-body"
        x-nullable: true
    title: "HTTP Request Rule"
    description: "HAProxy HTTP request rule configuration (corresponds to http-request\
      \ directives)"
    example:
      cond: "unless"
      cond_test: "{ src 192.168.0.0/16 }"
      hdr_format: "%T"
      hdr_name: "X-Haproxy-Current-Date"
      index: 0
      type: "add-header"
    additionalProperties: false
  http_request_rules:
    title: "HTTP Request Rules Array"
    type: "array"
    description: "HAProxy HTTP request rules array (corresponds to http-request directives)"
    items:
      $ref: "#/definitions/http_request_rule"
  http_response_rule:
    type: "object"
    required:
    - "index"
    - "type"
    properties:
      acl_file:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value:
            - "add-acl"
            - "del-acl"
      acl_keyfmt:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value:
            - "add-acl"
            - "del-acl"
        x-display-name: "ACK Key Format"
      bandwidth_limit_limit:
        type: "string"
        x-dependency:
          type:
            value: "set-bandwidth-limit"
        x-display-name: "Standard HAProxy expression"
      bandwidth_limit_name:
        type: "string"
        x-dependency:
          type:
            value: "set-bandwidth-limit"
        x-display-name: "Bandwidth limit name"
      bandwidth_limit_period:
        type: "string"
        x-dependency:
          type:
            value: "set-bandwidth-limit"
        x-display-name: "Standard HAProxy expression"
      cache_name:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value: "cache-store"
        x-display-name: "Cache Name"
      capture_id:
        type: "integer"
        x-dependency:
          type:
            required: true
            value: "capture"
        x-display-name: "Capture SlotID"
        x-nullable: true
      capture_sample:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value: "capture"
        x-display-name: "Capture Sample"
      cond:
        type: "string"
        enum:
        - "if"
        - "unless"
        x-display-name: "Condition"
      cond_test:
        type: "string"
        x-dynamic-enum:
          freeFormat: true
          operation: "getACLs"
          property: "acl_name"
        x-dependency:
          cond:
            required: true
        x-display-name: "Condition Test"
      deny_status:
        type: "integer"
        minimum: 200
        maximum: 599
        x-dependency:
          type:
            value: "deny"
        x-nullable: true
      expr:
        type: "string"
        x-dependency:
          type:
            required: true
            value:
            - "set-fc-mark"
            - "set-fc-tos"
        x-display-name: "Standard HAProxy expression"
      hdr_format:
        type: "string"
        x-dependency:
          type:
            required: true
            value:
            - "replace-header"
            - "replace-value"
            - "set-header"
            - "add-header"
        x-display-name: "Header Format"
      hdr_match:
        type: "string"
        x-dependency:
          type:
            required: true
            value:
            - "replace-header"
            - "replace-value"
        x-display-name: "Header Match"
      hdr_method:
        type: "string"
        x-dependency:
          type:
            value:
            - "del-header"
        x-display-name: "Header Match Method"
      hdr_name:
        type: "string"
        x-dependency:
          type:
            required: true
            value:
            - "add-header"
            - "replace-header"
            - "del-header"
            - "set-header"
            - "replace-value"
        x-display-name: "Header Name"
      index:
        type: "integer"
        x-nullable: true
      log_level:
        type: "string"
        enum:
        - "emerg"
        - "alert"
        - "crit"
        - "err"
        - "warning"
        - "notice"
        - "info"
        - "debug"
        - "silent"
        x-dependency:
          type:
            required: true
            value: "set-log-level"
      lua_action:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value: "lua"
      lua_params:
        type: "string"
        x-dependency:
          type:
            value: "lua"
      map_file:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value:
            - "set-map"
            - "del-map"
      map_keyfmt:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value:
            - "set-map"
            - "del-map"
        x-display-name: "Map Key Format"
      map_valuefmt:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value: "set-map"
        x-display-name: "Map Value Format"
      mark_value:
        type: "string"
        pattern: "^(0x[0-9A-Fa-f]+|[0-9]+)$"
        x-dependency:
          type:
            required: true
            value: "set-mark"
        x-display-name: "Mark Value"
      nice_value:
        type: "integer"
        minimum: -1024
        maximum: 1024
        x-dependency:
          type:
            required: true
            value: "set-nice"
        x-display-name: "Nice Value"
        x-nullable: false
      redir_code:
        type: "integer"
        x-dependency:
          type:
            value: "redirect"
        x-display-name: "Redirect Code"
        x-nullable: true
      redir_option:
        type: "string"
        x-dependency:
          type:
            required: true
            value: "redirect"
        x-display-name: "Redirect Option"
      redir_type:
        type: "string"
        enum:
        - "location"
        - "prefix"
        - "scheme"
        x-dependency:
          type:
            required: true
            value: "redirect"
        x-display-name: "Redirect Type"
      redir_value:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value: "redirect"
        x-display-name: "Redirect Value"
      return_content:
        type: "string"
        x-dependency:
          return_content_format:
            required: true
            value:
            - "errofile"
            - "errorfiles"
            - "file"
            - "lf-file"
            - "string"
            - "lf-string"
      return_content_format:
        type: "string"
        enum:
        - "default-errorfiles"
        - "errorfile"
        - "errorfiles"
        - "file"
        - "lf-file"
        - "string"
        - "lf-string"
        x-dependency:
          type:
            value:
            - "deny"
            - "return"
      return_content_type:
        type: "string"
        x-dependency:
          type:
            value:
            - "deny"
            - "return"
        x-display-name: "Return content type"
        x-nullable: true
      return_hdrs:
        type: "array"
        items:
          $ref: "#/definitions/return_header"
        x-omitempty: true
        x-dependency:
          return_content_format:
            value:
            - "file"
            - "lf-file"
            - "string"
            - "lf-string"
        x-go-name: "ReturnHeaders"
      return_status_code:
        type: "integer"
        minimum: 200
        maximum: 599
        x-dependency:
          type:
            value: "return"
        x-display-name: "Return Error Code"
        x-nullable: true
      sc_expr:
        type: "string"
        x-dependency:
          type:
            required: true
            value:
            - "sc-add-gpc"
            - "sc-set-gpt0"
        x-display-name: "ScSet Expression Value"
      sc_id:
        type: "integer"
        x-dependency:
          type:
            required: true
            value:
            - "sc-add-gpc"
            - "sc-inc-gpc"
            - "sc-inc-gpc0"
            - "sc-inc-gpc1"
            - "sc-set-gpt0"
      sc_idx:
        type: "integer"
        x-dependency:
          type:
            required: true
            value:
            - "sc-add-gpc"
            - "sc-inc-gpc"
      sc_int:
        type: "integer"
        x-dependency:
          type:
            required: true
            value:
            - "sc-add-gpc"
            - "sc-set-gpt0"
        x-display-name: "ScSet Integer Value"
        x-nullable: true
      spoe_engine:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value: "send-spoe-group"
      spoe_group:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value: "send-spoe-group"
      status:
        type: "integer"
        minimum: 100
        maximum: 999
        x-dependency:
          type:
            required: true
            value: "set-status"
        x-nullable: false
      status_reason:
        type: "string"
        x-dependency:
          type:
            value: "set-status"
      strict_mode:
        type: "string"
        enum:
        - "on"
        - "off"
        x-dependency:
          type:
            required: true
            value: "strict-mode"
      timeout:
        type: "string"
        x-dependency:
          type:
            required: true
            value: "set-timeout"
      timeout_type:
        type: "string"
        enum:
        - "server"
        - "tunnel"
        - "client"
        x-dependency:
          type:
            required: true
            value: "set-timeout"
      tos_value:
        type: "string"
        pattern: "^(0x[0-9A-Fa-f]+|[0-9]+)$"
        x-dependency:
          type:
            required: true
            value: "set-tos"
        x-display-name: "Tos Value"
      track-sc0-key:
        type: "string"
        pattern: "^[^\\s]+$"
        x-deprecated: true
        x-dependency:
          type:
            required: true
            value: "track-sc0"
        x-display-name: "track-sc0 Key"
      track-sc0-table:
        type: "string"
        pattern: "^[^\\s]+$"
        x-deprecated: true
        x-dependency:
          type:
            value: "track-sc0"
        x-display-name: "track-sc0 Table"
      track-sc1-key:
        type: "string"
        pattern: "^[^\\s]+$"
        x-deprecated: true
        x-dependency:
          type:
            required: true
            value: "track-sc1"
        x-display-name: "track-sc1 Key"
      track-sc1-table:
        type: "string"
        pattern: "^[^\\s]+$"
        x-deprecated: true
        x-dependency:
          type:
            value: "track-sc1"
        x-display-name: "track-sc1 Table"
      track-sc2-key:
        type: "string"
        pattern: "^[^\\s]+$"
        x-deprecated: true
        x-dependency:
          type:
            required: true
            value: "track-sc2"
        x-display-name: "track-sc2 Key"
      track-sc2-table:
        type: "string"
        pattern: "^[^\\s]+$"
        x-deprecated: true
        x-dependency:
          type:
            value: "track-sc2"
        x-display-name: "track-sc2 Table"
      track_sc_key:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value: "track-sc"
        x-display-name: "track-sc Key"
      track_sc_stick_counter:
        type: "integer"
        x-dependency:
          type:
            value: "track-sc"
        x-display-name: "track-sc StickCounter"
        x-nullable: true
      track_sc_table:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            value: "track-sc"
        x-display-name: "track-sc Table"
      type:
        type: "string"
        enum:
        - "add-acl"
        - "add-header"
        - "allow"
        - "cache-store"
        - "capture"
        - "del-acl"
        - "del-header"
        - "del-map"
        - "deny"
        - "lua"
        - "redirect"
        - "replace-header"
        - "replace-value"
        - "return"
        - "sc-add-gpc"
        - "sc-inc-gpc"
        - "sc-inc-gpc0"
        - "sc-inc-gpc1"
        - "sc-set-gpt0"
        - "send-spoe-group"
        - "set-fc-mark"
        - "set-fc-tos"
        - "set-header"
        - "set-log-level"
        - "set-map"
        - "set-mark"
        - "set-nice"
        - "set-status"
        - "set-timeout"
        - "set-tos"
        - "set-var"
        - "set-var-fmt"
        - "silent-drop"
        - "strict-mode"
        - "track-sc0"
        - "track-sc1"
        - "track-sc2"
        - "track-sc"
        - "unset-var"
        - "wait-for-body"
        - "set-bandwidth-limit"
        x-nullable: false
      var_expr:
        type: "string"
        x-dependency:
          type:
            required: true
            value: "set-var"
        x-display-name: "Var Expression"
      var_format:
        type: "string"
        x-dependency:
          type:
            required: true
            value: "set-var-fmt"
        x-display-name: "Var Format"
      var_name:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value:
            - "set-var"
            - "set-var-fmt"
            - "unset-var"
      var_scope:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value:
            - "set-var"
            - "set-var-fmt"
            - "unset-var"
      wait_at_least:
        type: "integer"
        x-dependency:
          type:
            value: "wait-for-body"
        x-nullable: true
      wait_time:
        type: "integer"
        x-dependency:
          type:
            required: true
            value: "wait-for-body"
        x-nullable: true
    title: "HTTP Response Rule"
    description: "HAProxy HTTP response rule configuration (corresponds to http-response\
      \ directives)"
    example:
      cond: "unless"
      cond_test: "{ src 192.168.0.0/16 }"
      hdr_format: "%T"
      hdr_name: "X-Haproxy-Current-Date"
      index: 0
      type: "add-header"
    additionalProperties: false
  http_response_rules:
    title: "HTTP Response Rules Array"
    type: "array"
    description: "HAProxy HTTP response rules array (corresponds to http-response\
      \ directives)"
    items:
      $ref: "#/definitions/http_response_rule"
  http_after_response_rule:
    type: "object"
    required:
    - "index"
    - "type"
    properties:
      acl_file:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value:
            - "del-acl"
      acl_keyfmt:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value:
            - "del-acl"
        x-display-name: "ACK Key Format"
      cond:
        type: "string"
        enum:
        - "if"
        - "unless"
        x-display-name: "Condition"
      cond_test:
        type: "string"
        x-dynamic-enum:
          freeFormat: true
          operation: "getACLs"
          property: "acl_name"
        x-dependency:
          cond:
            required: true
        x-display-name: "Condition Test"
      hdr_format:
        type: "string"
        x-dependency:
          type:
            required: true
            value:
            - "replace-header"
            - "replace-value"
            - "set-header"
            - "add-header"
        x-display-name: "Header Format"
      hdr_match:
        type: "string"
        x-dependency:
          type:
            required: true
            value:
            - "replace-header"
            - "replace-value"
        x-display-name: "Header Match"
      hdr_method:
        type: "string"
        x-dependency:
          type:
            value:
            - "del-header"
        x-display-name: "Header Match Method"
      hdr_name:
        type: "string"
        x-dependency:
          type:
            required: true
            value:
            - "add-header"
            - "replace-header"
            - "del-header"
            - "set-header"
            - "replace-value"
        x-display-name: "Header Name"
      index:
        type: "integer"
        x-nullable: true
      log_level:
        type: "string"
        enum:
        - "emerg"
        - "alert"
        - "crit"
        - "err"
        - "warning"
        - "notice"
        - "info"
        - "debug"
        - "silent"
        x-dependency:
          type:
            required: true
            value: "set-log-level"
      map_file:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value:
            - "set-map"
            - "del-map"
      map_keyfmt:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value:
            - "set-map"
            - "del-map"
        x-display-name: "Map Key Format"
      map_valuefmt:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value: "set-map"
        x-display-name: "Map Value Format"
      sc_expr:
        type: "string"
        x-dependency:
          type:
            required: true
            value:
            - "sc-add-gpc"
            - "sc-set-gpt0"
        x-display-name: "ScSet Expression Value"
      sc_id:
        type: "integer"
        x-dependency:
          type:
            required: true
            value:
            - "sc-add-gpc"
            - "sc-inc-gpc"
            - "sc-inc-gpc0"
            - "sc-inc-gpc1"
            - "sc-set-gpt0"
      sc_idx:
        type: "integer"
        x-dependency:
          type:
            required: true
            value:
            - "sc-add-gpc"
            - "sc-inc-gpc"
      sc_int:
        type: "integer"
        x-dependency:
          type:
            required: true
            value:
            - "sc-add-gpc"
            - "sc-set-gpt0"
        x-display-name: "ScSet Integer Value"
        x-nullable: true
      status:
        type: "integer"
        minimum: 100
        maximum: 999
        x-dependency:
          type:
            required: true
            value: "set-status"
        x-nullable: false
      status_reason:
        type: "string"
        x-dependency:
          type:
            value: "set-status"
      strict_mode:
        type: "string"
        enum:
        - "on"
        - "off"
        x-dependency:
          type:
            required: true
            value: "strict-mode"
      type:
        type: "string"
        enum:
        - "add-header"
        - "allow"
        - "del-acl"
        - "del-header"
        - "del-map"
        - "replace-header"
        - "replace-value"
        - "sc-add-gpc"
        - "sc-inc-gpc"
        - "sc-inc-gpc0"
        - "sc-inc-gpc1"
        - "sc-set-gpt0"
        - "set-header"
        - "set-log-level"
        - "set-map"
        - "set-status"
        - "set-var"
        - "strict-mode"
        - "unset-var"
        x-nullable: false
      var_expr:
        type: "string"
        x-dependency:
          type:
            required: true
            value: "set-var"
        x-display-name: "Var Expression"
      var_name:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value:
            - "set-var"
            - "unset-var"
      var_scope:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value:
            - "set-var"
            - "unset-var"
    title: "HTTP after Response Rule"
    description: "HAProxy HTTP after response rule configuration (corresponds to http-after-response\
      \ directives)"
    example:
      cond: "unless"
      cond_test: "{ src 192.168.0.0/16 }"
      hdr_format: "max-age=31536000"
      hdr_name: "Strict-Transport-Security"
      index: 0
      type: "set-header"
    additionalProperties: false
  http_after_response_rules:
    title: "HTTP After Response Rules Array"
    type: "array"
    description: "HAProxy HTTP after response rules array (corresponds to http-after-response\
      \ directives)"
    items:
      $ref: "#/definitions/http_after_response_rule"
  http_error_rule:
    type: "object"
    required:
    - "index"
    - "status"
    - "type"
    properties:
      index:
        type: "integer"
        x-nullable: true
      return_content:
        type: "string"
        x-dependency:
          return_content_format:
            required: true
            value:
            - "errofile"
            - "errorfiles"
            - "file"
            - "lf-file"
            - "string"
            - "lf-string"
      return_content_format:
        type: "string"
        enum:
        - "default-errorfiles"
        - "errorfile"
        - "errorfiles"
        - "file"
        - "lf-file"
        - "string"
        - "lf-string"
        x-dependency:
          type:
            value: "status"
      return_content_type:
        type: "string"
        x-dependency:
          type:
            value: "status"
        x-display-name: "Return content type"
        x-nullable: true
      return_hdrs:
        type: "array"
        items:
          $ref: "#/definitions/return_header"
        x-omitempty: true
        x-dependency:
          return_content_format:
            value:
            - "file"
            - "lf-file"
            - "string"
            - "lf-string"
        x-go-name: "ReturnHeaders"
      status:
        type: "integer"
        x-dependency:
          type:
            required: true
            value: "status"
        x-nullable: false
      type:
        type: "string"
        enum:
        - "status"
        x-nullable: false
    title: "HTTP Error Rule"
    description: "HAProxy HTTP error rule configuration (corresponds to http-error\
      \ directives)"
    example:
      index: 0
      status: 425
      type: "status"
    additionalProperties: false
  http_error_rules:
    title: "HTTP Error Rules Array"
    type: "array"
    description: "HAProxy HTTP error rules array (corresponds to http-error directives)"
    items:
      $ref: "#/definitions/http_error_rule"
  http_check:
    type: "object"
    required:
    - "index"
    - "type"
    properties:
      addr:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            value: "connect"
        x-nullable: false
      alpn:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            value: "connect"
        x-display-name: "ALPN Protocols"
      body:
        type: "string"
        x-dependency:
          type:
            value: "send"
      body_log_format:
        type: "string"
        x-dependency:
          type:
            value: "send"
      check_comment:
        type: "string"
        x-dependency:
          type:
            value:
            - "comment"
            - "connect"
            - "expect"
            - "send"
        x-nullable: false
      default:
        type: "boolean"
        x-dependency:
          type:
            value: "connect"
      error_status:
        type: "string"
        enum:
        - "L7OKC"
        - "L7RSP"
        - "L7STS"
        - "L6RSP"
        - "L4CON"
        x-dependency:
          type:
            value: "expect"
      exclamation_mark:
        type: "boolean"
        x-dependency:
          type:
            value: "expect"
        x-display-name: "Expect Exclamation Mark"
      headers:
        type: "array"
        items:
          $ref: "#/definitions/return_header"
        x-omitempty: true
        x-dependency:
          type:
            value: "send"
        x-go-name: "CheckHeaders"
      index:
        type: "integer"
        x-nullable: true
      linger:
        type: "boolean"
        x-dependency:
          type:
            value: "connect"
      match:
        type: "string"
        pattern: "^[^\\s]+$"
        enum:
        - "status"
        - "rstatus"
        - "hdr"
        - "fhdr"
        - "string"
        - "rstring"
        x-dependency:
          type:
            required: true
            value: "expect"
        x-display-name: "Expect Match"
      method:
        type: "string"
        enum:
        - "HEAD"
        - "PUT"
        - "POST"
        - "GET"
        - "TRACE"
        - "PATCH"
        - "DELETE"
        - "CONNECT"
        - "OPTIONS"
        x-dependency:
          type:
            value: "send"
      min_recv:
        type: "integer"
        x-dependency:
          type:
            value: "expect"
        x-nullable: true
      ok_status:
        type: "string"
        enum:
        - "L7OK"
        - "L7OKC"
        - "L6OK"
        - "L4OK"
        x-dependency:
          type:
            value: "expect"
      on_error:
        type: "string"
        x-dependency:
          type:
            value: "expect"
      on_success:
        type: "string"
        x-dependency:
          type:
            value: "expect"
      pattern:
        type: "string"
        x-dependency:
          type:
            required: true
            value: "expect"
      port:
        type: "integer"
        minimum: 1
        maximum: 65535
        x-dependency:
          type:
            value: "connect"
        x-nullable: true
      port_string:
        type: "string"
        x-dependency:
          type:
            value: "connect"
      proto:
        type: "string"
        x-dependency:
          type:
            value: "connect"
        x-nullable: false
      send_proxy:
        type: "boolean"
        x-dependency:
          type:
            value: "connect"
      sni:
        type: "string"
        x-dependency:
          type:
            value: "connect"
      ssl:
        type: "boolean"
        x-dependency:
          type:
            value: "connect"
      status-code:
        type: "string"
        x-dependency:
          type:
            value: "expect"
      tout_status:
        type: "string"
        enum:
        - "L7TOUT"
        - "L6TOUT"
        - "L4TOUT"
        x-dependency:
          type:
            value: "expect"
      type:
        type: "string"
        enum:
        - "comment"
        - "connect"
        - "disable-on-404"
        - "expect"
        - "send"
        - "send-state"
        - "set-var"
        - "set-var-fmt"
        - "unset-var"
        x-nullable: false
      uri:
        type: "string"
        x-dependency:
          type:
            value: "send"
      uri_log_format:
        type: "string"
        x-dependency:
          type:
            value: "send"
      var_expr:
        type: "string"
        x-dependency:
          type:
            required: true
            value:
            - "set-var"
        x-display-name: "Var Expression"
      var_format:
        type: "string"
        x-dependency:
          type:
            required: true
            value:
            - "set-var-fmt"
        x-display-name: "Var Format"
      var_name:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value:
            - "set-var"
            - "set-var-fmt"
            - "unset-var"
      var_scope:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value:
            - "set-var"
            - "set-var-fmt"
            - "unset-var"
      version:
        type: "string"
        x-dependency:
          type:
            value: "send"
      via_socks4:
        type: "boolean"
        x-dependency:
          type:
            value: "connect"
    title: "HTTP Check"
    example:
      min_recv: 9
      via_socks4: true
      alpn: "alpn"
      uri_log_format: "uri_log_format"
      pattern: "pattern"
      body: "body"
      type: "comment"
      ssl: true
      var_format: "var_format"
      default: true
      exclamation_mark: true
      on_error: "on_error"
      error_status: "L7OKC"
      addr: "addr"
      send_proxy: true
      var_name: "var_name"
      headers:
      - name: "name"
        fmt: "fmt"
      - name: "name"
        fmt: "fmt"
      port_string: "port_string"
      method: "HEAD"
      linger: true
      on_success: "on_success"
      match: "status"
      index: 5
      uri: "uri"
      version: "version"
      check_comment: "check_comment"
      sni: "sni"
      body_log_format: "body_log_format"
      status-code: "status-code"
      ok_status: "L7OK"
      tout_status: "L7TOUT"
      port: 61401
      proto: "proto"
      var_expr: "var_expr"
      var_scope: "var_scope"
  http_checks:
    title: "HTTP Checks Array"
    type: "array"
    items:
      $ref: "#/definitions/http_check"
  tcp_request_rule:
    type: "object"
    required:
    - "index"
    - "type"
    properties:
      action:
        type: "string"
        enum:
        - "accept"
        - "attach-srv"
        - "capture"
        - "do-resolve"
        - "expect-netscaler-cip"
        - "expect-proxy"
        - "reject"
        - "sc-add-gpc"
        - "sc-inc-gpc"
        - "sc-inc-gpc0"
        - "sc-inc-gpc1"
        - "sc-set-gpt0"
        - "send-spoe-group"
        - "set-dst-port"
        - "set-dst"
        - "set-priority"
        - "set-src"
        - "set-var"
        - "silent-drop"
        - "track-sc0"
        - "track-sc1"
        - "track-sc2"
        - "track-sc"
        - "unset-var"
        - "use-service"
        - "lua"
        - "set-bandwidth-limit"
        - "set-src-port"
        - "set-mark"
        - "set-tos"
        - "set-var-fmt"
        - "set-log-level"
        - "set-nice"
        - "switch-mode"
        - "set-bc-mark"
        - "set-bc-tos"
        - "set-fc-mark"
        - "set-fc-tos"
        x-dependency:
          type:
            required: true
            value:
            - "connection"
            - "content"
            - "session"
        x-nullable: false
      bandwidth_limit_limit:
        type: "string"
        x-dependency:
          action:
            value: "set-bandwidth-limit"
          type:
            value: "content"
        x-display-name: "Standard HAProxy expression"
      bandwidth_limit_name:
        type: "string"
        x-dependency:
          action:
            value: "set-bandwidth-limit"
          type:
            value: "content"
        x-display-name: "Bandwidth limit name"
      bandwidth_limit_period:
        type: "string"
        x-dependency:
          action:
            value: "set-bandwidth-limit"
          type:
            value: "content"
        x-display-name: "Standard HAProxy expression"
      capture_len:
        type: "integer"
        x-dependency:
          action:
            required: true
            value: "capture"
          type:
            required: true
            value:
            - "connection"
            - "content"
        x-display-name: "Capture Length"
      capture_sample:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          action:
            required: true
            value: "capture"
          type:
            required: true
            value:
            - "connection"
            - "content"
        x-display-name: "Capture Sample"
      cond:
        type: "string"
        enum:
        - "if"
        - "unless"
        x-dependency:
          type:
            value:
            - "connection"
            - "content"
            - "session"
        x-display-name: "Condition"
      cond_test:
        type: "string"
        x-dynamic-enum:
          freeFormat: true
          operation: "getACLs"
          property: "acl_name"
        x-dependency:
          cond:
            required: true
          type:
            required: true
            value:
            - "connection"
            - "content"
            - "session"
        x-display-name: "Condition Test"
      expr:
        type: "string"
        x-dependency:
          action:
            required: true
            value:
            - "do-resolve"
            - "set-var"
            - "set-src"
            - "set-priority"
            - "set-dst"
            - "set-dst-port"
            - "set-src-port"
            - "set-bc-mark"
            - "set-bc-tos"
            - "set-fc-mark"
            - "set-fc-tos"
          type:
            value:
            - "session"
            - "connection"
            - "content"
        x-display-name: "Standard HAProxy expression"
      gpt_value:
        type: "string"
        x-dependency:
          action:
            required: true
            value: "sc-set-gpt0"
          type:
            required: true
            value:
            - "connection"
            - "content"
            - "session"
        x-display-name: "Sticky counter value"
      index:
        type: "integer"
        x-nullable: true
      log_level:
        type: "string"
        enum:
        - "emerg"
        - "alert"
        - "crit"
        - "err"
        - "warning"
        - "notice"
        - "info"
        - "debug"
        - "silent"
        x-dependency:
          action:
            required: true
            value: "set-log-level"
          type:
            value: "content"
      lua_action:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          action:
            required: true
            value: "lua"
          type:
            value:
            - "connection"
            - "content"
        x-display-name: "Lua action name"
      lua_params:
        type: "string"
        x-dependency:
          action:
            value: "lua"
          type:
            value:
            - "connection"
            - "content"
        x-display-name: "Lua action params"
      mark_value:
        type: "string"
        pattern: "^(0x[0-9A-Fa-f]+|[0-9]+)$"
        x-dependency:
          action:
            required: true
            value: "set-mark"
          type:
            value:
            - "connection"
            - "content"
        x-display-name: "Mark Value"
      nice_value:
        type: "integer"
        minimum: -1024
        maximum: 1024
        x-dependency:
          action:
            required: true
            value: "set-nice"
          type:
            value: "content"
        x-display-name: "Nice Value"
        x-nullable: false
      priority_type:
        type: "string"
        enum:
        - "class"
        - "offset"
        x-dependency:
          action:
            required: true
            value: "set-priority"
          type:
            value:
            - "content"
      resolve_protocol:
        type: "string"
        enum:
        - "ipv4"
        - "ipv6"
        x-dependency:
          action:
            required: false
            value: "do-resolve"
          type:
            required: true
            value:
            - "content"
        x-display-name: "Protocol"
      resolve_resolvers:
        type: "string"
        x-dependency:
          action:
            required: true
            value: "do-resolve"
          type:
            required: true
            value:
            - "content"
        x-display-name: "Resolvers"
      resolve_var:
        type: "string"
        x-dependency:
          action:
            required: true
            value: "do-resolve"
          type:
            required: true
            value:
            - "content"
        x-display-name: "Variable name"
      sc_idx:
        type: "string"
        x-dependency:
          action:
            required: true
            value: []
          type:
            required: true
            value:
            - "connection"
            - "content"
            - "session"
        x-display-name: "Sticky counter Index"
      sc_inc_id:
        type: "string"
        x-dependency:
          action:
            required: true
            value:
            - "sc-add-gpc"
            - "sc-inc-gpc"
            - "sc-inc-gpc0"
            - "sc-inc-gpc1"
            - "sc-set-gpt0"
          type:
            required: true
            value:
            - "connection"
            - "content"
            - "session"
        x-display-name: "Sticky counter ID"
      sc_int:
        type: "integer"
        x-dependency:
          type:
            required: true
            value:
            - "sc-add-gpc"
            - "sc-set-gpt0"
        x-display-name: "ScSet Integer Value"
        x-nullable: true
      server_name:
        type: "string"
        x-dependency:
          action:
            required: true
            value: "attach-srv"
          type:
            value: "session"
        x-display-name: "Server name"
      service_name:
        type: "string"
        x-dependency:
          action:
            required: true
            value: "use-service"
          type:
            value: "content"
        x-display-name: "Service name"
      spoe_engine_name:
        type: "string"
        x-dependency:
          action:
            required: true
            value: "send-spoe-group"
          type:
            required: true
            value:
            - "content"
        x-display-name: "Engine name"
      spoe_group_name:
        type: "string"
        x-dependency:
          action:
            required: true
            value: "send-spoe-group"
          type:
            required: true
            value:
            - "content"
        x-display-name: "Group name"
      switch_mode_proto:
        type: "string"
        x-dependency:
          action:
            required: true
            value: "switch-mode"
          type:
            value: "content"
        x-display-name: "Switch Mode Proto"
      timeout:
        type: "integer"
        x-dependency:
          type:
            required: true
            value: "inspect-delay"
        x-nullable: true
      tos_value:
        type: "string"
        pattern: "^(0x[0-9A-Fa-f]+|[0-9]+)$"
        x-dependency:
          action:
            required: true
            value: "set-tos"
          type:
            value:
            - "connection"
            - "content"
        x-display-name: "Tos Value"
      track_key:
        type: "string"
        x-dependency:
          action:
            required: true
            value:
            - "track-sc0"
            - "track-sc1"
            - "track-sc2"
            - "track-sc"
          type:
            value:
            - "session"
            - "connection"
            - "content"
        x-display-name: "Sample expression rule"
      track_stick_counter:
        type: "integer"
        x-dependency:
          action:
            required: false
            value:
            - "track-sc0"
            - "track-sc1"
            - "track-sc2"
            - "track-sc"
          type:
            value:
            - "session"
            - "connection"
            - "content"
        x-display-name: "Track Stick Counter"
        x-nullable: true
      track_table:
        type: "string"
        x-dependency:
          action:
            required: false
            value:
            - "track-sc0"
            - "track-sc1"
            - "track-sc2"
            - "track-sc"
          type:
            value:
            - "session"
            - "connection"
            - "content"
        x-display-name: "Optional table name"
      type:
        type: "string"
        enum:
        - "connection"
        - "content"
        - "inspect-delay"
        - "session"
        x-nullable: false
      var_format:
        type: "string"
        x-dependency:
          action:
            required: true
            value: "set-var-fmt"
          type:
            value:
            - "connection"
            - "content"
        x-display-name: "Var Format"
      var_name:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          action:
            required: true
            value:
            - "set-var"
            - "unset-var"
            - "set-var-fmt"
          type:
            value:
            - "session"
            - "connection"
            - "content"
        x-display-name: "Variable name"
      var_scope:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          action:
            required: true
            value:
            - "set-var"
            - "unset-var"
            - "set-var-fmt"
          type:
            value:
            - "session"
            - "connection"
            - "content"
        x-display-name: "Variable scope"
    title: "TCP Request Rule"
    description: "HAProxy TCP Request Rule configuration (corresponds to tcp-request)"
    example:
      cond: "if"
      cond_test: "{ src 192.168.0.0/16 }"
      index: 0
      type: "connection"
    additionalProperties: false
  tcp_request_rules:
    title: "TCP Request Rules Array"
    type: "array"
    description: "HAProxy TCP request rules array (corresponds to tcp-request directive)"
    items:
      $ref: "#/definitions/tcp_request_rule"
  tcp_response_rule:
    type: "object"
    required:
    - "index"
    - "type"
    properties:
      action:
        type: "string"
        enum:
        - "accept"
        - "reject"
        - "lua"
        - "set-bandwidth-limit"
        - "close"
        - "sc-add-gpc"
        - "sc-inc-gpc"
        - "sc-inc-gpc0"
        - "sc-inc-gpc1"
        - "sc-set-gpt0"
        - "send-spoe-group"
        - "set-log-level"
        - "set-mark"
        - "set-nice"
        - "set-tos"
        - "set-fc-mark"
        - "set-fc-tos"
        - "silent-drop"
        - "unset-var"
        x-dependency:
          type:
            required: true
            value: "content"
        x-nullable: false
      bandwidth_limit_limit:
        type: "string"
        x-dependency:
          action:
            value: "set-bandwidth-limit"
          type:
            value: "content"
        x-display-name: "Standard HAProxy expression"
      bandwidth_limit_name:
        type: "string"
        x-dependency:
          action:
            value: "set-bandwidth-limit"
          type:
            value: "content"
        x-display-name: "Bandwidth limit name"
      bandwidth_limit_period:
        type: "string"
        x-dependency:
          action:
            value: "set-bandwidth-limit"
          type:
            value: "content"
        x-display-name: "Standard HAProxy expression"
      cond:
        type: "string"
        enum:
        - "if"
        - "unless"
        x-dependency:
          type:
            value: "content"
        x-display-name: "Condition"
      cond_test:
        type: "string"
        x-dynamic-enum:
          freeFormat: true
          operation: "getACLs"
          property: "acl_name"
        x-dependency:
          cond:
            required: true
          type:
            value: "content"
        x-display-name: "Condition Test"
      expr:
        type: "string"
        x-dependency:
          action:
            required: true
            value:
            - "set-src-port"
            - "sc-set-gpt0"
            - "set-fc-mark"
            - "set-fc-tos"
          type:
            value: "content"
        x-display-name: "Standard HAProxy expression"
      index:
        type: "integer"
        x-nullable: true
      log_level:
        type: "string"
        enum:
        - "emerg"
        - "alert"
        - "crit"
        - "err"
        - "warning"
        - "notice"
        - "info"
        - "debug"
        - "silent"
        x-dependency:
          action:
            required: true
            value: "set-log-level"
          type:
            value: "content"
      lua_action:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          action:
            required: true
            value: "lua"
          type:
            value: "content"
        x-display-name: "Lua action name"
      lua_params:
        type: "string"
        x-dependency:
          action:
            value: "lua"
          type:
            value: "content"
        x-display-name: "Lua action params"
      mark_value:
        type: "string"
        pattern: "^(0x[0-9A-Fa-f]+|[0-9]+)$"
        x-dependency:
          action:
            required: true
            value: "set-mark"
          type:
            value: "content"
        x-display-name: "Mark Value"
      nice_value:
        type: "integer"
        minimum: -1024
        maximum: 1024
        x-dependency:
          action:
            required: true
            value: "set-nice"
          type:
            value: "content"
        x-display-name: "Nice Value"
        x-nullable: false
      sc_expr:
        type: "string"
        x-dependency:
          action:
            required: true
            value:
            - "sc-add-gpc"
            - "sc-inc-gpc"
          type:
            value: "content"
        x-display-name: "ScSet Expression Value"
      sc_id:
        type: "integer"
        x-dependency:
          action:
            required: true
            value:
            - "sc-add-gpc"
            - "sc-inc-gpc"
            - "sc-inc-gpc0"
            - "sc-inc-gpc1"
            - "sc-set-gpt0"
          type:
            value: "content"
      sc_idx:
        type: "integer"
        x-dependency:
          action:
            required: true
            value:
            - "sc-add-gpc"
            - "sc-inc-gpc"
          type:
            value: "content"
      sc_int:
        type: "integer"
        x-dependency:
          action:
            required: true
            value:
            - "sc-add-gpc"
            - "sc-inc-gpc"
          type:
            value: "content"
        x-display-name: "ScSet Integer Value"
        x-nullable: true
      spoe_engine:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          action:
            required: true
            value: "send-spoe-group"
          type:
            value: "content"
        x-display-name: "SPOE Engine"
      spoe_group:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          action:
            required: true
            value: "send-spoe-group"
          type:
            value: "content"
        x-display-name: "SPOE Group"
      timeout:
        type: "integer"
        x-dependency:
          type:
            required: true
            value: "inspect-delay"
        x-nullable: true
      tos_value:
        type: "string"
        pattern: "^(0x[0-9A-Fa-f]+|[0-9]+)$"
        x-dependency:
          action:
            required: true
            value: "set-tos"
          type:
            value: "content"
        x-display-name: "Tos Value"
      type:
        type: "string"
        enum:
        - "content"
        - "inspect-delay"
        x-nullable: false
      var_name:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          action:
            required: true
            value:
            - "unset-var"
          type:
            value: "content"
      var_scope:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          action:
            value: "unset-var"
          type:
            value: "content"
    title: "TCP Response Rule"
    description: "HAProxy TCP Response Rule configuration (corresponds to tcp-response)"
    example:
      cond: "if"
      cond_test: "{ src 192.168.0.0/16 }"
      index: 0
      type: "content"
    additionalProperties: false
  tcp_response_rules:
    title: "TCP Response Rules Array"
    type: "array"
    description: "HAProxy TCP response rules array (corresponds to tcp-response directive)"
    items:
      $ref: "#/definitions/tcp_response_rule"
  tcp_check:
    type: "object"
    required:
    - "action"
    - "index"
    properties:
      action:
        type: "string"
        enum:
        - "comment"
        - "connect"
        - "expect"
        - "send"
        - "send-lf"
        - "send-binary"
        - "send-binary-lf"
        - "set-var"
        - "set-var-fmt"
        - "unset-var"
        x-nullable: false
      addr:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          action:
            value: "connect"
        x-nullable: false
      alpn:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          action:
            value: "connect"
        x-display-name: "ALPN Protocols"
        x-nullable: false
      check_comment:
        type: "string"
        x-dependency:
          action:
            value:
            - "connect"
            - "expect"
            - "send"
            - "send-lf"
            - "send-binary"
            - "send-binary-lf"
        x-nullable: false
      data:
        type: "string"
        x-dependency:
          action:
            required: true
            value: "send"
      default:
        type: "boolean"
        x-dependency:
          action:
            value: "connect"
      error_status:
        type: "string"
        enum:
        - "L7OKC"
        - "L7RSP"
        - "L7STS"
        - "L6RSP"
        - "L4CON"
        x-dependency:
          action:
            value: "expect"
      exclamation_mark:
        type: "boolean"
        x-dependency:
          action:
            value: "expect"
        x-display-name: "Expect Exclamation Mark"
      fmt:
        type: "string"
        x-dependency:
          action:
            required: true
            value: "send-lf"
      hex_fmt:
        type: "string"
        x-dependency:
          action:
            required: true
            value: "send-binary-lf"
      hex_string:
        type: "string"
        x-dependency:
          action:
            required: true
            value: "send-binary"
      index:
        type: "integer"
        x-nullable: true
      linger:
        type: "boolean"
        x-dependency:
          action:
            value: "connect"
      log_message:
        type: "string"
        x-dependency:
          action:
            required: true
            value: "comment"
      match:
        type: "string"
        pattern: "^[^\\s]+$"
        enum:
        - "string"
        - "rstring"
        - "string-lf"
        - "binary"
        - "rbinary"
        - "binary-lf"
        x-dependency:
          action:
            required: true
            value: "expect"
        x-display-name: "Expect Match"
      min_recv:
        type: "integer"
        x-dependency:
          action:
            value: "expect"
      ok_status:
        type: "string"
        enum:
        - "L7OK"
        - "L7OKC"
        - "L6OK"
        - "L4OK"
        x-dependency:
          action:
            value: "expect"
      on_error:
        type: "string"
        x-dependency:
          action:
            value: "expect"
      on_success:
        type: "string"
        x-dependency:
          action:
            value: "expect"
      pattern:
        type: "string"
        x-dependency:
          action:
            required: true
            value: "expect"
      port:
        type: "integer"
        minimum: 1
        maximum: 65535
        x-dependency:
          action:
            value: "connect"
        x-nullable: true
      port_string:
        type: "string"
        x-dependency:
          action:
            value: "connect"
      proto:
        type: "string"
        x-dependency:
          action:
            value: "connect"
        x-nullable: false
      send_proxy:
        type: "boolean"
        x-dependency:
          action:
            value: "connect"
      sni:
        type: "string"
        x-dependency:
          action:
            value: "connect"
        x-nullable: false
      ssl:
        type: "boolean"
        x-dependency:
          action:
            value: "connect"
      status-code:
        type: "string"
        x-dependency:
          action:
            value: "expect"
      tout_status:
        type: "string"
        enum:
        - "L7TOUT"
        - "L6TOUT"
        - "L4TOUT"
        x-dependency:
          action:
            value: "expect"
      var_expr:
        type: "string"
        x-dependency:
          action:
            required: true
            value:
            - "set-var"
        x-display-name: "Var Expression"
      var_fmt:
        type: "string"
        x-dependency:
          action:
            required: true
            value:
            - "set-var-fmt"
        x-display-name: "Var Log format"
      var_name:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          action:
            required: true
            value:
            - "set-var"
            - "set-var-fmt"
            - "unset-var"
      var_scope:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          action:
            required: true
            value:
            - "set-var"
            - "set-var-fmt"
            - "unset-var"
      via_socks4:
        type: "boolean"
        x-dependency:
          action:
            value: "connect"
    title: "TCP Check"
    example:
      hex_fmt: "hex_fmt"
      min_recv: 6
      via_socks4: true
      alpn: "alpn"
      data: "data"
      pattern: "pattern"
      fmt: "fmt"
      ssl: true
      default: true
      exclamation_mark: true
      action: "comment"
      on_error: "on_error"
      log_message: "log_message"
      error_status: "L7OKC"
      addr: "addr"
      hex_string: "hex_string"
      send_proxy: true
      var_name: "var_name"
      port_string: "port_string"
      linger: true
      on_success: "on_success"
      match: "string"
      index: 0
      var_fmt: "var_fmt"
      check_comment: "check_comment"
      sni: "sni"
      status-code: "status-code"
      ok_status: "L7OK"
      tout_status: "L7TOUT"
      port: 9607
      proto: "proto"
      var_expr: "var_expr"
      var_scope: "var_scope"
  tcp_checks:
    title: "TCP Checks Array"
    type: "array"
    items:
      $ref: "#/definitions/tcp_check"
  backend_switching_rule:
    type: "object"
    required:
    - "index"
    - "name"
    properties:
      cond:
        type: "string"
        enum:
        - "if"
        - "unless"
        x-display-name: "Condition"
      cond_test:
        type: "string"
        x-dynamic-enum:
          freeFormat: true
          operation: "getACLs"
          property: "acl_name"
        x-dependency:
          cond:
            required: true
        x-display-name: "Condition Test"
      index:
        type: "integer"
        x-nullable: true
      name:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dynamic-enum:
          operation: "getBackends"
          property: "name"
        x-display-name: "Backend Name"
        x-nullable: false
    title: "Backend Switching Rule"
    description: "HAProxy backend switching rule configuration (corresponds to use_backend\
      \ directive)"
    example:
      cond: "if"
      cond_test: "{ req_ssl_sni -i www.example.com }"
      index: 0
      name: "test_backend"
    additionalProperties: false
  backend_switching_rules:
    title: "Backend Switching Rules Array"
    type: "array"
    description: "HAProxy backend switching rules array (corresponds to use_backend\
      \ directives)"
    items:
      $ref: "#/definitions/backend_switching_rule"
  server_switching_rule:
    type: "object"
    required:
    - "index"
    - "target_server"
    properties:
      cond:
        type: "string"
        enum:
        - "if"
        - "unless"
        x-display-name: "Condition"
      cond_test:
        type: "string"
        x-dynamic-enum:
          freeFormat: true
          operation: "getACLs"
          property: "acl_name"
        x-dependency:
          cond:
            required: true
        x-display-name: "Condition Test"
      index:
        type: "integer"
        x-nullable: true
      target_server:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dynamic-enum:
          operation: "getServers"
          property: "name"
        x-nullable: false
    title: "Server Switching Rule"
    description: "HAProxy server switching rule configuration (corresponds to use-server\
      \ directive)"
    example:
      cond: "if"
      cond_test: "{ req_ssl_sni -i www.example.com }"
      index: 0
      target_server: "www"
    additionalProperties: false
  server_switching_rules:
    title: "Server Switching Rules Array"
    type: "array"
    description: "HAProxy backend server switching rules array (corresponds to use-server\
      \ directives)"
    items:
      $ref: "#/definitions/server_switching_rule"
  filter:
    type: "object"
    required:
    - "index"
    - "type"
    properties:
      app_name:
        type: "string"
        description: "Name of the fcgi-app section this filter will use."
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value: "fcgi-app"
      bandwidth_limit_name:
        type: "string"
        description: "Filter name that will be used by 'set-bandwidth-limit' actions\
          \ to reference a specific bandwidth limitation filter"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value:
            - "bwlim-in"
            - "bwlim-out"
      cache_name:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value: "cache"
      default_limit:
        type: "integer"
        description: "The max number of bytes that can be forwarded over the period.\n\
          The value must be specified for per-stream and shared bandwidth limitation\
          \ filters.\nIt follows the HAProxy size format and is expressed in bytes."
        x-dependency:
          type:
            required: true
            value:
            - "bwlim-in"
            - "bwlim-out"
      default_period:
        type: "integer"
        description: "The default time period used to evaluate the bandwidth limitation\
          \ rate.\nIt can be specified for per-stream bandwidth limitation filters\
          \ only.\nIt follows the HAProxy time format and is expressed in milliseconds."
        x-dependency:
          default_limit:
            required: true
          type:
            required: true
            value:
            - "bwlim-in"
            - "bwlim-out"
      index:
        type: "integer"
        x-nullable: true
      key:
        type: "string"
        description: "A sample expression rule.\nIt describes what elements will be\
          \ analyzed, extracted, combined, and used to select which table entry to\
          \ update the counters.\nIt must be specified for shared bandwidth limitation\
          \ filters only."
        x-dependency:
          limit:
            required: true
          type:
            required: true
            value:
            - "bwlim-in"
            - "bwlim-out"
      limit:
        type: "integer"
        description: "The max number of bytes that can be forwarded over the period.\n\
          The value must be specified for per-stream and shared bandwidth limitation\
          \ filters.\nIt follows the HAProxy size format and is expressed in bytes."
        x-dependency:
          type:
            required: true
            value:
            - "bwlim-in"
            - "bwlim-out"
      min_size:
        type: "integer"
        description: "The optional minimum number of bytes forwarded at a time by\
          \ a stream excluding the last packet that may be smaller.\nThis value can\
          \ be specified for per-stream and shared bandwidth limitation filters.\n\
          It follows the HAProxy size format and is expressed in bytes."
        x-dependency:
          type:
            required: true
            value:
            - "bwlim-in"
            - "bwlim-out"
      spoe_config:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            required: true
            value: "spoe"
      spoe_engine:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            value: "spoe"
      table:
        type: "string"
        description: "An optional table to be used instead of the default one, which\
          \ is the stick-table declared in the current proxy.\nIt can be specified\
          \ for shared bandwidth limitation filters only."
        x-dependency:
          limit:
            required: true
          type:
            required: true
            value:
            - "bwlim-in"
            - "bwlim-out"
      trace_hexdump:
        type: "boolean"
        x-dependency:
          type:
            value: "trace"
      trace_name:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            value: "trace"
      trace_rnd_forwarding:
        type: "boolean"
        x-dependency:
          type:
            value: "trace"
        x-display-name: "Trace Random Forwarding"
      trace_rnd_parsing:
        type: "boolean"
        x-dependency:
          type:
            value: "trace"
        x-display-name: "Trace Random Parsing"
      type:
        type: "string"
        enum:
        - "trace"
        - "compression"
        - "spoe"
        - "cache"
        - "fcgi-app"
        - "bwlim-in"
        - "bwlim-out"
        x-nullable: false
    title: "Filter"
    description: "HAProxy filters"
    example:
      index: 0
      trace_name: "name"
      trace_rnd_parsing: true
      type: "trace"
    additionalProperties: false
  filters:
    title: "Filters Array"
    type: "array"
    description: "HAProxy filters array (corresponds to filter directive)"
    items:
      $ref: "#/definitions/filter"
  stick_rule:
    type: "object"
    required:
    - "index"
    - "pattern"
    - "type"
    properties:
      cond:
        type: "string"
        enum:
        - "if"
        - "unless"
        x-display-name: "Condition"
      cond_test:
        type: "string"
        x-dynamic-enum:
          freeFormat: true
          operation: "getACLs"
          property: "acl_name"
        x-dependency:
          cond:
            required: true
        x-display-name: "Condition Test"
      index:
        type: "integer"
        x-nullable: true
      pattern:
        type: "string"
        pattern: "^[^\\s]+$"
        x-nullable: false
      table:
        type: "string"
        pattern: "^[^\\s]+$"
      type:
        type: "string"
        enum:
        - "match"
        - "on"
        - "store-request"
        - "store-response"
        x-nullable: false
    title: "Stick Rule"
    description: "Define a pattern used to create an entry in a stickiness table or\
      \ matching condition or associate a user to a server."
    example:
      index: 0
      pattern: "src"
      type: "match"
    additionalProperties: false
  stick_rules:
    title: "Stick Rules Array"
    type: "array"
    description: "HAProxy backend stick rules array (corresponds to stick store-request,\
      \ stick match, stick on, stick store-response)"
    items:
      $ref: "#/definitions/stick_rule"
  log_target:
    type: "object"
    required:
    - "index"
    properties:
      address:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          global:
            required: true
            value: false
          nolog:
            required: true
            value: false
      facility:
        type: "string"
        enum:
        - "kern"
        - "user"
        - "mail"
        - "daemon"
        - "auth"
        - "syslog"
        - "lpr"
        - "news"
        - "uucp"
        - "cron"
        - "auth2"
        - "ftp"
        - "ntp"
        - "audit"
        - "alert"
        - "cron2"
        - "local0"
        - "local1"
        - "local2"
        - "local3"
        - "local4"
        - "local5"
        - "local6"
        - "local7"
        x-dependency:
          global:
            required: true
            value: false
          nolog:
            required: true
            value: false
      format:
        type: "string"
        enum:
        - "local"
        - "rfc3164"
        - "rfc5424"
        - "priority"
        - "short"
        - "timed"
        - "iso"
        - "raw"
        x-dependency:
          global:
            value: false
          nolog:
            value: false
      global:
        type: "boolean"
      index:
        type: "integer"
        x-nullable: true
      length:
        type: "integer"
        x-dependency:
          global:
            value: false
          nolog:
            value: false
      level:
        type: "string"
        enum:
        - "emerg"
        - "alert"
        - "crit"
        - "err"
        - "warning"
        - "notice"
        - "info"
        - "debug"
        x-dependency:
          global:
            value: false
          nolog:
            value: false
      minlevel:
        type: "string"
        enum:
        - "emerg"
        - "alert"
        - "crit"
        - "err"
        - "warning"
        - "notice"
        - "info"
        - "debug"
        x-dependency:
          global:
            value: false
          level:
            required: false
          nolog:
            value: false
      nolog:
        type: "boolean"
      sample_range:
        type: "string"
        x-dependency:
          global:
            value: false
          nolog:
            value: false
      sample_size:
        type: "integer"
        x-dependency:
          global:
            value: false
          nolog:
            value: false
          sample_range:
            required: true
    title: "Log Target"
    description: "Per-instance logging of events and traffic."
    example:
      nolog: true
      address: "address"
      sample_size: 1
      level: "emerg"
      minlevel: "emerg"
      sample_range: "sample_range"
      format: "local"
      length: 6
      index: 0
      global: true
      facility: "kern"
    additionalProperties: false
  log_targets:
    title: "Log Target Array"
    type: "array"
    description: "HAProxy log target array (corresponds to log directives)"
    items:
      $ref: "#/definitions/log_target"
  acl:
    type: "object"
    required:
    - "acl_name"
    - "criterion"
    - "index"
    properties:
      acl_name:
        type: "string"
        pattern: "^[^\\s]+$"
        x-nullable: false
      criterion:
        type: "string"
        pattern: "^[^\\s]+$"
        x-nullable: false
      index:
        type: "integer"
        x-nullable: true
      value:
        type: "string"
        x-nullable: false
    title: "ACL Lines"
    description: "The use of Access Control Lists (ACL) provides a flexible solution\
      \ to perform\ncontent switching and generally to take decisions based on content\
      \ extracted\nfrom the request, the response or any environmental status.\n"
    example:
      criterion: "criterion"
      acl_name: "acl_name"
      index: 0
      value: "value"
    additionalProperties: false
  acls:
    title: "ACL Lines Array"
    type: "array"
    description: "HAProxy ACL lines array (corresponds to acl directives)"
    items:
      $ref: "#/definitions/acl"
  native_stats:
    title: "Stats Array"
    type: "array"
    description: "HAProxy stats array"
    items:
      $ref: "#/definitions/native_stats_collection"
    x-omitempty: true
  native_stat:
    type: "object"
    properties:
      backend_name:
        type: "string"
        x-dependency:
          type: "server"
      name:
        type: "string"
      stats:
        $ref: "#/definitions/native_stat_stats"
      type:
        type: "string"
        enum:
        - "backend"
        - "server"
        - "frontend"
    title: "Stats"
    description: "Current stats for one object."
  native_stat_stats:
    type: "object"
    properties:
      act:
        type: "integer"
        x-dependency:
          type:
          - "server"
          - "backend"
        x-nullable: true
      addr:
        type: "string"
        x-dependency:
          type: "server"
      agent_code:
        type: "integer"
        x-dependency:
          type: "server"
        x-nullable: true
      agent_desc:
        type: "string"
        x-dependency:
          type: "server"
      agent_duration:
        type: "integer"
        x-dependency:
          type: "server"
        x-nullable: true
      agent_fall:
        type: "integer"
        x-dependency:
          type: "server"
        x-nullable: true
      agent_health:
        type: "integer"
        x-dependency:
          type: "server"
        x-nullable: true
      agent_rise:
        type: "integer"
        x-dependency:
          type: "server"
        x-nullable: true
      agent_status:
        type: "string"
        enum:
        - "UNK"
        - "INI"
        - "SOCKERR"
        - "L4OK"
        - "L4TOUT"
        - "L4CON"
        - "L7OK"
        - "L7STS"
        x-dependency:
          type: "server"
      algo:
        type: "string"
        x-dependency:
          type: "backend"
      bck:
        type: "integer"
        x-dependency:
          type:
          - "server"
          - "backend"
        x-nullable: true
      bin:
        type: "integer"
        x-nullable: true
      bout:
        type: "integer"
        x-nullable: true
      check_code:
        type: "integer"
        x-dependency:
          type: "server"
        x-nullable: true
      check_desc:
        type: "string"
        x-dependency:
          type: "server"
      check_duration:
        type: "integer"
        x-dependency:
          type: "server"
        x-nullable: true
      check_fall:
        type: "integer"
        x-dependency:
          type: "server"
        x-nullable: true
      check_health:
        type: "integer"
        x-dependency:
          type: "server"
        x-nullable: true
      check_rise:
        type: "integer"
        x-dependency:
          type: "server"
        x-nullable: true
      check_status:
        type: "string"
        enum:
        - "UNK"
        - "INI"
        - "SOCKERR"
        - "L4OK"
        - "L4TOUT"
        - "L4CON"
        - "L6OK"
        - "L6TOUT"
        - "L6RSP"
        - "L7OK"
        - "L7OKC"
        - "L7TOUT"
        - "L7RSP"
        - "L7STS"
        x-dependency:
          type: "server"
      chkdown:
        type: "integer"
        x-dependency:
          type:
          - "server"
          - "backend"
        x-nullable: true
      chkfail:
        type: "integer"
        x-dependency:
          type: "server"
        x-nullable: true
      cli_abrt:
        type: "integer"
        x-dependency:
          type:
          - "server"
          - "backend"
        x-nullable: true
      comp_byp:
        type: "integer"
        x-dependency:
          type:
          - "frontend"
          - "backend"
        x-nullable: true
      comp_in:
        type: "integer"
        x-dependency:
          type:
          - "frontend"
          - "backend"
        x-nullable: true
      comp_out:
        type: "integer"
        x-dependency:
          type:
          - "frontend"
          - "backend"
        x-nullable: true
      comp_rsp:
        type: "integer"
        x-dependency:
          type:
          - "frontend"
          - "backend"
        x-nullable: true
      conn_rate:
        type: "integer"
        x-dependency:
          type: "frontend"
        x-nullable: true
      conn_rate_max:
        type: "integer"
        x-dependency:
          type: "frontend"
        x-nullable: true
      conn_tot:
        type: "integer"
        x-dependency:
          type: "frontend"
        x-nullable: true
      cookie:
        type: "string"
        x-dependency:
          type:
          - "server"
          - "backend"
      ctime:
        type: "integer"
        x-dependency:
          type:
          - "server"
          - "backend"
        x-nullable: true
      dcon:
        type: "integer"
        x-dependency:
          type: "frontend"
        x-nullable: true
      downtime:
        type: "integer"
        x-dependency:
          type: "server"
        x-nullable: true
      dreq:
        type: "integer"
        x-dependency:
          type:
          - "frontend"
          - "backend"
        x-nullable: true
      dresp:
        type: "integer"
        x-nullable: true
      dses:
        type: "integer"
        x-dependency:
          type: "frontend"
        x-nullable: true
      econ:
        type: "integer"
        x-dependency:
          type:
          - "server"
          - "backend"
        x-nullable: true
      ereq:
        type: "integer"
        x-dependency:
          type: "frontend"
        x-nullable: true
      eresp:
        type: "integer"
        x-dependency:
          type:
          - "server"
          - "backend"
        x-nullable: true
      hanafail:
        type: "string"
        x-dependency:
          type: "server"
      hrsp_1xx:
        type: "integer"
        x-nullable: true
      hrsp_2xx:
        type: "integer"
        x-nullable: true
      hrsp_3xx:
        type: "integer"
        x-nullable: true
      hrsp_4xx:
        type: "integer"
        x-nullable: true
      hrsp_5xx:
        type: "integer"
        x-nullable: true
      hrsp_other:
        type: "integer"
        x-nullable: true
      iid:
        type: "integer"
        x-nullable: true
      intercepted:
        type: "integer"
        x-dependency:
          type:
          - "frontend"
          - "backend"
        x-nullable: true
      last_chk:
        type: "string"
        x-dependency:
          type: "server"
        x-nullable: true
      lastchg:
        type: "integer"
        x-dependency:
          type:
          - "server"
          - "backend"
        x-nullable: true
      lastsess:
        type: "integer"
        x-dependency:
          type:
          - "server"
          - "backend"
        x-nullable: true
      lbtot:
        type: "integer"
        x-dependency:
          type:
          - "server"
          - "backend"
        x-nullable: true
      mode:
        type: "string"
        enum:
        - "tcp"
        - "http"
        - "health"
        - "unknown"
      pid:
        type: "integer"
        x-nullable: true
      qcur:
        type: "integer"
        x-dependency:
          type:
          - "server"
          - "backend"
        x-nullable: true
      qlimit:
        type: "integer"
        x-dependency:
          type:
          - "server"
          - "backend"
        x-nullable: true
      qmax:
        type: "integer"
        x-dependency:
          type:
          - "server"
          - "backend"
        x-nullable: true
      qtime:
        type: "integer"
        x-dependency:
          type:
          - "server"
          - "backend"
        x-nullable: true
      rate:
        type: "integer"
        x-nullable: true
      rate_lim:
        type: "integer"
        x-dependency:
          type: "frontend"
        x-nullable: true
      rate_max:
        type: "integer"
        x-nullable: true
      req_rate:
        type: "integer"
        x-dependency:
          type: "frontend"
        x-nullable: true
      req_rate_max:
        type: "integer"
        x-dependency:
          type: "frontend"
        x-nullable: true
      req_tot:
        type: "integer"
        x-dependency:
          type:
          - "frontend"
          - "backend"
        x-nullable: true
      rtime:
        type: "integer"
        x-dependency:
          type:
          - "server"
          - "backend"
        x-nullable: true
      scur:
        type: "integer"
        x-nullable: true
      sid:
        type: "integer"
        x-dependency:
          type: "server"
        x-nullable: true
      slim:
        type: "integer"
        x-nullable: true
      smax:
        type: "integer"
        x-nullable: true
      srv_abrt:
        type: "integer"
        x-dependency:
          type:
          - "server"
          - "backend"
        x-nullable: true
      status:
        type: "string"
        enum:
        - "UP"
        - "DOWN"
        - "NOLB"
        - "MAINT"
        - "no check"
      stot:
        type: "integer"
        x-nullable: true
      throttle:
        type: "integer"
        x-dependency:
          type: "server"
        x-nullable: true
      tracked:
        type: "string"
        x-dependency:
          type: "server"
      ttime:
        type: "integer"
        x-dependency:
          type:
          - "server"
          - "backend"
        x-nullable: true
      weight:
        type: "integer"
        x-dependency:
          type:
          - "server"
          - "backend"
        x-nullable: true
      wredis:
        type: "integer"
        x-dependency:
          type:
          - "server"
          - "backend"
        x-nullable: true
      wretr:
        type: "integer"
        x-dependency:
          type:
          - "server"
          - "backend"
        x-nullable: true
    example:
      bin: 4326578
      bout: 889901290
      comp_byp: 0
      comp_in: 0
      comp_out: 0
      comp_rsp: 0
      conn_rate: 12
      conn_rate_max: 456
      conn_tot: 45682
      dcon: 0
      dreq: 4
      dresp: 1
      dses: 0
      ereq: 54
      hrsp_1xx: 0
      hrsp_2xx: 165
      hrsp_3xx: 12
      hrsp_4xx: 50
      hrsp_5xx: 4
      hrsp_other: 0
      iid: 0
      intercepted: 346
      last_chk: "L4OK in 0ms"
      mode: "http"
      pid: 3204
      rate: 64
      rate_lim: 20000
      rate_max: 4000
      req_rate: 49
      req_rate_max: 3965
      req_total: 1254786
      scur: 129
      slim: 2000
      smax: 2000
      status: "UP"
      stot: 12902
  native_stats_collection:
    type: "object"
    properties:
      error:
        type: "string"
      runtimeAPI:
        type: "string"
      stats:
        type: "array"
        items:
          $ref: "#/definitions/native_stat"
        x-omitempty: true
    title: "Stats collection"
    description: "Stats from one runtime API"
  stats_options:
    type: "object"
    properties:
      stats_admin:
        type: "boolean"
        x-display-name: "Stats Admin"
      stats_admin_cond:
        type: "string"
        enum:
        - "if"
        - "unless"
        x-dependency:
          stats_admin:
            required: true
            value: true
        x-display-name: "Stats Admin Condition"
      stats_admin_cond_test:
        type: "string"
        x-dynamic-enum:
          freeFormat: true
          operation: "getACLs"
          property: "acl_name"
        x-dependency:
          stats_admin_cond:
            required: true
        x-display-name: "Stats Admin Condition Test"
      stats_auths:
        type: "array"
        items:
          $ref: "#/definitions/stats_auth"
        x-omitempty: true
        x-display-name: "Stats Auths"
      stats_enable:
        type: "boolean"
        x-display-name: "Stats Enable"
      stats_hide_version:
        type: "boolean"
        x-display-name: "Stats Hide Version"
      stats_http_requests:
        type: "array"
        items:
          $ref: "#/definitions/stats_http_request"
        x-omitempty: true
        x-display-name: "Stats HTTP Requests"
      stats_maxconn:
        type: "integer"
        minimum: 1
      stats_realm:
        type: "boolean"
        x-display-name: "Stats Realm"
      stats_realm_realm:
        type: "string"
        x-dependency:
          stats_realm:
            required: true
            value: true
        x-nullable: true
      stats_refresh_delay:
        type: "integer"
        x-nullable: true
      stats_show_desc:
        type: "string"
        x-nullable: true
      stats_show_legends:
        type: "boolean"
        x-display-name: "Stats Show Legends"
      stats_show_modules:
        type: "boolean"
        x-display-name: "Stats Show Modules"
      stats_show_node_name:
        type: "string"
        pattern: "^[^\\s]+$"
        x-omitempty: false
        x-nullable: true
      stats_uri_prefix:
        type: "string"
        pattern: "^[^\\s]+$"
    example:
      stats_show_desc: "stats_show_desc"
      stats_admin: true
      stats_refresh_delay: 0
      stats_show_node_name: "stats_show_node_name"
      stats_admin_cond_test: "stats_admin_cond_test"
      stats_show_modules: true
      stats_admin_cond: "if"
      stats_http_requests:
      - cond_test: "cond_test"
        realm: "realm"
        cond: "cond"
        type: "allow"
      - cond_test: "cond_test"
        realm: "realm"
        cond: "cond"
        type: "allow"
      stats_show_legends: true
      stats_enable: true
      stats_uri_prefix: "stats_uri_prefix"
      stats_realm_realm: "stats_realm_realm"
      stats_realm: true
      stats_auths:
      - passwd: "passwd"
        user: "user"
      - passwd: "passwd"
        user: "user"
      stats_hide_version: true
      stats_maxconn: 1
  stats_http_request:
    type: "object"
    required:
    - "type"
    properties:
      cond:
        type: "string"
      cond_test:
        type: "string"
        x-dependency:
          cond:
            required: true
      realm:
        type: "string"
        x-dependency:
          type:
            value: "auth"
      type:
        type: "string"
        enum:
        - "allow"
        - "deny"
        - "auth"
    example:
      cond_test: "cond_test"
      realm: "realm"
      cond: "cond"
      type: "allow"
  stats_auth:
    type: "object"
    required:
    - "passwd"
    - "user"
    properties:
      passwd:
        type: "string"
      user:
        type: "string"
    example:
      passwd: "passwd"
      user: "user"
  error:
    type: "object"
    required:
    - "code"
    - "message"
    properties:
      code:
        type: "integer"
        x-nullable: true
      message:
        type: "string"
        x-nullable: true
    title: "Error"
    description: "API Error"
    additionalProperties:
      type: "string"
  endpoint:
    type: "object"
    properties:
      description:
        type: "string"
        description: "Endpoint description"
      title:
        type: "string"
        description: "Endpoint title"
      url:
        type: "string"
        description: "Path to the endpoint"
    title: "Endpoint"
    description: "Endpoint definition"
  endpoints:
    title: "Endpoints Array"
    type: "array"
    description: "Collection of endpoints"
    items:
      $ref: "#/definitions/endpoint"
  process_infos:
    title: "HAProxy Information"
    type: "array"
    description: "General HAProxy process information"
    items:
      $ref: "#/definitions/process_info"
    x-omitempty: true
  process_info:
    type: "object"
    properties:
      error:
        type: "string"
      info:
        $ref: "#/definitions/process_info_item"
      runtimeAPI:
        type: "string"
  process_info_item:
    type: "object"
    properties:
      active_peers:
        type: "integer"
        x-nullable: true
      busy_polling:
        type: "integer"
        x-nullable: true
      bytes_out_rate:
        type: "integer"
        x-nullable: true
      compress_bps_in:
        type: "integer"
        x-nullable: true
      compress_bps_out:
        type: "integer"
        x-nullable: true
      compress_bps_rate_lim:
        type: "integer"
        x-nullable: true
      conn_rate:
        type: "integer"
        x-nullable: true
      conn_rate_limit:
        type: "integer"
        x-nullable: true
      connected_peers:
        type: "integer"
        x-nullable: true
      cum_conns:
        type: "integer"
        x-nullable: true
      cum_req:
        type: "integer"
        x-nullable: true
      cum_ssl_conns:
        type: "integer"
        x-nullable: true
      curr_conns:
        type: "integer"
        x-nullable: true
      curr_ssl_conns:
        type: "integer"
        x-nullable: true
      dropped_logs:
        type: "integer"
        x-nullable: true
      failed_resolutions:
        type: "integer"
        x-nullable: true
      hard_max_conn:
        type: "integer"
        x-nullable: true
      idle_pct:
        type: "integer"
        x-nullable: true
      jobs:
        type: "integer"
        x-nullable: true
      listeners:
        type: "integer"
        x-nullable: true
      max_conn:
        type: "integer"
        x-nullable: true
      max_conn_rate:
        type: "integer"
        x-nullable: true
      max_pipes:
        type: "integer"
        x-nullable: true
      max_sess_rate:
        type: "integer"
        x-nullable: true
      max_sock:
        type: "integer"
        x-nullable: true
      max_ssl_conns:
        type: "integer"
        x-nullable: true
      max_ssl_rate:
        type: "integer"
        x-nullable: true
      max_zlib_mem_usage:
        type: "integer"
        x-nullable: true
      mem_max_mb:
        type: "integer"
        x-nullable: true
      nbthread:
        type: "integer"
        description: "Number of threads"
        x-display-name: "Number of Threads"
        x-nullable: true
      node:
        type: "string"
      pid:
        type: "integer"
        description: "Process id of the replying worker process"
        x-display-name: "PID"
        x-nullable: true
      pipes_free:
        type: "integer"
        x-nullable: true
      pipes_used:
        type: "integer"
        x-nullable: true
      pool_alloc_mb:
        type: "integer"
        x-nullable: true
      pool_failed:
        type: "integer"
        x-nullable: true
      pool_used_mb:
        type: "integer"
        x-nullable: true
      process_num:
        type: "integer"
        description: "Process number"
        x-display-name: "Process Number"
        x-nullable: true
      processes:
        type: "integer"
        description: "Number of spawned processes"
        x-display-name: "Number of processes"
        x-nullable: true
      release_date:
        type: "string"
        format: "date"
        description: "HAProxy version release date"
      run_queue:
        type: "integer"
        x-nullable: true
      sess_rate:
        type: "integer"
        x-nullable: true
      sess_rate_limit:
        type: "integer"
        x-nullable: true
      ssl_backend_key_rate:
        type: "integer"
        x-nullable: true
      ssl_backend_max_key_rate:
        type: "integer"
        x-nullable: true
      ssl_cache_lookups:
        type: "integer"
        x-nullable: true
      ssl_cache_misses:
        type: "integer"
        x-nullable: true
      ssl_frontend_key_rate:
        type: "integer"
        x-nullable: true
      ssl_frontend_max_key_rate:
        type: "integer"
        x-nullable: true
      ssl_frontend_session_reuse:
        type: "integer"
        x-nullable: true
      ssl_rate:
        type: "integer"
        x-nullable: true
      ssl_rate_limit:
        type: "integer"
        x-nullable: true
      stopping:
        type: "integer"
        x-nullable: true
      tasks:
        type: "integer"
        x-nullable: true
      total_bytes_out:
        type: "integer"
        x-nullable: true
      ulimit_n:
        type: "integer"
        x-nullable: true
      unstoppable:
        type: "integer"
        x-nullable: true
      uptime:
        type: "integer"
        description: "HAProxy uptime in s"
        x-nullable: true
      version:
        type: "string"
        description: "HAProxy version string"
      zlib_mem_usage:
        type: "integer"
        x-nullable: true
  transaction:
    type: "object"
    properties:
      _version:
        type: "integer"
      id:
        type: "string"
        pattern: "^[^\\s]+$"
      status:
        type: "string"
        enum:
        - "failed"
        - "outdated"
        - "in_progress"
        - "success"
    title: "Configuration transaction"
    description: "HAProxy configuration transaction"
    example:
      _version: 2
      id: "273e3385-2d0c-4fb1-aa27-93cbb31ff203"
      status: "in_progress"
  transactions:
    title: "Transactions array"
    type: "array"
    description: "Configuration transactions array"
    items:
      $ref: "#/definitions/transaction"
  spoe_transaction:
    type: "object"
    properties:
      _version:
        type: "integer"
      id:
        type: "string"
        pattern: "^[^\\s]+$"
      status:
        type: "string"
        enum:
        - "failed"
        - "in_progress"
        - "success"
    title: "SPOE configuration transaction"
    description: "SPOE configuration transaction"
    example:
      _version: 2
      id: "273e3385-2d0c-4fb1-aa27-93cbb31ff203"
      status: "in_progress"
  spoe_transactions:
    title: "SPOE Transactions array"
    type: "array"
    description: "SPOE Configuration transactions array"
    items:
      $ref: "#/definitions/spoe_transaction"
  info:
    type: "object"
    properties:
      api:
        $ref: "#/definitions/info_api"
      system:
        $ref: "#/definitions/info_system"
    title: "Information"
    description: "General API, OS and hardware information"
    example:
      api:
        build_date: "2019-08-21T17:31:56.000Z"
        version: "v1.2.1 45a3288.dev"
      system:
        cpu_info:
          model: "Intel(R) Core(TM) i7-7500U CPU @ 2.70GHz"
          num_cpus: 4
        hostname: "test"
        mem_info:
          dataplaneapi_memory: 44755536
          free_memory: 5790642176
          total_memory: 16681517056
        os_string: "Linux 4.15.0-58-generic #64-Ubuntu SMP Tue Aug 6 11:12:41 UTC\
          \ 2019"
        time: 1566401525
        uptime: 87340
  health:
    type: "object"
    properties:
      haproxy:
        type: "string"
        enum:
        - "up"
        - "down"
        - "unknown"
    example:
      haproxy: "up"
  reload:
    type: "object"
    properties:
      id:
        type: "string"
        pattern: "^\\d{4}-\\d{2}-\\d{2}-\\d+$"
      reload_timestamp:
        type: "integer"
      response:
        type: "string"
      status:
        type: "string"
        enum:
        - "failed"
        - "in_progress"
        - "succeeded"
    title: "HAProxy reload"
    description: "HAProxy reload"
    example:
      id: "2019-01-03-44"
      status: "in_progress"
  reloads:
    title: "HAProxy Reloads Array"
    type: "array"
    description: "HAProxy reloads array"
    items:
      $ref: "#/definitions/reload"
  runtime_add_server:
    type: "object"
    properties:
      address:
        type: "string"
        readOnly: true
        pattern: "^[^\\s]+$"
        x-nullable: false
      agent-addr:
        type: "string"
        pattern: "^[^\\s]+$"
      agent-check:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-dependency:
          agent-port:
            required: true
      agent-inter:
        type: "integer"
        x-nullable: true
      agent-port:
        type: "integer"
        minimum: 1
        maximum: 65535
        x-nullable: true
      agent-send:
        type: "string"
      allow_0rtt:
        type: "boolean"
      alpn:
        type: "string"
        pattern: "^[^\\s]+$"
        x-display-name: "ALPN Protocols"
      backup:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      check:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      check-send-proxy:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      check-sni:
        type: "string"
        pattern: "^[^\\s]+$"
      check-ssl:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      check_alpn:
        type: "string"
        pattern: "^[^\\s]+$"
        x-display-name: "Protocols"
      check_proto:
        type: "string"
        pattern: "^[^\\s]+$"
        x-display-name: "Name"
      check_via_socks4:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      ciphers:
        type: "string"
        x-dependency:
          ssl:
            value: "enabled"
      ciphersuites:
        type: "string"
        x-dependency:
          ssl:
            value: "enabled"
      crl_file:
        type: "string"
        x-dependency:
          ssl:
            value: "enabled"
      downinter:
        type: "integer"
        x-nullable: true
      error_limit:
        type: "integer"
        x-display-name: "Healthcheck error limit"
        x-nullable: true
      fall:
        type: "integer"
        x-display-name: "Nr. of consecutive failed checks"
        x-nullable: true
      fastinter:
        type: "integer"
        x-nullable: true
      force_sslv3:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      force_tlsv10:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      force_tlsv11:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      force_tlsv12:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      force_tlsv13:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      health_check_address:
        type: "string"
        pattern: "^[^\\s]+$"
      health_check_port:
        type: "integer"
        minimum: 1
        maximum: 65535
        x-nullable: true
      id:
        type: "string"
        readOnly: true
      inter:
        type: "integer"
        x-nullable: true
      maintenance:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      maxconn:
        type: "integer"
        x-display-name: "Max Concurrent Connections"
        x-nullable: true
      maxqueue:
        type: "integer"
        x-display-name: "Max Number of Connections"
        x-nullable: true
      minconn:
        type: "integer"
        x-nullable: true
      name:
        type: "string"
        readOnly: true
      no_sslv3:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      no_tlsv10:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      no_tlsv11:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      no_tlsv12:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      no_tlsv13:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      npn:
        type: "string"
        x-dependency:
          ssl:
            value: "enabled"
      observe:
        type: "string"
        enum:
        - "layer4"
        - "layer7"
        x-dependency:
          ssl:
            value: "enabled"
      on-error:
        type: "string"
        enum:
        - "fastinter"
        - "fail-check"
        - "sudden-death"
        - "mark-down"
      on-marked-down:
        type: "string"
        enum:
        - "shutdown-sessions"
      on-marked-up:
        type: "string"
        enum:
        - "shutdown-backup-sessions"
      pool_low_conn:
        type: "integer"
        x-nullable: true
      pool_max_conn:
        type: "integer"
        x-nullable: true
      pool_purge_delay:
        type: "integer"
        x-nullable: true
      port:
        type: "integer"
        readOnly: true
        minimum: 1
        maximum: 65535
        x-nullable: true
      proto:
        type: "string"
        pattern: "^[^\\s]+$"
      proxy-v2-options:
        type: "array"
        items:
          type: "string"
          enum:
          - "ssl"
          - "cert-cn"
          - "ssl-cipher"
          - "cert-sig"
          - "cert-key"
          - "authority"
          - "crc32c"
          - "unique-id"
        x-omitempty: true
      rise:
        type: "integer"
        x-nullable: true
      send-proxy:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      send-proxy-v2:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      send_proxy_v2_ssl:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      send_proxy_v2_ssl_cn:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      slowstart:
        type: "integer"
        x-nullable: true
      sni:
        type: "string"
        pattern: "^[^\\s]+$"
      source:
        type: "string"
      ssl:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      ssl_cafile:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          ssl:
            value: "enabled"
        x-display-name: "SSL CA File"
      ssl_certificate:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          ssl:
            value: "enabled"
      ssl_max_ver:
        type: "string"
        enum:
        - "SSLv3"
        - "TLSv1.0"
        - "TLSv1.1"
        - "TLSv1.2"
        - "TLSv1.3"
      ssl_min_ver:
        type: "string"
        enum:
        - "SSLv3"
        - "TLSv1.0"
        - "TLSv1.1"
        - "TLSv1.2"
        - "TLSv1.3"
      ssl_reuse:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      tfo:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      tls_tickets:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-dependency:
          ssl:
            value: "enabled"
      track:
        type: "string"
      verify:
        type: "string"
        enum:
        - "none"
        - "required"
        x-dependency:
          ssl:
            value: "enabled"
      verifyhost:
        type: "string"
        x-dependency:
          ssl:
            value: "enabled"
          verify:
            value: "required"
      weight:
        type: "integer"
        x-nullable: true
      ws:
        type: "string"
        enum:
        - "auto"
        - "h1"
        - "h2"
        x-display-name: "Relaying websocket stream protocol"
    title: "Runtime Add Server"
    description: "Settable properties when adding a new server using HAProxy's runtime."
    example:
      backup: "enabled"
      agent-addr: "agent-addr"
      on-error: "fastinter"
      agent-port: 39501
      source: "source"
      ssl: "enabled"
      minconn: 4
      observe: "layer4"
      allow_0rtt: true
      agent-send: "agent-send"
      error_limit: 5
      ssl_min_ver: "SSLv3"
      proxy-v2-options:
      - "ssl"
      - "ssl"
      agent-inter: 0
      check-sni: "check-sni"
      send_proxy_v2_ssl: "enabled"
      ssl_reuse: "enabled"
      id: "id"
      ssl_certificate: "ssl_certificate"
      inter: 9
      weight: 1
      on-marked-down: "shutdown-sessions"
      slowstart: 7
      check: "enabled"
      tls_tickets: "enabled"
      no_sslv3: "enabled"
      health_check_address: "health_check_address"
      force_sslv3: "enabled"
      port: 9761
      proto: "proto"
      name: "name"
      tfo: "enabled"
      send-proxy: "enabled"
      check_via_socks4: "enabled"
      alpn: "alpn"
      pool_max_conn: 1
      maxconn: 3
      pool_low_conn: 7
      ssl_cafile: "ssl_cafile"
      check-send-proxy: "enabled"
      crl_file: "crl_file"
      check_alpn: "check_alpn"
      fall: 5
      send-proxy-v2: "enabled"
      verifyhost: "verifyhost"
      ciphers: "ciphers"
      verify: "none"
      send_proxy_v2_ssl_cn: "enabled"
      track: "track"
      ws: "auto"
      health_check_port: 46277
      address: "address"
      check_proto: "check_proto"
      ssl_max_ver: "SSLv3"
      downinter: 1
      pool_purge_delay: 1
      on-marked-up: "shutdown-backup-sessions"
      force_tlsv13: "enabled"
      no_tlsv10: "enabled"
      ciphersuites: "ciphersuites"
      force_tlsv12: "enabled"
      no_tlsv11: "enabled"
      npn: "npn"
      no_tlsv12: "enabled"
      no_tlsv13: "enabled"
      sni: "sni"
      fastinter: 2
      force_tlsv11: "enabled"
      force_tlsv10: "enabled"
      agent-check: "enabled"
      check-ssl: "enabled"
      maxqueue: 2
      rise: 6
      maintenance: "enabled"
  runtime_server:
    type: "object"
    properties:
      address:
        type: "string"
        readOnly: true
        pattern: "^[^\\s]+$"
        x-nullable: false
      admin_state:
        type: "string"
        enum:
        - "ready"
        - "maint"
        - "drain"
      id:
        type: "string"
        readOnly: true
      name:
        type: "string"
        readOnly: true
      operational_state:
        type: "string"
        enum:
        - "up"
        - "down"
        - "stopping"
      port:
        type: "integer"
        readOnly: true
        minimum: 1
        maximum: 65535
        x-nullable: true
    title: "Runtime Server"
    description: "Runtime transient server properties"
    example:
      address: "127.0.0.5"
      admin_state: "ready"
      operational_state: "up"
      port: 80
      server_id: 1
      server_name: "web_server"
  runtime_servers:
    title: "HAProxy Runtime Servers Array"
    type: "array"
    description: "HAProxy runtime servers array"
    items:
      $ref: "#/definitions/runtime_server"
  stick_table:
    type: "object"
    properties:
      fields:
        type: "array"
        items:
          $ref: "#/definitions/stick_table_fields"
        x-omitempty: true
      name:
        type: "string"
      process:
        type: "integer"
        description: "Process number if master-worker mode"
        x-nullable: true
      size:
        type: "integer"
        x-nullable: true
      type:
        type: "string"
        enum:
        - "ip"
        - "ipv6"
        - "integer"
        - "string"
        - "binary"
      used:
        type: "integer"
        x-nullable: true
    title: "Stick Table"
    description: "Stick Table Information"
    example:
      process: 6
      size: 1
      name: "name"
      used: 5
      fields:
      - period: 0
        field: "server_id"
        type: "rate"
      - period: 0
        field: "server_id"
        type: "rate"
      type: "ip"
  stick_tables:
    title: "Stick Tables Array"
    type: "array"
    description: "Array of runtime stick tables"
    items:
      $ref: "#/definitions/stick_table"
  stick_table_entry:
    type: "object"
    properties:
      bytes_in_cnt:
        type: "integer"
        x-nullable: true
      bytes_in_rate:
        type: "integer"
        x-nullable: true
      bytes_out_cnt:
        type: "integer"
        x-nullable: true
      bytes_out_rate:
        type: "integer"
        x-nullable: true
      conn_cnt:
        type: "integer"
        x-nullable: true
      conn_cur:
        type: "integer"
        x-nullable: true
      conn_rate:
        type: "integer"
        x-nullable: true
      exp:
        type: "integer"
        x-nullable: true
      gpc0:
        type: "integer"
        x-nullable: true
      gpc0_rate:
        type: "integer"
        x-nullable: true
      gpc1:
        type: "integer"
        x-nullable: true
      gpc1_rate:
        type: "integer"
        x-nullable: true
      gpt0:
        type: "integer"
        x-nullable: true
      http_err_cnt:
        type: "integer"
        x-nullable: true
      http_err_rate:
        type: "integer"
        x-nullable: true
      http_req_cnt:
        type: "integer"
        x-nullable: true
      http_req_rate:
        type: "integer"
        x-nullable: true
      id:
        type: "string"
      key:
        type: "string"
      server_id:
        type: "integer"
        x-nullable: true
      sess_cnt:
        type: "integer"
        x-nullable: true
      sess_rate:
        type: "integer"
        x-nullable: true
      use:
        type: "boolean"
    title: "Stick Table Entry"
    description: "One entry in stick table"
  stick_table_entries:
    title: "Stick Tables Entries"
    type: "array"
    description: "Entries of one runtime stick table"
    items:
      $ref: "#/definitions/stick_table_entry"
  cluster_settings:
    type: "object"
    properties:
      bootstrap_key:
        type: "string"
      cluster:
        $ref: "#/definitions/Cluster controller information"
      mode:
        type: "string"
        enum:
        - "single"
        - "cluster"
      status:
        type: "string"
        readOnly: true
        enum:
        - "active"
        - "unreachable"
        - "waiting_approval"
    title: "Cluster Settings"
    description: "Settings related to a cluster."
    example:
      mode: "single"
      cluster:
        cluster_id: "cluster_id"
        address: "address"
        port: 39501
        name: "name"
        description: "description"
        api_base_path: "api_base_path"
        log_targets:
        - log_format: "log_format"
          protocol: "tcp"
          address: "address"
          port: 5249
        - log_format: "log_format"
          protocol: "tcp"
          address: "address"
          port: 5249
      bootstrap_key: "bootstrap_key"
      status: "active"
  map:
    type: "object"
    properties:
      description:
        type: "string"
      file:
        type: "string"
      id:
        type: "string"
      size:
        type: "integer"
        description: "File size in bytes."
        x-nullable: true
      storage_name:
        type: "string"
    title: "Map File"
    description: "Map File"
    example:
      file: "file"
      size: 0
      storage_name: "storage_name"
      description: "description"
      id: "id"
  maps:
    title: "Map Files Array"
    type: "array"
    description: "Array of runtime map files"
    items:
      $ref: "#/definitions/map"
  map_entry:
    type: "object"
    properties:
      id:
        type: "string"
        readOnly: true
      key:
        type: "string"
      value:
        type: "string"
    title: "One Map Entry"
    description: "One Map Entry"
    example:
      id: "id"
      value: "value"
      key: "key"
  map_entries:
    title: "Maps Entries"
    type: "array"
    description: "Entries of one runtime map"
    items:
      $ref: "#/definitions/map_entry"
  ssl_certificate:
    type: "object"
    properties:
      algorithm:
        type: "string"
      authority_key_id:
        type: "string"
      description:
        type: "string"
      domains:
        type: "string"
        readOnly: true
        x-omitempty: true
      file:
        type: "string"
      ip_addresses:
        type: "string"
        readOnly: true
        x-omitempty: true
      issuers:
        type: "string"
        readOnly: true
        x-omitempty: true
      not_after:
        type: "string"
        format: "date-time"
        readOnly: true
        x-go-custom-tag: "gorm:\"type:timestamp with time zone\""
        x-nullable: true
      not_before:
        type: "string"
        format: "date-time"
        readOnly: true
        x-go-custom-tag: "gorm:\"type:timestamp with time zone\""
        x-nullable: true
      serial:
        type: "string"
      sha1_finger_print:
        type: "string"
      sha256_finger_print:
        type: "string"
      size:
        type: "integer"
        description: "File size in bytes."
        readOnly: true
        x-nullable: true
      storage_name:
        type: "string"
      subject:
        type: "string"
      subject_alternative_names:
        type: "string"
      subject_key_id:
        type: "string"
    title: "SSL File"
    description: "A file containing one or more SSL/TLS certificates and keys"
    example:
      ip_addresses: "ip_addresses"
      not_before: "2000-01-23T04:56:07.000+00:00"
      subject: "subject"
      subject_alternative_names: "subject_alternative_names"
      description: "description"
      domains: "domains"
      issuers: "issuers"
      sha256_finger_print: "sha256_finger_print"
      not_after: "2000-01-23T04:56:07.000+00:00"
      subject_key_id: "subject_key_id"
      file: "file"
      authority_key_id: "authority_key_id"
      size: 0
      storage_name: "storage_name"
      serial: "serial"
      sha1_finger_print: "sha1_finger_print"
      algorithm: "algorithm"
  ssl_certificates:
    title: "SSL Files Array"
    type: "array"
    description: "Array of ssl certificate files"
    items:
      $ref: "#/definitions/ssl_certificate"
  ssl_cert_entry:
    type: "object"
    properties:
      algorithm:
        type: "string"
      chain_issuer:
        type: "string"
      chain_subject:
        type: "string"
      issuer:
        type: "string"
      not_after:
        type: "string"
        format: "date"
      not_before:
        type: "string"
        format: "date"
      serial:
        type: "string"
      sha1_finger_print:
        type: "string"
      status:
        type: "string"
      storage_name:
        type: "string"
      subject:
        type: "string"
      subject_alternative_names:
        type: "array"
        items:
          type: "string"
        x-omitempty: true
    title: "One SSL Certificate Entry"
    description: "One SSL/TLS certificate"
  acl_file:
    type: "object"
    properties:
      description:
        type: "string"
      id:
        type: "string"
      storage_name:
        type: "string"
    title: "ACL File"
    description: "ACL File"
    example:
      storage_name: "storage_name"
      description: "description"
      id: "id"
  acl_files:
    title: "ACL Files Array"
    type: "array"
    description: "Array of runtime acl files"
    items:
      $ref: "#/definitions/acl_file"
  acl_file_entry:
    type: "object"
    properties:
      id:
        type: "string"
        readOnly: true
      value:
        type: "string"
    title: "One ACL File Entry"
    description: "One ACL File Entry"
    example:
      id: "id"
      value: "value"
  acl_files_entries:
    title: "ACL Files Entries"
    type: "array"
    description: "Array of entries of one runtime acl file"
    items:
      $ref: "#/definitions/acl_file_entry"
  general_file:
    type: "object"
    properties:
      description:
        type: "string"
      file:
        type: "string"
      id:
        type: "string"
      size:
        type: "integer"
        description: "File size in bytes."
        x-nullable: true
      storage_name:
        type: "string"
    title: "General use file"
    description: "General use file"
    example:
      file: "file"
      size: 0
      storage_name: "storage_name"
      description: "description"
      id: "id"
  general_files:
    title: "General Files Array"
    type: "array"
    description: "Array of general use files"
    items:
      $ref: "#/definitions/general_file"
  balance:
    type: "object"
    required:
    - "algorithm"
    properties:
      algorithm:
        type: "string"
        enum:
        - "roundrobin"
        - "static-rr"
        - "leastconn"
        - "first"
        - "source"
        - "uri"
        - "url_param"
        - "hdr"
        - "random"
        - "rdp-cookie"
        - "hash"
      hash_expression:
        type: "string"
        x-dependency:
          algorithm:
            value: "hash"
        x-display-name: "Hash Expression"
      hdr_name:
        type: "string"
        x-dependency:
          algorithm:
            required: true
            value: "hdr"
        x-display-name: "Header Name"
      hdr_use_domain_only:
        type: "boolean"
        x-dependency:
          algorithm:
            value: "hdr"
        x-display-name: "Header Use Domain Only"
      random_draws:
        type: "integer"
        x-dependency:
          algorithm:
            value: "random"
        x-display-name: "Random Draws"
        x-nullable: false
      rdp_cookie_name:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          algorithm:
            value: "rdp-cookie"
        x-display-name: "Rdp Cookie Name"
      uri_depth:
        type: "integer"
        x-dependency:
          algorithm:
            value: "uri"
        x-display-name: "Uri Depth"
      uri_len:
        type: "integer"
        x-dependency:
          algorithm:
            value: "uri"
        x-display-name: "Uri Len"
      uri_path_only:
        type: "boolean"
        x-dependency:
          algorithm:
            value: "uri"
        x-display-name: "Uri Path Only"
      uri_whole:
        type: "boolean"
        x-dependency:
          algorithm:
            value: "uri"
        x-display-name: "Uri Whole"
      url_param:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          algorithm:
            required: true
            value: "url_param"
        x-display-name: "Url Param"
      url_param_check_post:
        type: "integer"
        x-dependency:
          algorithm:
            value: "url_param"
        x-display-name: "Url Param Check Post"
      url_param_max_wait:
        type: "integer"
        x-dependency:
          algorithm:
            value: "url_param"
        x-display-name: "Url Param Max Weight"
    example:
      hash_expression: "hash_expression"
      rdp_cookie_name: "rdp_cookie_name"
      url_param_max_wait: 2
      hdr_use_domain_only: true
      uri_whole: true
      hdr_name: "hdr_name"
      uri_len: 5
      uri_depth: 1
      random_draws: 6
      url_param_check_post: 5
      uri_path_only: true
      algorithm: "roundrobin"
      url_param: "url_param"
  hash_type:
    type: "object"
    properties:
      function:
        type: "string"
        enum:
        - "sdbm"
        - "djb2"
        - "wt6"
        - "crc32"
        - "none"
      method:
        type: "string"
        enum:
        - "map-based"
        - "consistent"
      modifier:
        type: "string"
        enum:
        - "avalanche"
    example:
      method: "map-based"
      function: "sdbm"
      modifier: "avalanche"
  persist_rule:
    type: "object"
    required:
    - "type"
    properties:
      rdp_cookie_name:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            value: "rdp-cookie"
        x-display-name: "Rdp Cookie Name"
      type:
        type: "string"
        enum:
        - "rdp-cookie"
    example:
      rdp_cookie_name: "rdp_cookie_name"
      type: "rdp-cookie"
  forwardfor:
    type: "object"
    required:
    - "enabled"
    properties:
      enabled:
        type: "string"
        enum:
        - "enabled"
      except:
        type: "string"
        pattern: "^[^\\s]+$"
      header:
        type: "string"
        pattern: "^[^\\s]+$"
      ifnone:
        type: "boolean"
    example:
      ifnone: true
      header: "header"
      except: "except"
      enabled: "enabled"
    x-display-name: "ForwardFor"
  default_server:
    title: "Default Server"
    allOf:
    - $ref: "#/definitions/server_params"
    - {}
  httpchk_params:
    type: "object"
    properties:
      method:
        type: "string"
        enum:
        - "HEAD"
        - "PUT"
        - "POST"
        - "GET"
        - "TRACE"
        - "PATCH"
        - "DELETE"
        - "CONNECT"
        - "OPTIONS"
      uri:
        type: "string"
        pattern: "^[^ ]*$"
      version:
        type: "string"
    example:
      method: "HEAD"
      uri: "uri"
      version: "version"
    x-display-name: "HTTP Check"
  redispatch:
    type: "object"
    required:
    - "enabled"
    properties:
      enabled:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      interval:
        type: "integer"
        x-nullable: false
    example:
      interval: 6
      enabled: "enabled"
  errorfile:
    type: "object"
    properties:
      code:
        type: "integer"
      file:
        type: "string"
    example:
      code: 6
      file: "file"
    x-display-name: "Error File"
  errorfiles:
    type: "object"
    properties:
      codes:
        type: "array"
        items:
          type: "integer"
        x-omitempty: true
      name:
        type: "string"
    example:
      codes:
      - 7
      - 7
      name: "name"
  cookie:
    type: "object"
    required:
    - "name"
    properties:
      attr:
        type: "array"
        items:
          $ref: "#/definitions/cookie_attr"
        x-omitempty: true
        x-go-name: "Attrs"
      domain:
        type: "array"
        items:
          $ref: "#/definitions/cookie_domain"
        x-omitempty: true
        x-go-name: "Domains"
      dynamic:
        type: "boolean"
      httponly:
        type: "boolean"
      indirect:
        type: "boolean"
      maxidle:
        type: "integer"
      maxlife:
        type: "integer"
      name:
        type: "string"
        pattern: "^[^\\s]+$"
      nocache:
        type: "boolean"
      postonly:
        type: "boolean"
      preserve:
        type: "boolean"
      secure:
        type: "boolean"
      type:
        type: "string"
        enum:
        - "rewrite"
        - "insert"
        - "prefix"
    example:
      maxidle: 1
      indirect: true
      postonly: true
      httponly: true
      preserve: true
      secure: true
      type: "rewrite"
      domain:
      - value: "value"
      - value: "value"
      name: "name"
      nocache: true
      dynamic: true
      maxlife: 1
      attr:
      - value: "value"
      - value: "value"
  capture:
    type: "object"
    required:
    - "index"
    - "length"
    - "type"
    properties:
      index:
        type: "integer"
        x-nullable: true
      length:
        type: "integer"
        x-nullable: false
      type:
        type: "string"
        enum:
        - "request"
        - "response"
        x-nullable: false
    title: "Declare Capture"
    example:
      length: 6
      index: 0
      type: "request"
  captures:
    title: "Declare capture array"
    type: "array"
    items:
      $ref: "#/definitions/capture"
  resolver:
    type: "object"
    required:
    - "name"
    properties:
      accepted_payload_size:
        type: "integer"
        minimum: 512
        maximum: 8192
      hold_nx:
        type: "integer"
        x-nullable: true
      hold_obsolete:
        type: "integer"
        x-nullable: true
      hold_other:
        type: "integer"
        x-nullable: true
      hold_refused:
        type: "integer"
        x-nullable: true
      hold_timeout:
        type: "integer"
        x-nullable: true
      hold_valid:
        type: "integer"
        x-nullable: true
      name:
        type: "string"
        pattern: "^[A-Za-z0-9-_.:]+$"
        x-nullable: false
      parse-resolv-conf:
        type: "boolean"
      resolve_retries:
        type: "integer"
        minimum: 1
      timeout_resolve:
        type: "integer"
        x-nullable: false
      timeout_retry:
        type: "integer"
        x-nullable: false
    title: "Resolver"
    description: "Runtime DNS configuration"
    example:
      parse-resolv-conf: true
      hold_valid: 7
      resolve_retries: 1
      timeout_resolve: 3
      hold_nx: 6
      name: "name"
      accepted_payload_size: 1127
      hold_obsolete: 1
      timeout_retry: 2
      hold_timeout: 2
      hold_other: 5
      hold_refused: 5
  resolvers:
    title: "Resolvers"
    type: "array"
    description: "HAProxy resolvers array"
    items:
      $ref: "#/definitions/resolver"
  nameserver:
    type: "object"
    required:
    - "address"
    - "name"
    properties:
      address:
        type: "string"
        pattern: "^[^\\s]+$"
      name:
        type: "string"
        pattern: "^[A-Za-z0-9-_.:]+$"
        x-nullable: false
      port:
        type: "integer"
        minimum: 1
        maximum: 65535
        x-nullable: true
    title: "Nameserver"
    description: "Nameserver used in Runtime DNS configuration"
    example:
      address: "10.0.0.1"
      name: "ns1"
      port: 53
  nameservers:
    title: "Nameservers"
    type: "array"
    description: "Nameservers array"
    items:
      $ref: "#/definitions/nameserver"
  cache:
    type: "object"
    required:
    - "name"
    properties:
      max_age:
        type: "integer"
      max_object_size:
        type: "integer"
      max_secondary_entries:
        type: "integer"
      name:
        type: "string"
        pattern: "^[A-Za-z0-9-_.:]+$"
      process_vary:
        type: "boolean"
        x-nullable: true
      total_max_size:
        type: "integer"
        minimum: 1
        maximum: 4095
    title: "Cache"
    description: "HAPRoxy Cache section"
    example:
      max_age: 0
      max_secondary_entries: 1
      process_vary: true
      name: "name"
      max_object_size: 6
      total_max_size: 2441
  caches:
    title: "Cache Sections"
    type: "array"
    description: "HAProxy caches array"
    items:
      $ref: "#/definitions/cache"
  awsFilters:
    type: "object"
    required:
    - "key"
    - "value"
    properties:
      key:
        type: "string"
        description: "Key to use as filter, using the format specified at https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html#options"
      value:
        type: "string"
        description: "Value of the filter to use"
  awsRegion:
    type: "object"
    required:
    - "enabled"
    - "ipv4_address"
    - "name"
    - "region"
    - "retry_timeout"
    properties:
      access_key_id:
        type: "string"
        description: "AWS Access Key ID."
      allowlist:
        type: "array"
        description: "Specify the AWS filters used to filter the EC2 instances to\
          \ add"
        items:
          $ref: "#/definitions/awsFilters"
        x-omitempty: true
      denylist:
        type: "array"
        description: "Specify the AWS filters used to filter the EC2 instances to\
          \ ignore"
        items:
          $ref: "#/definitions/awsFilters"
        x-omitempty: true
      description:
        type: "string"
      enabled:
        type: "boolean"
      id:
        type: "string"
        description: "Auto generated ID."
        readOnly: true
        pattern: "^[^\\s]+$"
        x-nullable: true
      ipv4_address:
        type: "string"
        description: "Select which IPv4 address the Service Discovery has to use for\
          \ the backend server entry"
        enum:
        - "private"
        - "public"
      name:
        type: "string"
      region:
        type: "string"
      retry_timeout:
        type: "integer"
        description: "Duration in seconds in-between data pulling requests to the\
          \ AWS region"
        minimum: 1
      secret_access_key:
        type: "string"
        description: "AWS Secret Access Key."
      server_slots_base:
        type: "integer"
      server_slots_growth_increment:
        type: "integer"
      server_slots_growth_type:
        type: "string"
        default: "exponential"
        enum:
        - "linear"
        - "exponential"
    title: "AWS region"
    description: "AWS region configuration"
    example:
      access_key_id: "****************L7GT"
      allowlist:
      - key: "tag-key"
        value: "Instance:Having:This:Tag"
      denylist:
      - key: "tag:Environment"
        value: "development"
      enabled: true
      id: "0"
      ipv4_address: "private"
      name: "frontend-service"
      region: "us-east-1"
      retry_timeout: 1
      secret_access_key: "****************soLl"
  awsRegions:
    title: "AWS"
    type: "array"
    description: "AWS regions array"
    items:
      $ref: "#/definitions/awsRegion"
  consul:
    type: "object"
    required:
    - "address"
    - "enabled"
    - "port"
    - "retry_timeout"
    properties:
      address:
        type: "string"
        pattern: "^[^\\s]+$"
      defaults:
        type: "string"
        description: "Name of the defaults section to be used in backends created\
          \ by this service"
      description:
        type: "string"
      enabled:
        type: "boolean"
      health_check_policy:
        type: "string"
        description: "Defines the health check conditions required for each node to\
          \ be considered valid for the service.\n  none: all nodes are considered\
          \ valid\n  any: a node is considered valid if any one health check is 'passing'\n\
          \  all: a node is considered valid if all health checks are 'passing'\n\
          \  min: a node is considered valid if the number of 'passing' checks is\
          \ greater or equal to the 'health_check_policy_min' value.\n    If the node\
          \ has less health checks configured then 'health_check_policy_min' it is\
          \ considered invalid."
        default: "none"
        enum:
        - "none"
        - "any"
        - "all"
        - "min"
      health_check_policy_min:
        type: "integer"
        x-dependency:
          health_check_policy:
            value: "min"
      id:
        type: "string"
        description: "Auto generated ID."
        pattern: "^[^\\s]+$"
        x-nullable: true
      mode:
        type: "string"
        default: "http"
        enum:
        - "http"
        - "https"
      name:
        type: "string"
      namespace:
        type: "string"
      port:
        type: "integer"
        minimum: 1
        maximum: 65535
      retry_timeout:
        type: "integer"
        description: "Duration in seconds in-between data pulling requests to the\
          \ consul server"
        minimum: 1
      server_slots_base:
        type: "integer"
      server_slots_growth_increment:
        type: "integer"
      server_slots_growth_type:
        type: "string"
        default: "exponential"
        enum:
        - "linear"
        - "exponential"
      service-blacklist:
        type: "array"
        description: "deprecated, use service_denylist"
        items:
          type: "string"
          pattern: "^[^\\s]+$"
        x-omitempty: true
      service-whitelist:
        type: "array"
        description: "deprecated, use service_allowlist"
        items:
          type: "string"
          pattern: "^[^\\s]+$"
        x-omitempty: true
      service_allowlist:
        type: "array"
        items:
          type: "string"
          pattern: "^[^\\s]+$"
        x-omitempty: true
      service_denylist:
        type: "array"
        items:
          type: "string"
          pattern: "^[^\\s]+$"
        x-omitempty: true
      service_name_regexp:
        type: "string"
        description: "Regular expression used to filter services by name."
      token:
        type: "string"
        pattern: "^[^\\s]+$"
    title: "Consul server"
    description: "Consul server configuration"
    example:
      address: "127.0.0.1"
      enabled: true
      id: "0"
      port: 90
      retry_timeout: 10
    additionalProperties: false
  consuls:
    title: "Consuls"
    type: "array"
    description: "Consuls array"
    items:
      $ref: "#/definitions/consul"
  monitor_uri:
    type: "string"
  monitor_fail:
    type: "object"
    required:
    - "cond"
    - "cond_test"
    properties:
      cond:
        type: "string"
        enum:
        - "if"
        - "unless"
        x-display-name: "Condition"
      cond_test:
        type: "string"
        x-dependency:
          cond:
            required: true
        x-display-name: "Condition Test"
  originalto:
    type: "object"
    required:
    - "enabled"
    properties:
      enabled:
        type: "string"
        enum:
        - "enabled"
      except:
        type: "string"
        pattern: "^[^\\s]+$"
      header:
        type: "string"
        pattern: "^[^\\s]+$"
    example:
      header: "header"
      except: "except"
      enabled: "enabled"
    x-display-name: "OriginalTo"
  smtpchk_params:
    type: "object"
    properties:
      domain:
        type: "string"
      hello:
        type: "string"
    example:
      domain: "domain"
      hello: "hello"
  mysql_check_params:
    type: "object"
    properties:
      client_version:
        type: "string"
        enum:
        - "pre-41"
        - "post-41"
      username:
        type: "string"
    example:
      client_version: "pre-41"
      username: "username"
  pgsql_check_params:
    type: "object"
    properties:
      username:
        type: "string"
    example:
      username: "username"
  spoe_files:
    title: "SPOE files"
    type: "array"
    description: "SPOE files"
    items:
      type: "string"
    x-omitempty: true
  spoe_scope:
    type: "string"
    title: "SPOE scope"
    description: "SPOE scope name"
  spoe_scopes:
    title: "SPOE Scopes"
    type: "array"
    description: "All SPOE Scopes"
    items:
      $ref: "#/definitions/spoe_scope"
  spoe_agent:
    type: "object"
    required:
    - "name"
    properties:
      async:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      continue-on-error:
        type: "string"
        enum:
        - "enabled"
      dontlog-normal:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      engine-name:
        type: "string"
      force-set-var:
        type: "string"
        enum:
        - "enabled"
      groups:
        type: "string"
      hello_timeout:
        type: "integer"
      idle_timeout:
        type: "integer"
      log:
        $ref: "#/definitions/log_targets"
      max-frame-size:
        type: "integer"
      max-waiting-frames:
        type: "integer"
      maxconnrate:
        type: "integer"
      maxerrrate:
        type: "integer"
      messages:
        type: "string"
      name:
        type: "string"
      option_set-on-error:
        type: "string"
        pattern: "^[A-Za-z0-9-_.]+$"
      option_set-process-time:
        type: "string"
        pattern: "^[A-Za-z0-9-_.]+$"
      option_set-total-time:
        type: "string"
        pattern: "^[A-Za-z0-9-_.]+$"
      option_var-prefix:
        type: "string"
        pattern: "^[A-Za-z0-9-_.]+$"
      pipelining:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      processing_timeout:
        type: "integer"
      register-var-names:
        type: "string"
      send-frag-payload:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      use-backend:
        type: "string"
    title: "SPOE agent"
    description: "SPOE agent configuration"
    example:
      send-frag-payload: "enabled"
      log: ""
      max-frame-size: 1
      hello_timeout: 0
      use-backend: "use-backend"
      dontlog-normal: "enabled"
      groups: "groups"
      option_set-on-error: "option_set-on-error"
      processing_timeout: 7
      max-waiting-frames: 5
      pipelining: "enabled"
      continue-on-error: "enabled"
      option_set-total-time: "option_set-total-time"
      async: "enabled"
      register-var-names: "register-var-names"
      engine-name: "engine-name"
      force-set-var: "enabled"
      maxconnrate: 5
      maxerrrate: 2
      name: "name"
      option_var-prefix: "option_var-prefix"
      messages: "messages"
      idle_timeout: 6
      option_set-process-time: "option_set-process-time"
  spoe_agents:
    title: "SPOE Agents"
    type: "array"
    description: "SPOE Agents of one scope in SPOE file"
    items:
      $ref: "#/definitions/spoe_agent"
  spoe_message:
    type: "object"
    required:
    - "name"
    properties:
      acl:
        $ref: "#/definitions/acls"
      args:
        type: "string"
      event:
        $ref: "#/definitions/spoe_message_event"
      name:
        type: "string"
    title: "SPOE message"
    description: "SPOE message section configuration"
    example:
      args: "args"
      name: "name"
      acl: ""
      event:
        cond_test: "cond_test"
        name: "on-client-session"
        cond: "if"
  spoe_messages:
    title: "SPOE Messages"
    type: "array"
    description: "SPOE Messages of one scope in SPOE file"
    items:
      $ref: "#/definitions/spoe_message"
  spoe_group:
    type: "object"
    required:
    - "name"
    properties:
      messages:
        type: "string"
      name:
        type: "string"
    title: "SPOE group"
    description: "SPOE group section configuration"
    example:
      name: "name"
      messages: "messages"
  spoe_groups:
    title: "SPOE Groups"
    type: "array"
    description: "SPOE Groups of one scope in SPOE file"
    items:
      $ref: "#/definitions/spoe_group"
  return_header:
    type: "object"
    required:
    - "fmt"
    - "name"
    properties:
      fmt:
        type: "string"
      name:
        type: "string"
    example:
      name: "name"
      fmt: "fmt"
    x-go-name: "ReturnHeader"
  compression:
    type: "object"
    properties:
      algo-req:
        type: "string"
        enum:
        - "identity"
        - "gzip"
        - "deflate"
        - "raw-deflate"
        x-omitempty: true
      algorithms:
        type: "array"
        items:
          type: "string"
          enum:
          - "identity"
          - "gzip"
          - "deflate"
          - "raw-deflate"
        x-omitempty: true
      algos-res:
        type: "array"
        items:
          type: "string"
          enum:
          - "identity"
          - "gzip"
          - "deflate"
          - "raw-deflate"
        x-omitempty: true
      direction:
        type: "string"
        enum:
        - "request"
        - "response"
        - "both"
        x-omitempty: true
      offload:
        type: "boolean"
      types:
        type: "array"
        items:
          type: "string"
        x-omitempty: true
      types-req:
        type: "array"
        items:
          type: "string"
        x-omitempty: true
      types-res:
        type: "array"
        items:
          type: "string"
        x-omitempty: true
    example:
      algos-res:
      - "identity"
      - "identity"
      algorithms:
      - "identity"
      - "identity"
      types:
      - "types"
      - "types"
      types-res:
      - "types-res"
      - "types-res"
      types-req:
      - "types-req"
      - "types-req"
      offload: true
      algo-req: "identity"
      direction: "request"
  source:
    type: "object"
    required:
    - "address"
    properties:
      address:
        type: "string"
      address_second:
        type: "string"
      hdr:
        type: "string"
        x-dependency:
          usesrc:
            value: "hdr_ip"
      interface:
        type: "string"
      occ:
        type: "string"
        x-dependency:
          usesrc:
            value: "hdr_ip"
      port:
        type: "integer"
        minimum: 1
        maximum: 65535
      port_second:
        type: "integer"
        minimum: 1
        maximum: 65535
      usesrc:
        type: "string"
        enum:
        - "address"
        - "client"
        - "clientip"
        - "hdr_ip"
    example:
      address_second: "address_second"
      port_second: 38960
      address: "address"
      port: 45075
      usesrc: "address"
      hdr: "hdr"
      interface: "interface"
      occ: "occ"
  email_alert:
    type: "object"
    required:
    - "from"
    - "mailers"
    - "to"
    properties:
      from:
        type: "string"
        pattern: "^\\S+@\\S+$"
      level:
        type: "string"
        enum:
        - "emerg"
        - "alert"
        - "crit"
        - "err"
        - "warning"
        - "notice"
        - "info"
        - "debug"
      mailers:
        type: "string"
        x-dynamic-enum:
          operation: "getMailersSections"
          property: "name"
      myhostname:
        type: "string"
      to:
        type: "string"
        pattern: "^\\S+@\\S+$"
    title: "Email Alert"
    description: "Send emails for important log messages."
    example:
      myhostname: "myhostname"
      level: "emerg"
      mailers: "mailers"
      from: "from"
      to: "to"
  email_alerts:
    title: "Email Alerts Array"
    type: "array"
    description: "Email Alerts array (corresponds to email-alert directives)"
    items:
      $ref: "#/definitions/email_alert"
  errorloc:
    type: "object"
    required:
    - "code"
    - "url"
    properties:
      code:
        type: "integer"
      url:
        type: "string"
    example:
      code: 1
      url: "url"
  default_bind:
    title: "Default Bind"
    allOf:
    - $ref: "#/definitions/bind_params"
    - {}
    description: "HAProxy default bind configuration"
  table:
    type: "object"
    properties:
      expire:
        type: "string"
        pattern: "^\\d+(ms|s|m|h|d)?$"
        x-nullable: true
      name:
        type: "string"
        x-nullable: false
      no_purge:
        type: "boolean"
        x-display-name: "No Purge"
      size:
        type: "string"
        pattern: "^\\d+(k|K|m|M|g|G)?$"
      store:
        type: "string"
      type:
        type: "string"
        enum:
        - "ip"
        - "integer"
        - "string"
        - "binary"
      type_len:
        type: "integer"
        x-display-name: "Type"
        x-nullable: true
      write_to:
        type: "string"
        x-nullable: true
    example:
      size: "size"
      type_len: 0
      expire: "expire"
      name: "name"
      write_to: "write_to"
      store: "store"
      type: "ip"
      no_purge: true
  tables:
    title: "Tables"
    type: "array"
    description: "HAProxy table array"
    items:
      $ref: "#/definitions/table"
  inline_response_429:
    type: "object"
    properties:
      code:
        type: "integer"
      message:
        type: "string"
    example: "{code=429, message=cannot start a new transaction, reached the maximum\
      \ amount of 20 active transactions available}"
  inline_response_200:
    type: "object"
    required:
    - "data"
    properties:
      data:
        type: "string"
    example:
      data: "data"
  stick_table_entry_1:
    type: "object"
    required:
    - "data_type"
    - "key"
    properties:
      data_type:
        $ref: "#/definitions/stick_table_entry"
      key:
        type: "string"
  data:
    type: "object"
    required:
    - "value"
    properties:
      value:
        type: "string"
        description: "Map value"
  inline_response_200_1:
    type: "object"
    properties:
      data:
        type: "string"
    example:
      data: "data"
  Sample:
    type: "object"
    required:
    - "ranges"
    - "size"
    properties:
      ranges:
        type: "string"
        title: "Range"
      size:
        type: "integer"
        title: "Size"
    example:
      ranges: "ranges"
      size: 6
  server_params_setproxyv2tlvfmt:
    type: "object"
    required:
    - "id"
    - "value"
    properties:
      id:
        type: "string"
      value:
        type: "string"
  site_farms:
    type: "object"
    required:
    - "name"
    - "use_as"
    properties:
      balance:
        $ref: "#/definitions/balance"
      cond:
        type: "string"
        enum:
        - "if"
        - "unless"
        x-dependency:
          use_as:
            required: true
            value: "conditional"
        x-display-name: "Condition"
      cond_test:
        type: "string"
        x-dependency:
          use_as:
            required: true
            value: "conditional"
        x-display-name: "Condition Test"
      forwardfor:
        $ref: "#/definitions/forwardfor"
      mode:
        type: "string"
        enum:
        - "http"
        - "tcp"
      name:
        type: "string"
        pattern: "^[A-Za-z0-9-_.:]+$"
        x-nullable: false
      servers:
        type: "array"
        items:
          $ref: "#/definitions/server"
        x-omitempty: true
      use_as:
        type: "string"
        enum:
        - "default"
        - "conditional"
        x-nullable: false
    x-go-name: "SiteFarm"
  site_service:
    type: "object"
    properties:
      http_connection_mode:
        type: "string"
        enum:
        - "http-tunnel"
        - "httpclose"
        - "forced-close"
        - "http-server-close"
        - "http-keep-alive"
        x-dependency:
          mode:
            value: "http"
        x-display-name: "HTTP Connection Mode"
      listeners:
        type: "array"
        items:
          $ref: "#/definitions/bind"
        x-omitempty: true
      maxconn:
        type: "integer"
        x-display-name: "Max Connections"
        x-nullable: true
      mode:
        type: "string"
        enum:
        - "http"
        - "tcp"
  global_cpu_maps:
    type: "object"
    required:
    - "cpu_set"
    - "process"
    properties:
      cpu_set:
        type: "string"
        x-display-name: "CPU Set"
      process:
        type: "string"
        x-display-name: "Process/Thread Set"
    example:
      process: "process"
      cpu_set: "cpu_set"
    x-go-name: "CPUMap"
  global_default_path:
    type: "object"
    required:
    - "type"
    properties:
      path:
        type: "string"
        pattern: "^[^\\s]+$"
        x-dependency:
          type:
            value: "origin"
      type:
        type: "string"
        enum:
        - "current"
        - "config"
        - "parent"
        - "origin"
        x-nullable: false
    example:
      path: "path"
      type: "current"
  global_device_atlas_options:
    type: "object"
    properties:
      json_file:
        type: "string"
        x-display-name: "JSON file"
      log_level:
        type: "string"
        x-display-name: "Log Level"
      properties_cookie:
        type: "string"
        x-display-name: "Properties Cookie"
      separator:
        type: "string"
        x-display-name: "Separator"
    example:
      json_file: "json_file"
      properties_cookie: "properties_cookie"
      log_level: "log_level"
      separator: "separator"
  global_fifty_one_degrees_options:
    type: "object"
    properties:
      cache_size:
        type: "integer"
        x-display-name: "Cache Size"
      data_file:
        type: "string"
        x-display-name: "Data File"
      property_name_list:
        type: "string"
        x-display-name: "Name List"
      property_separator:
        type: "string"
        x-display-name: "Property Separator"
    example:
      data_file: "data_file"
      cache_size: 1
      property_name_list: "property_name_list"
      property_separator: "property_separator"
  global_h1_case_adjust:
    type: "object"
    required:
    - "from"
    - "to"
    properties:
      from:
        type: "string"
      to:
        type: "string"
    example:
      from: "from"
      to: "to"
    x-go-name: "H1CaseAdjust"
  global_log_send_hostname:
    type: "object"
    required:
    - "enabled"
    properties:
      enabled:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
      param:
        type: "string"
        pattern: "^[^\\s]+$"
    example:
      param: "param"
      enabled: "enabled"
    x-display-name: "Log Send Hostname"
  global_lua_loads:
    type: "object"
    required:
    - "file"
    properties:
      file:
        type: "string"
        pattern: "^[^\\s]+$"
    example:
      file: "file"
    x-go-name: "LuaLoad"
  global_lua_prepend_path:
    type: "object"
    required:
    - "path"
    properties:
      path:
        type: "string"
        pattern: "^[^\\s]+$"
      type:
        type: "string"
        enum:
        - "path"
        - "cpath"
    example:
      path: "path"
      type: "path"
    x-go-name: "LuaPrependPath"
  global_presetenv:
    type: "object"
    required:
    - "name"
    - "value"
    properties:
      name:
        type: "string"
        x-display-name: "Name"
      value:
        type: "string"
        x-display-name: "Value"
    example:
      name: "name"
      value: "value"
    x-go-name: "PresetEnv"
  global_set_var:
    type: "object"
    required:
    - "expr"
    - "name"
    properties:
      expr:
        type: "string"
        x-display-name: "Expression"
      name:
        type: "string"
        x-display-name: "Name"
    example:
      name: "name"
      expr: "expr"
    x-go-name: "SetVar"
  global_set_var_fmt:
    type: "object"
    required:
    - "format"
    - "name"
    properties:
      format:
        type: "string"
        x-display-name: "Format"
      name:
        type: "string"
        x-display-name: "Name"
    example:
      format: "format"
      name: "name"
    x-go-name: "SetVarFmt"
  global_setenv:
    type: "object"
    required:
    - "name"
    - "value"
    properties:
      name:
        type: "string"
        x-display-name: "Name"
      value:
        type: "string"
        x-display-name: "Value"
    example:
      name: "name"
      value: "value"
    x-go-name: "SetEnv"
  global_ssl_engines:
    type: "object"
    required:
    - "name"
    properties:
      algorithms:
        type: "string"
        x-display-name: "Algorithms"
        x-nullable: true
      name:
        type: "string"
        x-display-name: "Name"
    example:
      algorithms: "algorithms"
      name: "name"
    x-go-name: "SslEngine"
  global_thread_group_lines:
    type: "object"
    required:
    - "group"
    - "num_or_range"
    properties:
      group:
        type: "string"
        x-display-name: "Group"
      num_or_range:
        type: "string"
        x-display-name: "Number or Range"
    example:
      num_or_range: "num_or_range"
      group: "group"
    x-go-name: "ThreadGroup"
  global_tune_options:
    type: "object"
    properties:
      buffers_limit:
        type: "integer"
        x-display-name: "Buffers Limit"
        x-nullable: true
      buffers_reserve:
        type: "integer"
        minimum: 2
        x-display-name: "Buffers Reserve"
      bufsize:
        type: "integer"
        x-display-name: "Buffer Size"
      comp_maxlevel:
        type: "integer"
        x-display-name: "Maximum Compression Level"
      disable_zero_copy_forwarding:
        type: "boolean"
        x-display-name: "Disable zero-copy forwarding"
      events_max_events_at_once:
        type: "integer"
        minimum: 1
        maximum: 10000
      fail_alloc:
        type: "boolean"
        x-display-name: "Failed Allocation Chance"
      fd_edge_triggered:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Edge-triggered polling mode"
      h1_zero_copy_fwd_recv:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "enable or disable the zero-copy receives of data for the\
          \ HTTP/1 multiplexer"
      h1_zero_copy_fwd_send:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "enable or disable the zero-copy sends of data for the HTTP/1\
          \ multiplexer"
      h2_be_initial_window_size:
        type: "integer"
        x-display-name: "Initial window size for outgoing connections"
      h2_be_max_concurrent_streams:
        type: "integer"
        x-display-name: "Maximum number of concurrent streams per outgoing connection"
      h2_fe_initial_window_size:
        type: "integer"
        x-display-name: "Initial window size for incoming connections"
      h2_fe_max_concurrent_streams:
        type: "integer"
        x-display-name: "Maximum number of concurrent streams per incoming connection"
      h2_header_table_size:
        type: "integer"
        maximum: 65535
        x-display-name: "HTTP/2 Dynamic Header Table Size"
      h2_initial_window_size:
        type: "integer"
        x-display-name: "HTTP/2 Initial Window Size"
        x-nullable: true
      h2_max_concurrent_streams:
        type: "integer"
        x-display-name: "HTTP/2 Maximum Number of Concurrent Streams"
      h2_max_frame_size:
        type: "integer"
        x-display-name: "HTTP/2 Maximum Frame Size"
      h2_zero_copy_fwd_send:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "enable or disable the zero-copy sends of data for the HTTP/2\
          \ multiplexer"
      http_cookielen:
        type: "integer"
        x-display-name: "Maximum Cookie Length"
      http_logurilen:
        type: "integer"
        x-display-name: "Maximum URI Length"
      http_maxhdr:
        type: "integer"
        minimum: 1
        maximum: 32767
        x-display-name: "Maximum Number of Headers"
      idle_pool_shared:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Share Idle Connections"
      idletimer:
        type: "integer"
        minimum: 0
        maximum: 65535
        x-display-name: "Idle Stream Duration"
        x-nullable: true
      listener_default_shards:
        type: "string"
        enum:
        - "by-process"
        - "by-thread"
        - "by-group"
        x-display-name: "Listener Default Shards"
      listener_multi_queue:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Listener Multi Queue Accept"
      lua_burst_timeout:
        type: "integer"
        x-display-name: "Burst execution timeout"
        x-nullable: true
      lua_forced_yield:
        type: "integer"
        x-display-name: "Lua Forced Yield"
      lua_log_loggers:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Send Lua Logs to the Loggers"
      lua_log_stderr:
        type: "string"
        enum:
        - "auto"
        - "enabled"
        - "disabled"
        x-display-name: "Send Lua Logs to stderr"
      lua_maxmem:
        type: "boolean"
        x-display-name: "Lua Maximum Memory Usage"
      lua_service_timeout:
        type: "integer"
        x-display-name: "Lua Service timeout"
        x-nullable: true
      lua_session_timeout:
        type: "integer"
        x-display-name: "Lua Session Timeout"
        x-nullable: true
      lua_task_timeout:
        type: "integer"
        x-display-name: "Lua Task Timeout"
        x-nullable: true
      max_checks_per_thread:
        type: "integer"
        x-display-name: "Maximum checks per thread"
        x-nullable: true
      maxaccept:
        type: "integer"
        x-display-name: "Maximum Accept Events"
      maxpollevents:
        type: "integer"
        x-display-name: "Maximum Polled Events"
      maxrewrite:
        type: "integer"
        x-display-name: "Maximum Rewrite Space"
      memory_hot_size:
        type: "integer"
        x-display-name: "Per-thread Amount of Memory"
        x-nullable: true
      pattern_cache_size:
        type: "integer"
        x-display-name: "Pattern Lookup Cache Size"
        x-nullable: true
      peers_max_updates_at_once:
        type: "integer"
        x-display-name: "Maximum number of stick-table updates at once"
      pipesize:
        type: "integer"
        x-display-name: "Pipe Buffer Size"
      pool_high_fd_ratio:
        type: "integer"
        x-display-name: "Max Used High FD Ratio"
      pool_low_fd_ratio:
        type: "integer"
        x-display-name: "Max Used Low FD Ratio"
      pt_zero_copy_forwarding:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "enable or disable the zero-copy forwarding of data for the\
          \ pass-through multiplexer"
      quic_frontend_conn_tx_buffers_limit:
        type: "integer"
        x-display-name: "QUIC Frontend Connection TX Buffer Limit"
        x-nullable: true
      quic_frontend_max_idle_timeout:
        type: "integer"
        x-display-name: "QUIC Frontend Max Idle Timeout"
        x-nullable: true
      quic_frontend_max_streams_bidi:
        type: "integer"
        x-display-name: "QUIC Max Number of Bidirectional Streams"
        x-nullable: true
      quic_max_frame_loss:
        type: "integer"
        x-display-name: "QUIC Max Limit for Frame Loss"
        x-nullable: true
      quic_retry_threshold:
        type: "integer"
        x-display-name: "QUIC Retry Threshold"
        x-nullable: true
      quic_socket_owner:
        type: "string"
        enum:
        - "listener"
        - "connection"
        x-display-name: "QUIC Socket Owner"
      rcvbuf_backend:
        type: "integer"
        x-display-name: "Backend Receive Buffer Size"
        x-nullable: true
      rcvbuf_client:
        type: "integer"
        x-display-name: "Client Receive Buffer Size"
        x-nullable: true
      rcvbuf_frontend:
        type: "integer"
        x-display-name: "Frontend Receive Buffer Size"
        x-nullable: true
      rcvbuf_server:
        type: "integer"
        x-display-name: "Server Receive Buffer Size"
        x-nullable: true
      recv_enough:
        type: "integer"
        x-display-name: "Receive Enough Socket Buffer Size"
      runqueue_depth:
        type: "integer"
        x-display-name: "Max Tasks in Run Queue"
      sched_low_latency:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "Low Latency Task Scheduler"
      sndbuf_backend:
        type: "integer"
        x-display-name: "Backend Send Buffer Size"
        x-nullable: true
      sndbuf_client:
        type: "integer"
        x-display-name: "Client Send Buffer Size"
        x-nullable: true
      sndbuf_frontend:
        type: "integer"
        x-display-name: "Frontend Send Buffer Size"
        x-nullable: true
      sndbuf_server:
        type: "integer"
        x-display-name: "Server Send Buffer Size"
        x-nullable: true
      ssl_cachesize:
        type: "integer"
        x-display-name: "SSL Cache Size"
        x-nullable: true
      ssl_capture_buffer_size:
        type: "integer"
        x-display-name: "SSL Maximum Size of Cipherlist Buffer"
        x-nullable: true
      ssl_ctx_cache_size:
        type: "integer"
        x-display-name: "SSL Number of Certificates in Cache"
      ssl_default_dh_param:
        type: "integer"
        x-display-name: "SSL Default DH Parameter Size"
      ssl_force_private_cache:
        type: "boolean"
        x-display-name: "SSL Force Private Cache"
      ssl_keylog:
        type: "string"
        enum:
        - "enabled"
        - "disabled"
        x-display-name: "SSL Log TLS Keys"
      ssl_lifetime:
        type: "integer"
        x-display-name: "SSL Session Lifetime"
        x-nullable: true
      ssl_maxrecord:
        type: "integer"
        x-display-name: "SSL Maximum Size"
        x-nullable: true
      ssl_ocsp_update_max_delay:
        type: "integer"
        x-display-name: "SSL Maximum Interval Between Two Automatic Updates of the\
          \ same OCSP Response"
        x-nullable: true
      ssl_ocsp_update_min_delay:
        type: "integer"
        x-display-name: "SSL Minimum Interval Between Two Automatic Updates of the\
          \ same OCSP Response"
        x-nullable: true
      stick_counters:
        type: "integer"
        x-display-name: "Number of stick-counters"
        x-nullable: true
      vars_global_max_size:
        type: "integer"
        x-display-name: "Variables Global Max Size"
        x-nullable: true
      vars_proc_max_size:
        type: "integer"
        x-display-name: "Variables Process Max Size"
        x-nullable: true
      vars_reqres_max_size:
        type: "integer"
        x-display-name: "Variables Request/Response Max Size"
        x-nullable: true
      vars_sess_max_size:
        type: "integer"
        x-display-name: "Variables Session Max Size"
        x-nullable: true
      vars_txn_max_size:
        type: "integer"
        x-display-name: "Variables Transaction Max Size"
        x-nullable: true
      zlib_memlevel:
        type: "integer"
        minimum: 1
        maximum: 9
        x-display-name: "Zlib Memory Level"
      zlib_windowsize:
        type: "integer"
        minimum: 8
        maximum: 15
        x-display-name: "Zlib Window Size"
    example:
      buffers_limit: 6
      fail_alloc: true
      ssl_default_dh_param: 1
      h1_zero_copy_fwd_send: "enabled"
      lua_maxmem: true
      lua_burst_timeout: 8
      h2_be_initial_window_size: 6
      listener_default_shards: "by-process"
      ssl_keylog: "enabled"
      h2_be_max_concurrent_streams: 6
      listener_multi_queue: "enabled"
      vars_global_max_size: 5
      ssl_ocsp_update_max_delay: 8
      ssl_ctx_cache_size: 9
      http_maxhdr: 337
      runqueue_depth: 0
      ssl_force_private_cache: true
      idle_pool_shared: "enabled"
      quic_frontend_max_streams_bidi: 0
      pool_low_fd_ratio: 9
      rcvbuf_client: 6
      sndbuf_server: 6
      h1_zero_copy_fwd_recv: "enabled"
      sndbuf_backend: 2
      rcvbuf_server: 4
      h2_fe_max_concurrent_streams: 6
      zlib_windowsize: 12
      ssl_lifetime: 3
      rcvbuf_frontend: 8
      quic_frontend_max_idle_timeout: 9
      h2_fe_initial_window_size: 5
      disable_zero_copy_forwarding: true
      maxpollevents: 4
      max_checks_per_thread: 5
      pool_high_fd_ratio: 7
      pt_zero_copy_forwarding: "enabled"
      h2_zero_copy_fwd_send: "enabled"
      lua_log_stderr: "auto"
      vars_sess_max_size: 3
      peers_max_updates_at_once: 1
      buffers_reserve: 2
      zlib_memlevel: 8
      maxrewrite: 0
      comp_maxlevel: 1
      events_max_events_at_once: 2884
      ssl_maxrecord: 9
      h2_max_concurrent_streams: 7
      memory_hot_size: 6
      pattern_cache_size: 4
      quic_socket_owner: "listener"
      rcvbuf_backend: 4
      vars_proc_max_size: 8
      lua_service_timeout: 3
      lua_forced_yield: 7
      ssl_ocsp_update_min_delay: 0
      h2_max_frame_size: 0
      sndbuf_frontend: 8
      vars_reqres_max_size: 7
      ssl_capture_buffer_size: 8
      lua_session_timeout: 3
      idletimer: 30489
      maxaccept: 3
      ssl_cachesize: 4
      vars_txn_max_size: 3
      sndbuf_client: 1
      quic_max_frame_loss: 7
      bufsize: 6
      quic_frontend_conn_tx_buffers_limit: 0
      sched_low_latency: "enabled"
      quic_retry_threshold: 5
      h2_header_table_size: 21975
      h2_initial_window_size: 3
      lua_log_loggers: "enabled"
      recv_enough: 3
      fd_edge_triggered: "enabled"
      lua_task_timeout: 7
      pipesize: 4
      http_cookielen: 7
      http_logurilen: 6
      stick_counters: 5
  global_wurfl_options:
    type: "object"
    properties:
      cache_size:
        type: "integer"
        x-display-name: "Sets the WURFL Useragent cache size"
      data_file:
        type: "string"
        x-display-name: "The path of the WURFL data file"
      information_list:
        type: "string"
        x-display-name: "A space-delimited list of WURFL capabilities"
      information_list_separator:
        type: "string"
        x-display-name: "A char that will be used to separate values in a response\
          \ header containing WURFL results"
      patch_file:
        type: "string"
        x-display-name: "A list of WURFL patch file paths"
    example:
      patch_file: "patch_file"
      data_file: "data_file"
      information_list_separator: "information_list_separator"
      cache_size: 2
      information_list: "information_list"
  backend_force_persist:
    type: "object"
    required:
    - "cond"
    - "cond_test"
    properties:
      cond:
        type: "string"
        enum:
        - "if"
        - "unless"
        x-display-name: "Condition"
      cond_test:
        type: "string"
        x-dependency:
          cond:
            required: true
        x-display-name: "Condition Test"
  info_api:
    type: "object"
    properties:
      build_date:
        type: "string"
        format: "date-time"
        description: "HAProxy Dataplane API build date"
      version:
        type: "string"
        description: "HAProxy Dataplane API version string"
  info_system_cpu_info:
    type: "object"
    properties:
      model:
        type: "string"
      num_cpus:
        type: "integer"
        description: "Number of logical CPUs"
  info_system_mem_info:
    type: "object"
    properties:
      dataplaneapi_memory:
        type: "integer"
      free_memory:
        type: "integer"
      total_memory:
        type: "integer"
  info_system:
    type: "object"
    properties:
      cpu_info:
        $ref: "#/definitions/info_system_cpu_info"
      hostname:
        type: "string"
        description: "Hostname where the HAProxy is running"
      mem_info:
        $ref: "#/definitions/info_system_mem_info"
      os_string:
        type: "string"
        description: "OS string"
      time:
        type: "integer"
        description: "Current time in milliseconds since Epoch."
      uptime:
        type: "integer"
        description: "System uptime"
        x-nullable: true
  stick_table_fields:
    type: "object"
    properties:
      field:
        type: "string"
        enum:
        - "server_id"
        - "gpc0"
        - "gpc0_rate"
        - "gpc1"
        - "gpc1_rate"
        - "gpt0"
        - "conn_cnt"
        - "conn_cur"
        - "conn_rate"
        - "sess_cnt"
        - "sess_rate"
        - "http_req_cnt"
        - "http_req_rate"
        - "http_err_cnt"
        - "http_err_rate"
        - "bytes_in_cnt"
        - "bytes_in_rate"
        - "bytes_out_cnt"
        - "bytes_out_rate"
      period:
        type: "integer"
        x-dependency:
          type:
            value: "rate"
      type:
        type: "string"
        enum:
        - "rate"
        - "counter"
    example:
      period: 0
      field: "server_id"
      type: "rate"
    x-go-name: "StickTableField"
  Cluster controller information_log_targets:
    type: "object"
    required:
    - "address"
    - "port"
    - "protocol"
    properties:
      address:
        type: "string"
      log_format:
        type: "string"
      port:
        type: "integer"
        minimum: 1
        maximum: 65535
      protocol:
        type: "string"
        enum:
        - "tcp"
        - "udp"
    example:
      log_format: "log_format"
      protocol: "tcp"
      address: "address"
      port: 5249
    x-go-name: "ClusterLogTarget"
  Cluster controller information:
    type: "object"
    properties:
      address:
        type: "string"
        readOnly: true
        pattern: "^[^\\s]+$"
      api_base_path:
        type: "string"
        readOnly: true
      cluster_id:
        type: "string"
      description:
        type: "string"
        readOnly: true
      log_targets:
        type: "array"
        items:
          $ref: "#/definitions/Cluster controller information_log_targets"
        x-omitempty: true
        x-go-name: "ClusterLogTargets"
      name:
        type: "string"
        readOnly: true
      port:
        type: "integer"
        readOnly: true
        minimum: 1
        maximum: 65535
        x-nullable: true
    example:
      cluster_id: "cluster_id"
      address: "address"
      port: 39501
      name: "name"
      description: "description"
      api_base_path: "api_base_path"
      log_targets:
      - log_format: "log_format"
        protocol: "tcp"
        address: "address"
        port: 5249
      - log_format: "log_format"
        protocol: "tcp"
        address: "address"
        port: 5249
  cookie_attr:
    type: "object"
    properties:
      value:
        type: "string"
        pattern: "^[^\\s]+$"
    example:
      value: "value"
    x-go-name: "Attr"
  cookie_domain:
    type: "object"
    properties:
      value:
        type: "string"
        pattern: "^[^\\s]+$"
    example:
      value: "value"
    x-go-name: "Domain"
  spoe_message_event:
    type: "object"
    required:
    - "name"
    properties:
      cond:
        type: "string"
        enum:
        - "if"
        - "unless"
        x-display-name: "Condition"
      cond_test:
        type: "string"
        x-dependency:
          cond:
            required: true
        x-display-name: "Condition Test"
      name:
        type: "string"
        enum:
        - "on-client-session"
        - "on-server-session"
        - "on-frontend-tcp-request"
        - "on-backend-tcp-request"
        - "on-tcp-response"
        - "on-frontend-http-request"
        - "on-backend-http-request"
        - "on-http-response"
    example:
      cond_test: "cond_test"
      name: "on-client-session"
      cond: "if"
parameters:
  transaction_id:
    name: "transaction_id"
    in: "query"
    description: "ID of the transaction where we want to add the operation. Cannot\
      \ be used when version is specified."
    required: false
    type: "string"
    x-nullable: false
    x-exportParamName: "TransactionId"
    x-optionalDataType: "String"
  version:
    name: "version"
    in: "query"
    description: "Version used for checking configuration version. Cannot be used\
      \ when transaction is specified, transaction has it's own version."
    required: false
    type: "integer"
    x-nullable: false
    x-exportParamName: "Version"
    x-optionalDataType: "Int32"
  force_reload:
    name: "force_reload"
    in: "query"
    description: "If set, do a force reload, do not wait for the configured reload-delay.\
      \ Cannot be used when transaction is specified, as changes in transaction are\
      \ not applied directly to configuration."
    required: false
    type: "boolean"
    default: false
    x-exportParamName: "ForceReload"
    x-optionalDataType: "Bool"
  skip_reload:
    name: "skip_reload"
    in: "query"
    description: "If set, no reload will be initiated after update"
    required: false
    type: "boolean"
    default: false
    x-exportParamName: "SkipReload"
    x-optionalDataType: "Bool"
responses:
  BadRequest:
    description: "Bad request"
    headers:
      Configuration-Version:
        type: "string"
        description: "Configuration file version"
    schema:
      $ref: "#/definitions/error"
  NotAcceptable:
    description: "The specified resource cannot be handled"
    headers:
      Configuration-Version:
        type: "string"
        description: "Configuration file version"
    schema:
      $ref: "#/definitions/error"
  NotFound:
    description: "The specified resource was not found"
    headers:
      Configuration-Version:
        type: "string"
        description: "Configuration file version"
    schema:
      $ref: "#/definitions/error"
  AlreadyExists:
    description: "The specified resource already exists"
    headers:
      Configuration-Version:
        type: "string"
        description: "Configuration file version"
    schema:
      $ref: "#/definitions/error"
  DefaultError:
    description: "General Error"
    headers:
      Configuration-Version:
        type: "string"
        description: "Configuration file version"
    schema:
      $ref: "#/definitions/error"
externalDocs:
  description: "HAProxy Documentation"
  url: "https://docs.haproxy.org/"
